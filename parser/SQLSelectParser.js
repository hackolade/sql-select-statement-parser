// Generated from grammars/SQLSelectParser.g4 by ANTLR 4.9.2
// jshint ignore: start
const antlr4 = require('antlr4');
const SQLSelectParserListener = require('./SQLSelectParserListener.js');

const serializedATN = [
	'\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786',
	'\u5964\u0003\u016d\u09f5\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004',
	'\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t',
	'\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004',
	'\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010',
	'\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013',
	'\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017',
	'\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a',
	'\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e',
	'\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004"\t"\u0004#',
	"\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004'\t'\u0004(\t(\u0004)\t)\u0004",
	'*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004',
	'1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004',
	'8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004',
	'?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004',
	'F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004',
	'M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004',
	'T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004',
	'[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004',
	'b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004',
	'i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004',
	'p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004',
	'w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004',
	'~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004',
	'\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t',
	'\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004',
	'\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t',
	'\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004',
	'\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t',
	'\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004',
	'\u0097\t\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t',
	'\u009a\u0004\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004',
	'\u009e\t\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t',
	'\u00a1\u0004\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004',
	'\u00a5\t\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t',
	'\u00a8\u0004\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004',
	'\u00ac\t\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t',
	'\u00af\u0003\u0002\u0005\u0002\u0160\n\u0002\u0003\u0002\u0003\u0002',
	'\u0003\u0002\u0005\u0002\u0165\n\u0002\u0003\u0002\u0005\u0002\u0168',
	'\n\u0002\u0003\u0003\u0003\u0003\u0005\u0003\u016c\n\u0003\u0003\u0003',
	'\u0003\u0003\u0003\u0003\u0005\u0003\u0171\n\u0003\u0007\u0003\u0173',
	'\n\u0003\f\u0003\u000e\u0003\u0176\u000b\u0003\u0003\u0004\u0003\u0004',
	'\u0005\u0004\u017a\n\u0004\u0003\u0004\u0003\u0004\u0005\u0004\u017e',
	'\n\u0004\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005',
	'\u0003\u0005\u0003\u0005\u0005\u0005\u0187\n\u0005\u0003\u0005\u0003',
	'\u0005\u0003\u0005\u0005\u0005\u018c\n\u0005\u0003\u0006\u0005\u0006',
	'\u018f\n\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0193\n\u0006\u0003',
	'\u0006\u0005\u0006\u0196\n\u0006\u0003\u0006\u0003\u0006\u0005\u0006',
	'\u019a\n\u0006\u0003\u0006\u0005\u0006\u019d\n\u0006\u0005\u0006\u019f',
	'\n\u0006\u0003\u0006\u0005\u0006\u01a2\n\u0006\u0003\u0007\u0003\u0007',
	'\u0003\u0007\u0003\u0007\u0005\u0007\u01a8\n\u0007\u0003\u0007\u0003',
	'\u0007\u0005\u0007\u01ac\n\u0007\u0005\u0007\u01ae\n\u0007\u0003\u0007',
	'\u0003\u0007\u0005\u0007\u01b2\n\u0007\u0003\u0007\u0003\u0007\u0005',
	'\u0007\u01b6\n\u0007\u0007\u0007\u01b8\n\u0007\f\u0007\u000e\u0007\u01bb',
	'\u000b\u0007\u0003\b\u0003\b\u0003\b\u0003\b\u0005\b\u01c1\n\b\u0005',
	'\b\u01c3\n\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0005\t\u01ca\n',
	'\t\u0003\n\u0003\n\u0007\n\u01ce\n\n\f\n\u000e\n\u01d1\u000b\n\u0003',
	'\n\u0003\n\u0005\n\u01d5\n\n\u0003\n\u0005\n\u01d8\n\n\u0003\n\u0005',
	'\n\u01db\n\n\u0003\n\u0007\n\u01de\n\n\f\n\u000e\n\u01e1\u000b\n\u0003',
	'\n\u0005\n\u01e4\n\n\u0003\n\u0005\n\u01e7\n\n\u0003\n\u0005\n\u01ea',
	'\n\n\u0003\n\u0005\n\u01ed\n\n\u0003\u000b\u0003\u000b\u0005\u000b\u01f1',
	'\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003',
	'\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0005\f\u0201\n\f',
	'\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0005\u000e',
	'\u0209\n\u000e\u0003\u000f\u0003\u000f\u0005\u000f\u020d\n\u000f\u0003',
	'\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0213\n\u0010',
	'\u0003\u0010\u0005\u0010\u0216\n\u0010\u0003\u0010\u0005\u0010\u0219',
	'\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010',
	'\u021f\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0224',
	'\n\u0010\u0007\u0010\u0226\n\u0010\f\u0010\u000e\u0010\u0229\u000b\u0010',
	'\u0005\u0010\u022b\n\u0010\u0003\u0011\u0003\u0011\u0003\u0011\u0003',
	'\u0011\u0003\u0011\u0003\u0011\u0005\u0011\u0233\n\u0011\u0005\u0011',
	'\u0235\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003',
	'\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u0240',
	'\n\u0013\f\u0013\u000e\u0013\u0243\u000b\u0013\u0003\u0014\u0003\u0014',
	'\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015',
	'\u0003\u0016\u0005\u0016\u024e\n\u0016\u0003\u0016\u0003\u0016\u0003',
	'\u0016\u0005\u0016\u0253\n\u0016\u0003\u0016\u0005\u0016\u0256\n\u0016',
	'\u0003\u0016\u0005\u0016\u0259\n\u0016\u0003\u0017\u0003\u0017\u0003',
	'\u0017\u0005\u0017\u025e\n\u0017\u0003\u0018\u0003\u0018\u0003\u0019',
	'\u0003\u0019\u0005\u0019\u0264\n\u0019\u0003\u001a\u0003\u001a\u0003',
	'\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003',
	'\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005',
	'\u001a\u0274\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b',
	'\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c',
	'\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c',
	'\u0003\u001c\u0003\u001c\u0005\u001c\u0288\n\u001c\u0003\u001d\u0003',
	'\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0005',
	'\u001d\u0291\n\u001d\u0003\u001e\u0003\u001e\u0005\u001e\u0295\n\u001e',
	'\u0003\u001e\u0003\u001e\u0003\u001e\u0007\u001e\u029a\n\u001e\f\u001e',
	'\u000e\u001e\u029d\u000b\u001e\u0003\u001f\u0003\u001f\u0005\u001f\u02a1',
	'\n\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003',
	' \u0005 \u02aa\n \u0003!\u0003!\u0003!\u0003!\u0005!\u02b0\n!\u0003',
	'"\u0003"\u0003"\u0003"\u0005"\u02b6\n"\u0003#\u0003#\u0003$\u0003',
	'$\u0003$\u0005$\u02bd\n$\u0003%\u0003%\u0003%\u0007%\u02c2\n%\f%\u000e',
	'%\u02c5\u000b%\u0003&\u0003&\u0003&\u0003&\u0007&\u02cb\n&\f&\u000e',
	"&\u02ce\u000b&\u0003'\u0003'\u0003'\u0003(\u0003(\u0003(\u0005(\u02d6",
	'\n(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u02e0',
	'\n)\u0003*\u0006*\u02e3\n*\r*\u000e*\u02e4\u0003+\u0003+\u0003+\u0003',
	'+\u0005+\u02eb\n+\u0003+\u0005+\u02ee\n+\u0003+\u0003+\u0003+\u0003',
	'+\u0005+\u02f4\n+\u0003,\u0003,\u0003-\u0003-\u0003-\u0005-\u02fb\n',
	'-\u0003.\u0003.\u0005.\u02ff\n.\u0003.\u0003.\u0007.\u0303\n.\f.\u000e',
	'.\u0306\u000b.\u0003/\u0003/\u0005/\u030a\n/\u0003/\u0005/\u030d\n/',
	'\u0003/\u0003/\u0005/\u0311\n/\u0005/\u0313\n/\u00030\u00050\u0316\n',
	'0\u00030\u00030\u00050\u031a\n0\u00031\u00031\u00031\u00032\u00032\u0003',
	'2\u00033\u00033\u00033\u00033\u00053\u0326\n3\u00033\u00033\u00033\u0005',
	'3\u032b\n3\u00033\u00073\u032e\n3\f3\u000e3\u0331\u000b3\u00034\u0003',
	'4\u00074\u0335\n4\f4\u000e4\u0338\u000b4\u00035\u00035\u00035\u0003',
	'5\u00035\u00035\u00055\u0340\n5\u00035\u00035\u00035\u00035\u00035\u0003',
	'5\u00055\u0348\n5\u00035\u00035\u00035\u00055\u034d\n5\u00036\u0003',
	'6\u00056\u0351\n6\u00036\u00036\u00036\u00036\u00056\u0357\n6\u0003',
	'6\u00056\u035a\n6\u00037\u00057\u035d\n7\u00037\u00037\u00057\u0361',
	'\n7\u00038\u00038\u00058\u0365\n8\u00038\u00038\u00039\u00039\u0003',
	'9\u00039\u00039\u00059\u036e\n9\u0003:\u0003:\u0005:\u0372\n:\u0003',
	':\u0005:\u0375\n:\u0003:\u0005:\u0378\n:\u0003;\u0003;\u0003;\u0005',
	';\u037d\n;\u0003;\u0003;\u0003<\u0003<\u0005<\u0383\n<\u0003<\u0005',
	'<\u0386\n<\u0003<\u0003<\u0003<\u0005<\u038b\n<\u0003<\u0005<\u038e',
	'\n<\u0005<\u0390\n<\u0003=\u0003=\u0003=\u0005=\u0395\n=\u0003=\u0003',
	'=\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0003>\u0005>\u03a1',
	'\n>\u0003?\u0003?\u0003?\u0003?\u0003?\u0007?\u03a8\n?\f?\u000e?\u03ab',
	'\u000b?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003',
	'@\u0005@\u03b6\n@\u0003@\u0005@\u03b9\n@\u0003@\u0003@\u0003@\u0005',
	'@\u03be\n@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u03c5\n@\u0003',
	'A\u0003A\u0005A\u03c9\nA\u0003A\u0003A\u0005A\u03cd\nA\u0005A\u03cf',
	'\nA\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003D\u0003',
	'D\u0003D\u0003D\u0005D\u03dd\nD\u0003E\u0003E\u0003F\u0005F\u03e2\n',
	'F\u0003F\u0003F\u0003G\u0003G\u0003G\u0007G\u03e9\nG\fG\u000eG\u03ec',
	'\u000bG\u0003H\u0003H\u0003H\u0005H\u03f1\nH\u0003H\u0003H\u0003H\u0003',
	'H\u0003H\u0003H\u0003H\u0005H\u03fa\nH\u0003H\u0003H\u0005H\u03fe\n',
	'H\u0003H\u0003H\u0005H\u0402\nH\u0003I\u0003I\u0003J\u0003J\u0003K\u0003',
	'K\u0003K\u0003K\u0003K\u0003K\u0005K\u040e\nK\u0003L\u0003L\u0003L\u0007',
	'L\u0413\nL\fL\u000eL\u0416\u000bL\u0003M\u0003M\u0005M\u041a\nM\u0003',
	'N\u0003N\u0003N\u0003N\u0005N\u0420\nN\u0003N\u0005N\u0423\nN\u0003',
	'N\u0003N\u0005N\u0427\nN\u0003N\u0003N\u0003N\u0003N\u0003N\u0003N\u0003',
	'N\u0003N\u0003N\u0007N\u0432\nN\fN\u000eN\u0435\u000bN\u0003O\u0003',
	'O\u0003O\u0003O\u0003O\u0003O\u0005O\u043d\nO\u0003O\u0003O\u0003O\u0003',
	'O\u0003O\u0003O\u0003O\u0003O\u0003O\u0003O\u0007O\u0449\nO\fO\u000e',
	'O\u044c\u000bO\u0003P\u0003P\u0003Q\u0003Q\u0005Q\u0452\nQ\u0003Q\u0003',
	'Q\u0003Q\u0005Q\u0457\nQ\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0005Q\u045e',
	'\nQ\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u0466\nR\u0003',
	'R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0003R\u0005R\u0471',
	'\nR\u0003R\u0003R\u0005R\u0475\nR\u0003S\u0003S\u0003S\u0003S\u0003',
	'S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003',
	'S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003S\u0003',
	'S\u0005S\u0490\nS\u0007S\u0492\nS\fS\u000eS\u0495\u000bS\u0003T\u0003',
	'T\u0003T\u0003T\u0003T\u0005T\u049c\nT\u0003T\u0003T\u0005T\u04a0\n',
	'T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003',
	'T\u0003T\u0003T\u0003T\u0005T\u04af\nT\u0003T\u0003T\u0003T\u0003T\u0003',
	'T\u0005T\u04b6\nT\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003',
	'T\u0003T\u0003T\u0003T\u0003T\u0005T\u04c4\nT\u0003T\u0003T\u0003T\u0003',
	'T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0005T\u04d0\nT\u0003T\u0003',
	'T\u0003T\u0003T\u0005T\u04d6\nT\u0003T\u0003T\u0003T\u0006T\u04db\n',
	'T\rT\u000eT\u04dc\u0003T\u0005T\u04e0\nT\u0003T\u0003T\u0003T\u0003',
	'T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003',
	'T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003',
	'T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0005',
	'T\u0503\nT\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003',
	'T\u0007T\u050e\nT\fT\u000eT\u0511\u000bT\u0003U\u0003U\u0003U\u0005',
	'U\u0516\nU\u0003V\u0003V\u0003V\u0005V\u051b\nV\u0003V\u0003V\u0003',
	'V\u0005V\u0520\nV\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u0527\n',
	'V\u0003V\u0003V\u0003V\u0003V\u0005V\u052d\nV\u0003V\u0003V\u0003V\u0005',
	'V\u0532\nV\u0003V\u0003V\u0003V\u0005V\u0537\nV\u0003V\u0003V\u0003',
	'V\u0003V\u0005V\u053d\nV\u0003V\u0003V\u0005V\u0541\nV\u0003V\u0003',
	'V\u0003V\u0005V\u0546\nV\u0003V\u0003V\u0003V\u0005V\u054b\nV\u0003',
	'V\u0003V\u0003V\u0005V\u0550\nV\u0003V\u0003V\u0003V\u0005V\u0555\n',
	'V\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u055c\nV\u0003V\u0003V\u0003',
	'V\u0003V\u0003V\u0005V\u0563\nV\u0003V\u0003V\u0003V\u0003V\u0003V\u0005',
	'V\u056a\nV\u0003V\u0003V\u0003V\u0003V\u0003V\u0005V\u0571\nV\u0003',
	'V\u0003V\u0003V\u0005V\u0576\nV\u0003V\u0003V\u0003V\u0005V\u057b\n',
	'V\u0003V\u0003V\u0003V\u0005V\u0580\nV\u0003V\u0003V\u0005V\u0584\n',
	'V\u0003V\u0003V\u0005V\u0588\nV\u0003V\u0003V\u0005V\u058c\nV\u0005',
	'V\u058e\nV\u0003W\u0003W\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003',
	'X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0005X\u05a1',
	'\nX\u0003X\u0003X\u0005X\u05a5\nX\u0003X\u0003X\u0003X\u0003X\u0003',
	'X\u0005X\u05ac\nX\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003X\u0003',
	'X\u0003X\u0003X\u0005X\u05b8\nX\u0003X\u0005X\u05bb\nX\u0003X\u0003',
	'X\u0005X\u05bf\nX\u0003Y\u0003Y\u0003Y\u0005Y\u05c4\nY\u0003Z\u0003',
	'Z\u0003Z\u0005Z\u05c9\nZ\u0003Z\u0003Z\u0005Z\u05cd\nZ\u0003[\u0003',
	'[\u0003[\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u05d7\n\\\u0003',
	'\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u05e0\n\\',
	'\u0005\\\u05e2\n\\\u0003]\u0005]\u05e5\n]\u0003]\u0003]\u0003^\u0003',
	'^\u0003^\u0003^\u0003^\u0005^\u05ee\n^\u0003_\u0003_\u0003_\u0007_\u05f3',
	'\n_\f_\u000e_\u05f6\u000b_\u0003`\u0003`\u0003`\u0003`\u0003`\u0003',
	'`\u0003`\u0003`\u0003`\u0003`\u0005`\u0602\n`\u0003`\u0003`\u0003`\u0005',
	'`\u0607\n`\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u060e\na\u0003',
	'a\u0003a\u0003a\u0003a\u0005a\u0614\na\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0006a\u062c\na\r',
	'a\u000ea\u062d\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0005a\u064d\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0005a\u0661\na\u0003a\u0003a\u0003a\u0003a\u0005a\u0667\n',
	'a\u0003a\u0003a\u0005a\u066b\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005',
	'a\u0686\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0005a\u0692\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0005a\u069f\na\u0003a\u0003a\u0005a\u06a3',
	'\na\u0003a\u0003a\u0005a\u06a7\na\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0005a\u06c3\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u06f9\na\u0003a\u0003a\u0003',
	'a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u0703\na\u0003a\u0005a\u0706',
	'\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003',
	'a\u0005a\u0712\na\u0003a\u0003a\u0003a\u0005a\u0717\na\u0003b\u0003',
	'b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u0723',
	'\nb\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003',
	'b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0003b\u0005b\u0737',
	'\nb\u0003c\u0003c\u0005c\u073b\nc\u0003c\u0003c\u0003d\u0003d\u0003',
	'e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0003e\u0007e\u0749\ne\f',
	'e\u000ee\u074c\u000be\u0005e\u074e\ne\u0003f\u0003f\u0003f\u0005f\u0753',
	'\nf\u0003f\u0005f\u0756\nf\u0003g\u0003g\u0003h\u0003h\u0003h\u0003',
	'h\u0003h\u0005h\u075f\nh\u0003h\u0003h\u0005h\u0763\nh\u0003h\u0003',
	'h\u0003h\u0003h\u0005h\u0769\nh\u0003h\u0003h\u0003h\u0003h\u0005h\u076f',
	'\nh\u0003h\u0003h\u0005h\u0773\nh\u0003h\u0003h\u0003i\u0003i\u0003',
	'i\u0003i\u0003i\u0003i\u0003i\u0005i\u077e\ni\u0003i\u0003i\u0003i\u0003',
	'i\u0005i\u0784\ni\u0005i\u0786\ni\u0003i\u0003i\u0003j\u0003j\u0003',
	'j\u0005j\u078d\nj\u0003j\u0003j\u0003j\u0003j\u0003j\u0005j\u0794\n',
	'j\u0003j\u0005j\u0797\nj\u0005j\u0799\nj\u0003j\u0003j\u0005j\u079d',
	'\nj\u0003k\u0003k\u0003k\u0007k\u07a2\nk\fk\u000ek\u07a5\u000bk\u0003',
	'l\u0003l\u0005l\u07a9\nl\u0003l\u0005l\u07ac\nl\u0003m\u0003m\u0003',
	'm\u0003m\u0003m\u0005m\u07b3\nm\u0003m\u0003m\u0003m\u0003m\u0007m\u07b9',
	'\nm\fm\u000em\u07bc\u000bm\u0003n\u0003n\u0005n\u07c0\nn\u0003o\u0003',
	'o\u0003o\u0005o\u07c5\no\u0003p\u0003p\u0005p\u07c9\np\u0003p\u0003',
	'p\u0005p\u07cd\np\u0003q\u0003q\u0003q\u0003r\u0003r\u0003r\u0003s\u0003',
	's\u0003s\u0003t\u0003t\u0003t\u0007t\u07db\nt\ft\u000et\u07de\u000b',
	't\u0003u\u0003u\u0003u\u0005u\u07e3\nu\u0003v\u0003v\u0003w\u0003w\u0003',
	'x\u0003x\u0005x\u07eb\nx\u0003y\u0003y\u0003z\u0003z\u0003z\u0003z\u0003',
	'{\u0003{\u0003{\u0003{\u0003|\u0003|\u0003|\u0003|\u0003}\u0003}\u0003',
	'}\u0007}\u07fe\n}\f}\u000e}\u0801\u000b}\u0003~\u0003~\u0003~\u0003',
	'~\u0005~\u0807\n~\u0003\u007f\u0003\u007f\u0005\u007f\u080b\n\u007f',
	'\u0003\u0080\u0003\u0080\u0003\u0081\u0003\u0081\u0005\u0081\u0811\n',
	'\u0081\u0003\u0081\u0005\u0081\u0814\n\u0081\u0003\u0081\u0003\u0081',
	'\u0003\u0081\u0005\u0081\u0819\n\u0081\u0005\u0081\u081b\n\u0081\u0003',
	'\u0081\u0005\u0081\u081e\n\u0081\u0003\u0081\u0005\u0081\u0821\n\u0081',
	'\u0003\u0081\u0003\u0081\u0005\u0081\u0825\n\u0081\u0003\u0081\u0005',
	'\u0081\u0828\n\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u082c\n\u0081',
	'\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0831\n\u0081\u0003',
	'\u0081\u0005\u0081\u0834\n\u0081\u0003\u0081\u0003\u0081\u0005\u0081',
	'\u0838\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003',
	'\u0081\u0005\u0081\u083f\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081',
	'\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081',
	'\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u084e\n',
	'\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0852\n\u0081\u0003\u0081',
	'\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0858\n\u0081\u0003',
	'\u0081\u0005\u0081\u085b\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081',
	'\u0005\u0081\u0860\n\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0864',
	'\n\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0868\n\u0081\u0003\u0081',
	'\u0003\u0081\u0005\u0081\u086c\n\u0081\u0003\u0081\u0003\u0081\u0003',
	'\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0874\n\u0081',
	'\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081',
	'\u0005\u0081\u087c\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003',
	'\u0081\u0003\u0081\u0005\u0081\u0883\n\u0081\u0003\u0081\u0003\u0081',
	'\u0005\u0081\u0887\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003',
	'\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u0890\n\u0081',
	'\u0003\u0081\u0005\u0081\u0893\n\u0081\u0003\u0081\u0003\u0081\u0003',
	'\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005',
	'\u0081\u089d\n\u0081\u0003\u0081\u0005\u0081\u08a0\n\u0081\u0003\u0081',
	'\u0003\u0081\u0005\u0081\u08a4\n\u0081\u0003\u0081\u0003\u0081\u0005',
	'\u0081\u08a8\n\u0081\u0003\u0081\u0005\u0081\u08ab\n\u0081\u0003\u0081',
	'\u0003\u0081\u0005\u0081\u08af\n\u0081\u0003\u0081\u0003\u0081\u0005',
	'\u0081\u08b3\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081',
	'\u08b8\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u08bd',
	'\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081',
	'\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081',
	'\u0007\u0081\u08ca\n\u0081\f\u0081\u000e\u0081\u08cd\u000b\u0081\u0005',
	'\u0081\u08cf\n\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081',
	'\u0007\u0081\u08d5\n\u0081\f\u0081\u000e\u0081\u08d8\u000b\u0081\u0005',
	'\u0081\u08da\n\u0081\u0003\u0081\u0003\u0081\u0005\u0081\u08de\n\u0081',
	'\u0005\u0081\u08e0\n\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0005',
	'\u0082\u08e5\n\u0082\u0003\u0083\u0003\u0083\u0003\u0083\u0005\u0083',
	'\u08ea\n\u0083\u0003\u0083\u0005\u0083\u08ed\n\u0083\u0003\u0083\u0003',
	'\u0083\u0003\u0084\u0006\u0084\u08f2\n\u0084\r\u0084\u000e\u0084\u08f3',
	'\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085',
	'\u0005\u0085\u08fc\n\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003',
	'\u0085\u0005\u0085\u0902\n\u0085\u0005\u0085\u0904\n\u0085\u0003\u0086',
	'\u0003\u0086\u0005\u0086\u0908\n\u0086\u0003\u0086\u0003\u0086\u0005',
	'\u0086\u090c\n\u0086\u0003\u0087\u0003\u0087\u0005\u0087\u0910\n\u0087',
	'\u0003\u0087\u0003\u0087\u0005\u0087\u0914\n\u0087\u0003\u0088\u0003',
	'\u0088\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089\u0003\u0089\u0003',
	'\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0005\u008a\u0921\n\u008a',
	'\u0003\u008b\u0003\u008b\u0003\u008b\u0005\u008b\u0926\n\u008b\u0003',
	'\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0003\u008d\u0003\u008d\u0003',
	'\u008e\u0003\u008e\u0006\u008e\u0930\n\u008e\r\u008e\u000e\u008e\u0931',
	'\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f\u0938\n',
	'\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003',
	'\u008f\u0005\u008f\u0940\n\u008f\u0003\u0090\u0003\u0090\u0006\u0090',
	'\u0944\n\u0090\r\u0090\u000e\u0090\u0945\u0003\u0091\u0003\u0091\u0003',
	'\u0091\u0003\u0091\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0093\u0003',
	'\u0093\u0003\u0093\u0003\u0093\u0007\u0093\u0953\n\u0093\f\u0093\u000e',
	'\u0093\u0956\u000b\u0093\u0003\u0093\u0003\u0093\u0003\u0094\u0003\u0094',
	'\u0003\u0094\u0007\u0094\u095d\n\u0094\f\u0094\u000e\u0094\u0960\u000b',
	'\u0094\u0003\u0095\u0003\u0095\u0003\u0096\u0003\u0096\u0005\u0096\u0966',
	'\n\u0096\u0003\u0097\u0003\u0097\u0003\u0097\u0007\u0097\u096b\n\u0097',
	'\f\u0097\u000e\u0097\u096e\u000b\u0097\u0003\u0098\u0003\u0098\u0003',
	'\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0003\u0099\u0007\u0099\u0977',
	'\n\u0099\f\u0099\u000e\u0099\u097a\u000b\u0099\u0003\u0099\u0003\u0099',
	'\u0005\u0099\u097e\n\u0099\u0003\u009a\u0003\u009a\u0003\u009a\u0003',
	'\u009a\u0003\u009a\u0003\u009a\u0007\u009a\u0986\n\u009a\f\u009a\u000e',
	'\u009a\u0989\u000b\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u098d\n',
	'\u009a\u0003\u009a\u0003\u009a\u0005\u009a\u0991\n\u009a\u0005\u009a',
	'\u0993\n\u009a\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009c\u0003',
	'\u009c\u0003\u009d\u0003\u009d\u0003\u009e\u0003\u009e\u0003\u009f\u0003',
	'\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003',
	'\u00a0\u0005\u00a0\u09a6\n\u00a0\u0003\u00a0\u0005\u00a0\u09a9\n\u00a0',
	'\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0007\u00a1\u09af\n',
	'\u00a1\f\u00a1\u000e\u00a1\u09b2\u000b\u00a1\u0003\u00a1\u0003\u00a1',
	'\u0003\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3\u0003\u00a3\u0005\u00a3',
	'\u09bb\n\u00a3\u0003\u00a4\u0005\u00a4\u09be\n\u00a4\u0003\u00a4\u0003',
	'\u00a4\u0005\u00a4\u09c2\n\u00a4\u0003\u00a4\u0007\u00a4\u09c5\n\u00a4',
	'\f\u00a4\u000e\u00a4\u09c8\u000b\u00a4\u0003\u00a5\u0003\u00a5\u0003',
	'\u00a6\u0003\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a8\u0003\u00a8\u0003',
	'\u00a8\u0003\u00a8\u0003\u00a8\u0003\u00a8\u0005\u00a8\u09d6\n\u00a8',
	'\u0003\u00a9\u0003\u00a9\u0005\u00a9\u09da\n\u00a9\u0003\u00aa\u0003',
	'\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003',
	'\u00ab\u0005\u00ab\u09e4\n\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac',
	'\u0003\u00ad\u0003\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00ae',
	'\u0003\u00ae\u0003\u00ae\u0005\u00ae\u09f1\n\u00ae\u0003\u00af\u0003',
	'\u00af\u0003\u00af\u0002\u0006\u009a\u009c\u00a4\u00a6\u00b0\u0002\u0004',
	'\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ',
	'"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084',
	'\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c',
	'\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4',
	'\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc',
	'\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4',
	'\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc',
	'\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114',
	'\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c',
	'\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144',
	'\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c',
	'\u00027\u0004\u0002\u001a\u001aMM\u0004\u0002,,00\u0003\u0002XZ\u0003',
	'\u0002no\u0004\u0002{{}}\u0003\u0002\u0089\u008a\u0004\u0002\u0087\u0087',
	'\u008c\u008c\u0003\u0002DE\u0004\u0002\u0003\u0003UU\u0003\u0002\u0098',
	'\u0099\u0003\u0002\u009a\u009b\u0003\u0002\u009e\u00a0\u0004\u0002\u0014',
	'\u0014aa\u0004\u0002\u0017\u0017\u00a3\u00a3\u0004\u0002DD\u00a4\u00a4',
	'\u0004\u0002\u0003\u0003\u0005\n\u0004\u0002\u000b\u000f\u00aa\u00ab',
	'\u0003\u0002\u0012\u0013\u0003\u0002\u000b\f\u0004\u0002\u000b\f\u0011',
	"\u0011\u0003\u0002&'\u0003\u0002\u00b6\u00b8\u0003\u0002\u00c4\u00c8",
	'\u0003\u0002\u00ca\u00cb\u0003\u0002\u00cc\u00cd\u0003\u0002\u00cf\u00d0',
	'\u0004\u0002\u0099\u0099\u00d2\u00d2\u0003\u0002\u00e4\u00e5\u0003\u0002',
	'\u00e8\u00e9\u0003\u0002\u00ef\u00f0\u0005\u0002\u00dc\u00dc\u00de\u00df',
	'\u010d\u010d\u0003\u0002\u011f\u0129\u0004\u00029@\u00fb\u00fb\u0003',
	'\u0002\u012a\u012c\u0005\u000238\u0119\u0119\u0130\u0131\u0006\u0002',
	'\u0119\u0119\u011b\u011d\u0130\u0130\u0132\u0132\u0004\u0002\u00d6\u00d6',
	'\u0134\u0134\u0006\u0002\u00da\u00da\u0112\u0112\u0136\u0137\u0146\u0146',
	'\u0003\u0002\u0142\u0143\u0004\u0002\u0105\u010b\u014b\u014b\u0004\u0002',
	'\u0117\u0118\u014c\u014c\u0004\u0002\u014f\u014f\u0154\u0154\u0005\u0002',
	'\u015e\u015f\u0161\u0164\u0166\u0166\u0004\u0002\u0019\u0019\u001c\u001c',
	'\u0004\u0002..02\u0004\u0002..00\u0003\u000202\u0003\u0002./\u0003\u0002',
	'\u0162\u0163\u0003\u0002\u009e\u009f\u0004\u0002++\u0096\u0096\u0003',
	'\u0002\u0003\u0004\u0004\u00023\u0081\u0083\u015a\u0002\u0b59\u0002',
	'\u015f\u0003\u0002\u0002\u0002\u0004\u016b\u0003\u0002\u0002\u0002\u0006',
	'\u017d\u0003\u0002\u0002\u0002\b\u018b\u0003\u0002\u0002\u0002\n\u018e',
	'\u0003\u0002\u0002\u0002\f\u01ad\u0003\u0002\u0002\u0002\u000e\u01bc',
	'\u0003\u0002\u0002\u0002\u0010\u01c9\u0003\u0002\u0002\u0002\u0012\u01cb',
	'\u0003\u0002\u0002\u0002\u0014\u01f0\u0003\u0002\u0002\u0002\u0016\u0200',
	'\u0003\u0002\u0002\u0002\u0018\u0202\u0003\u0002\u0002\u0002\u001a\u0205',
	'\u0003\u0002\u0002\u0002\u001c\u020c\u0003\u0002\u0002\u0002\u001e\u020e',
	'\u0003\u0002\u0002\u0002 \u022c\u0003\u0002\u0002\u0002"\u0238\u0003',
	'\u0002\u0002\u0002$\u023b\u0003\u0002\u0002\u0002&\u0244\u0003\u0002',
	'\u0002\u0002(\u0248\u0003\u0002\u0002\u0002*\u024d\u0003\u0002\u0002',
	'\u0002,\u025a\u0003\u0002\u0002\u0002.\u025f\u0003\u0002\u0002\u0002',
	'0\u0263\u0003\u0002\u0002\u00022\u0273\u0003\u0002\u0002\u00024\u0275',
	'\u0003\u0002\u0002\u00026\u0287\u0003\u0002\u0002\u00028\u0289\u0003',
	'\u0002\u0002\u0002:\u0292\u0003\u0002\u0002\u0002<\u029e\u0003\u0002',
	'\u0002\u0002>\u02a5\u0003\u0002\u0002\u0002@\u02af\u0003\u0002\u0002',
	'\u0002B\u02b1\u0003\u0002\u0002\u0002D\u02b7\u0003\u0002\u0002\u0002',
	'F\u02b9\u0003\u0002\u0002\u0002H\u02be\u0003\u0002\u0002\u0002J\u02c6',
	'\u0003\u0002\u0002\u0002L\u02cf\u0003\u0002\u0002\u0002N\u02d2\u0003',
	'\u0002\u0002\u0002P\u02df\u0003\u0002\u0002\u0002R\u02e2\u0003\u0002',
	'\u0002\u0002T\u02f3\u0003\u0002\u0002\u0002V\u02f5\u0003\u0002\u0002',
	'\u0002X\u02fa\u0003\u0002\u0002\u0002Z\u02fe\u0003\u0002\u0002\u0002',
	'\\\u0312\u0003\u0002\u0002\u0002^\u0315\u0003\u0002\u0002\u0002`\u031b',
	'\u0003\u0002\u0002\u0002b\u031e\u0003\u0002\u0002\u0002d\u032a\u0003',
	'\u0002\u0002\u0002f\u0332\u0003\u0002\u0002\u0002h\u034c\u0003\u0002',
	'\u0002\u0002j\u0359\u0003\u0002\u0002\u0002l\u0360\u0003\u0002\u0002',
	'\u0002n\u0362\u0003\u0002\u0002\u0002p\u036d\u0003\u0002\u0002\u0002',
	'r\u036f\u0003\u0002\u0002\u0002t\u0379\u0003\u0002\u0002\u0002v\u038f',
	'\u0003\u0002\u0002\u0002x\u0391\u0003\u0002\u0002\u0002z\u0398\u0003',
	'\u0002\u0002\u0002|\u03a2\u0003\u0002\u0002\u0002~\u03c4\u0003\u0002',
	'\u0002\u0002\u0080\u03ce\u0003\u0002\u0002\u0002\u0082\u03d0\u0003\u0002',
	'\u0002\u0002\u0084\u03d4\u0003\u0002\u0002\u0002\u0086\u03dc\u0003\u0002',
	'\u0002\u0002\u0088\u03de\u0003\u0002\u0002\u0002\u008a\u03e1\u0003\u0002',
	'\u0002\u0002\u008c\u03e5\u0003\u0002\u0002\u0002\u008e\u0401\u0003\u0002',
	'\u0002\u0002\u0090\u0403\u0003\u0002\u0002\u0002\u0092\u0405\u0003\u0002',
	'\u0002\u0002\u0094\u0407\u0003\u0002\u0002\u0002\u0096\u040f\u0003\u0002',
	'\u0002\u0002\u0098\u0419\u0003\u0002\u0002\u0002\u009a\u0426\u0003\u0002',
	'\u0002\u0002\u009c\u0436\u0003\u0002\u0002\u0002\u009e\u044d\u0003\u0002',
	'\u0002\u0002\u00a0\u044f\u0003\u0002\u0002\u0002\u00a2\u0474\u0003\u0002',
	'\u0002\u0002\u00a4\u0476\u0003\u0002\u0002\u0002\u00a6\u0502\u0003\u0002',
	'\u0002\u0002\u00a8\u0512\u0003\u0002\u0002\u0002\u00aa\u058d\u0003\u0002',
	'\u0002\u0002\u00ac\u058f\u0003\u0002\u0002\u0002\u00ae\u05be\u0003\u0002',
	'\u0002\u0002\u00b0\u05c0\u0003\u0002\u0002\u0002\u00b2\u05c5\u0003\u0002',
	'\u0002\u0002\u00b4\u05ce\u0003\u0002\u0002\u0002\u00b6\u05e1\u0003\u0002',
	'\u0002\u0002\u00b8\u05e4\u0003\u0002\u0002\u0002\u00ba\u05ed\u0003\u0002',
	'\u0002\u0002\u00bc\u05ef\u0003\u0002\u0002\u0002\u00be\u0606\u0003\u0002',
	'\u0002\u0002\u00c0\u0716\u0003\u0002\u0002\u0002\u00c2\u0736\u0003\u0002',
	'\u0002\u0002\u00c4\u0738\u0003\u0002\u0002\u0002\u00c6\u073e\u0003\u0002',
	'\u0002\u0002\u00c8\u0740\u0003\u0002\u0002\u0002\u00ca\u074f\u0003\u0002',
	'\u0002\u0002\u00cc\u0757\u0003\u0002\u0002\u0002\u00ce\u0759\u0003\u0002',
	'\u0002\u0002\u00d0\u0776\u0003\u0002\u0002\u0002\u00d2\u079c\u0003\u0002',
	'\u0002\u0002\u00d4\u079e\u0003\u0002\u0002\u0002\u00d6\u07a6\u0003\u0002',
	'\u0002\u0002\u00d8\u07ad\u0003\u0002\u0002\u0002\u00da\u07bf\u0003\u0002',
	'\u0002\u0002\u00dc\u07c4\u0003\u0002\u0002\u0002\u00de\u07c6\u0003\u0002',
	'\u0002\u0002\u00e0\u07ce\u0003\u0002\u0002\u0002\u00e2\u07d1\u0003\u0002',
	'\u0002\u0002\u00e4\u07d4\u0003\u0002\u0002\u0002\u00e6\u07d7\u0003\u0002',
	'\u0002\u0002\u00e8\u07e2\u0003\u0002\u0002\u0002\u00ea\u07e4\u0003\u0002',
	'\u0002\u0002\u00ec\u07e6\u0003\u0002\u0002\u0002\u00ee\u07ea\u0003\u0002',
	'\u0002\u0002\u00f0\u07ec\u0003\u0002\u0002\u0002\u00f2\u07ee\u0003\u0002',
	'\u0002\u0002\u00f4\u07f2\u0003\u0002\u0002\u0002\u00f6\u07f6\u0003\u0002',
	'\u0002\u0002\u00f8\u07fa\u0003\u0002\u0002\u0002\u00fa\u0806\u0003\u0002',
	'\u0002\u0002\u00fc\u0808\u0003\u0002\u0002\u0002\u00fe\u080c\u0003\u0002',
	'\u0002\u0002\u0100\u08df\u0003\u0002\u0002\u0002\u0102\u08e4\u0003\u0002',
	'\u0002\u0002\u0104\u08e6\u0003\u0002\u0002\u0002\u0106\u08f1\u0003\u0002',
	'\u0002\u0002\u0108\u0903\u0003\u0002\u0002\u0002\u010a\u090b\u0003\u0002',
	'\u0002\u0002\u010c\u0913\u0003\u0002\u0002\u0002\u010e\u0915\u0003\u0002',
	'\u0002\u0002\u0110\u0919\u0003\u0002\u0002\u0002\u0112\u0920\u0003\u0002',
	'\u0002\u0002\u0114\u0925\u0003\u0002\u0002\u0002\u0116\u0927\u0003\u0002',
	'\u0002\u0002\u0118\u092a\u0003\u0002\u0002\u0002\u011a\u092d\u0003\u0002',
	'\u0002\u0002\u011c\u093f\u0003\u0002\u0002\u0002\u011e\u0941\u0003\u0002',
	'\u0002\u0002\u0120\u0947\u0003\u0002\u0002\u0002\u0122\u094b\u0003\u0002',
	'\u0002\u0002\u0124\u094e\u0003\u0002\u0002\u0002\u0126\u0959\u0003\u0002',
	'\u0002\u0002\u0128\u0961\u0003\u0002\u0002\u0002\u012a\u0965\u0003\u0002',
	'\u0002\u0002\u012c\u0967\u0003\u0002\u0002\u0002\u012e\u096f\u0003\u0002',
	'\u0002\u0002\u0130\u0973\u0003\u0002\u0002\u0002\u0132\u097f\u0003\u0002',
	'\u0002\u0002\u0134\u0994\u0003\u0002\u0002\u0002\u0136\u0997\u0003\u0002',
	'\u0002\u0002\u0138\u0999\u0003\u0002\u0002\u0002\u013a\u099b\u0003\u0002',
	'\u0002\u0002\u013c\u099d\u0003\u0002\u0002\u0002\u013e\u09a8\u0003\u0002',
	'\u0002\u0002\u0140\u09aa\u0003\u0002\u0002\u0002\u0142\u09b5\u0003\u0002',
	'\u0002\u0002\u0144\u09ba\u0003\u0002\u0002\u0002\u0146\u09c1\u0003\u0002',
	'\u0002\u0002\u0148\u09c9\u0003\u0002\u0002\u0002\u014a\u09cb\u0003\u0002',
	'\u0002\u0002\u014c\u09cd\u0003\u0002\u0002\u0002\u014e\u09d5\u0003\u0002',
	'\u0002\u0002\u0150\u09d9\u0003\u0002\u0002\u0002\u0152\u09db\u0003\u0002',
	'\u0002\u0002\u0154\u09e3\u0003\u0002\u0002\u0002\u0156\u09e5\u0003\u0002',
	'\u0002\u0002\u0158\u09e8\u0003\u0002\u0002\u0002\u015a\u09f0\u0003\u0002',
	'\u0002\u0002\u015c\u09f2\u0003\u0002\u0002\u0002\u015e\u0160\u0005:',
	'\u001e\u0002\u015f\u015e\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002',
	'\u0002\u0002\u0160\u0161\u0003\u0002\u0002\u0002\u0161\u0167\u0005\u0006',
	'\u0004\u0002\u0162\u0164\u0007\u001b\u0002\u0002\u0163\u0165\u0007\u0002',
	'\u0002\u0003\u0164\u0163\u0003\u0002\u0002\u0002\u0164\u0165\u0003\u0002',
	'\u0002\u0002\u0165\u0168\u0003\u0002\u0002\u0002\u0166\u0168\u0007\u0002',
	'\u0002\u0003\u0167\u0162\u0003\u0002\u0002\u0002\u0167\u0166\u0003\u0002',
	'\u0002\u0002\u0168\u0003\u0003\u0002\u0002\u0002\u0169\u016c\u0005\u009a',
	'N\u0002\u016a\u016c\u0007A\u0002\u0002\u016b\u0169\u0003\u0002\u0002',
	'\u0002\u016b\u016a\u0003\u0002\u0002\u0002\u016c\u0174\u0003\u0002\u0002',
	'\u0002\u016d\u0170\u0007\u001a\u0002\u0002\u016e\u0171\u0005\u009aN',
	'\u0002\u016f\u0171\u0007A\u0002\u0002\u0170\u016e\u0003\u0002\u0002',
	'\u0002\u0170\u016f\u0003\u0002\u0002\u0002\u0171\u0173\u0003\u0002\u0002',
	'\u0002\u0172\u016d\u0003\u0002\u0002\u0002\u0173\u0176\u0003\u0002\u0002',
	'\u0002\u0174\u0172\u0003\u0002\u0002\u0002\u0174\u0175\u0003\u0002\u0002',
	'\u0002\u0175\u0005\u0003\u0002\u0002\u0002\u0176\u0174\u0003\u0002\u0002',
	'\u0002\u0177\u0179\u0005\n\u0006\u0002\u0178\u017a\u0005R*\u0002\u0179',
	'\u0178\u0003\u0002\u0002\u0002\u0179\u017a\u0003\u0002\u0002\u0002\u017a',
	'\u017e\u0003\u0002\u0002\u0002\u017b\u017e\u0005\u000e\b\u0002\u017c',
	'\u017e\u0005\b\u0005\u0002\u017d\u0177\u0003\u0002\u0002\u0002\u017d',
	'\u017b\u0003\u0002\u0002\u0002\u017d\u017c\u0003\u0002\u0002\u0002\u017e',
	'\u0007\u0003\u0002\u0002\u0002\u017f\u0180\u0007\u001d\u0002\u0002\u0180',
	'\u0181\u0005\b\u0005\u0002\u0181\u0182\u0007\u001e\u0002\u0002\u0182',
	'\u018c\u0003\u0002\u0002\u0002\u0183\u0184\u0005\n\u0006\u0002\u0184',
	'\u0186\u0005\u001e\u0010\u0002\u0185\u0187\u0005R*\u0002\u0186\u0185',
	'\u0003\u0002\u0002\u0002\u0186\u0187\u0003\u0002\u0002\u0002\u0187\u018c',
	'\u0003\u0002\u0002\u0002\u0188\u0189\u0005R*\u0002\u0189\u018a\u0005',
	'\u001e\u0010\u0002\u018a\u018c\u0003\u0002\u0002\u0002\u018b\u017f\u0003',
	'\u0002\u0002\u0002\u018b\u0183\u0003\u0002\u0002\u0002\u018b\u0188\u0003',
	'\u0002\u0002\u0002\u018c\t\u0003\u0002\u0002\u0002\u018d\u018f\u0005',
	':\u001e\u0002\u018e\u018d\u0003\u0002\u0002\u0002\u018e\u018f\u0003',
	'\u0002\u0002\u0002\u018f\u019e\u0003\u0002\u0002\u0002\u0190\u0192\u0005',
	'\f\u0007\u0002\u0191\u0193\u0005B"\u0002\u0192\u0191\u0003\u0002\u0002',
	'\u0002\u0192\u0193\u0003\u0002\u0002\u0002\u0193\u0195\u0003\u0002\u0002',
	'\u0002\u0194\u0196\u0005\u0018\r\u0002\u0195\u0194\u0003\u0002\u0002',
	'\u0002\u0195\u0196\u0003\u0002\u0002\u0002\u0196\u019f\u0003\u0002\u0002',
	'\u0002\u0197\u0199\u0005\u000e\b\u0002\u0198\u019a\u0005B"\u0002\u0199',
	'\u0198\u0003\u0002\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a',
	'\u019c\u0003\u0002\u0002\u0002\u019b\u019d\u0005\u0018\r\u0002\u019c',
	'\u019b\u0003\u0002\u0002\u0002\u019c\u019d\u0003\u0002\u0002\u0002\u019d',
	'\u019f\u0003\u0002\u0002\u0002\u019e\u0190\u0003\u0002\u0002\u0002\u019e',
	'\u0197\u0003\u0002\u0002\u0002\u019f\u01a1\u0003\u0002\u0002\u0002\u01a0',
	'\u01a2\u0005 \u0011\u0002\u01a1\u01a0\u0003\u0002\u0002\u0002\u01a1',
	'\u01a2\u0003\u0002\u0002\u0002\u01a2\u000b\u0003\u0002\u0002\u0002\u01a3',
	'\u01ae\u0005\u0010\t\u0002\u01a4\u01a5\u0005\u000e\b\u0002\u01a5\u01a7',
	'\u0007B\u0002\u0002\u01a6\u01a8\u0005\u0088E\u0002\u01a7\u01a6\u0003',
	'\u0002\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8\u01ab\u0003',
	'\u0002\u0002\u0002\u01a9\u01ac\u0005\u0010\t\u0002\u01aa\u01ac\u0005',
	'\u000e\b\u0002\u01ab\u01a9\u0003\u0002\u0002\u0002\u01ab\u01aa\u0003',
	'\u0002\u0002\u0002\u01ac\u01ae\u0003\u0002\u0002\u0002\u01ad\u01a3\u0003',
	'\u0002\u0002\u0002\u01ad\u01a4\u0003\u0002\u0002\u0002\u01ae\u01b9\u0003',
	'\u0002\u0002\u0002\u01af\u01b1\u0007B\u0002\u0002\u01b0\u01b2\u0005',
	'\u0088E\u0002\u01b1\u01b0\u0003\u0002\u0002\u0002\u01b1\u01b2\u0003',
	'\u0002\u0002\u0002\u01b2\u01b5\u0003\u0002\u0002\u0002\u01b3\u01b6\u0005',
	'\u0010\t\u0002\u01b4\u01b6\u0005\u000e\b\u0002\u01b5\u01b3\u0003\u0002',
	'\u0002\u0002\u01b5\u01b4\u0003\u0002\u0002\u0002\u01b6\u01b8\u0003\u0002',
	'\u0002\u0002\u01b7\u01af\u0003\u0002\u0002\u0002\u01b8\u01bb\u0003\u0002',
	'\u0002\u0002\u01b9\u01b7\u0003\u0002\u0002\u0002\u01b9\u01ba\u0003\u0002',
	'\u0002\u0002\u01ba\r\u0003\u0002\u0002\u0002\u01bb\u01b9\u0003\u0002',
	'\u0002\u0002\u01bc\u01c2\u0007\u001d\u0002\u0002\u01bd\u01c3\u0005\u000e',
	'\b\u0002\u01be\u01c0\u0005\n\u0006\u0002\u01bf\u01c1\u0005R*\u0002\u01c0',
	'\u01bf\u0003\u0002\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c1',
	'\u01c3\u0003\u0002\u0002\u0002\u01c2\u01bd\u0003\u0002\u0002\u0002\u01c2',
	'\u01be\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4',
	'\u01c5\u0007\u001e\u0002\u0002\u01c5\u000f\u0003\u0002\u0002\u0002\u01c6',
	'\u01ca\u0005\u0012\n\u0002\u01c7\u01ca\u0005J&\u0002\u01c8\u01ca\u0005',
	"L'\u0002\u01c9\u01c6\u0003\u0002\u0002\u0002\u01c9\u01c7\u0003\u0002",
	'\u0002\u0002\u01c9\u01c8\u0003\u0002\u0002\u0002\u01ca\u0011\u0003\u0002',
	'\u0002\u0002\u01cb\u01cf\u0007C\u0002\u0002\u01cc\u01ce\u0005P)\u0002',
	'\u01cd\u01cc\u0003\u0002\u0002\u0002\u01ce\u01d1\u0003\u0002\u0002\u0002',
	'\u01cf\u01cd\u0003\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002',
	'\u01d0\u01d2\u0003\u0002\u0002\u0002\u01d1\u01cf\u0003\u0002\u0002\u0002',
	'\u01d2\u01d4\u0005Z.\u0002\u01d3\u01d5\u0005\u001e\u0010\u0002\u01d4',
	'\u01d3\u0003\u0002\u0002\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5',
	'\u01d7\u0003\u0002\u0002\u0002\u01d6\u01d8\u0005F$\u0002\u01d7\u01d6',
	'\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002\u0002\u01d8\u01da',
	'\u0003\u0002\u0002\u0002\u01d9\u01db\u0005`1\u0002\u01da\u01d9\u0003',
	'\u0002\u0002\u0002\u01da\u01db\u0003\u0002\u0002\u0002\u01db\u01df\u0003',
	'\u0002\u0002\u0002\u01dc\u01de\u0005\u00d8m\u0002\u01dd\u01dc\u0003',
	'\u0002\u0002\u0002\u01de\u01e1\u0003\u0002\u0002\u0002\u01df\u01dd\u0003',
	'\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e3\u0003',
	'\u0002\u0002\u0002\u01e1\u01df\u0003\u0002\u0002\u0002\u01e2\u01e4\u0005',
	'b2\u0002\u01e3\u01e2\u0003\u0002\u0002\u0002\u01e3\u01e4\u0003\u0002',
	'\u0002\u0002\u01e4\u01e6\u0003\u0002\u0002\u0002\u01e5\u01e7\u0005>',
	' \u0002\u01e6\u01e5\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002',
	'\u0002\u0002\u01e7\u01e9\u0003\u0002\u0002\u0002\u01e8\u01ea\u0005"',
	'\u0012\u0002\u01e9\u01e8\u0003\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002',
	'\u0002\u0002\u01ea\u01ec\u0003\u0002\u0002\u0002\u01eb\u01ed\u0005$',
	'\u0013\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002',
	'\u0002\u0002\u01ed\u0013\u0003\u0002\u0002\u0002\u01ee\u01f1\u0005\u0002',
	'\u0002\u0002\u01ef\u01f1\u0005\u000e\b\u0002\u01f0\u01ee\u0003\u0002',
	'\u0002\u0002\u01f0\u01ef\u0003\u0002\u0002\u0002\u01f1\u0015\u0003\u0002',
	'\u0002\u0002\u01f2\u0201\u0007D\u0002\u0002\u01f3\u01f4\u0007E\u0002',
	'\u0002\u01f4\u01f5\u0007\u0084\u0002\u0002\u01f5\u01f6\u0007\u001d\u0002',
	'\u0002\u01f6\u01f7\u0005\u0130\u0099\u0002\u01f7\u01f8\u0007\u001e\u0002',
	'\u0002\u01f8\u0201\u0003\u0002\u0002\u0002\u01f9\u0201\u0007E\u0002',
	'\u0002\u01fa\u0201\u0007F\u0002\u0002\u01fb\u0201\u0007G\u0002\u0002',
	'\u01fc\u0201\u0007H\u0002\u0002\u01fd\u0201\u0007I\u0002\u0002\u01fe',
	'\u0201\u0007J\u0002\u0002\u01ff\u0201\u0007K\u0002\u0002\u0200\u01f2',
	'\u0003\u0002\u0002\u0002\u0200\u01f3\u0003\u0002\u0002\u0002\u0200\u01f9',
	'\u0003\u0002\u0002\u0002\u0200\u01fa\u0003\u0002\u0002\u0002\u0200\u01fb',
	'\u0003\u0002\u0002\u0002\u0200\u01fc\u0003\u0002\u0002\u0002\u0200\u01fd',
	'\u0003\u0002\u0002\u0002\u0200\u01fe\u0003\u0002\u0002\u0002\u0200\u01ff',
	'\u0003\u0002\u0002\u0002\u0201\u0017\u0003\u0002\u0002\u0002\u0202\u0203',
	'\u0007L\u0002\u0002\u0203\u0204\u0005\u001a\u000e\u0002\u0204\u0019',
	'\u0003\u0002\u0002\u0002\u0205\u0208\u0005\u001c\u000f\u0002\u0206\u0207',
	'\t\u0002\u0002\u0002\u0207\u0209\u0005\u001c\u000f\u0002\u0208\u0206',
	'\u0003\u0002\u0002\u0002\u0208\u0209\u0003\u0002\u0002\u0002\u0209\u001b',
	'\u0003\u0002\u0002\u0002\u020a\u020d\u0005\u012a\u0096\u0002\u020b\u020d',
	'\t\u0003\u0002\u0002\u020c\u020a\u0003\u0002\u0002\u0002\u020c\u020b',
	'\u0003\u0002\u0002\u0002\u020d\u001d\u0003\u0002\u0002\u0002\u020e\u022a',
	'\u0007N\u0002\u0002\u020f\u0210\u0007O\u0002\u0002\u0210\u0212\u0005',
	'\u0142\u00a2\u0002\u0211\u0213\u0005\u0118\u008d\u0002\u0212\u0211\u0003',
	'\u0002\u0002\u0002\u0212\u0213\u0003\u0002\u0002\u0002\u0213\u0215\u0003',
	'\u0002\u0002\u0002\u0214\u0216\u0005\u011a\u008e\u0002\u0215\u0214\u0003',
	'\u0002\u0002\u0002\u0215\u0216\u0003\u0002\u0002\u0002\u0216\u0218\u0003',
	'\u0002\u0002\u0002\u0217\u0219\u0005\u011e\u0090\u0002\u0218\u0217\u0003',
	'\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u022b\u0003',
	'\u0002\u0002\u0002\u021a\u021b\u0007P\u0002\u0002\u021b\u022b\u0005',
	'\u0142\u00a2\u0002\u021c\u021f\u0005\u0154\u00ab\u0002\u021d\u021f\u0005',
	'\u00dco\u0002\u021e\u021c\u0003\u0002\u0002\u0002\u021e\u021d\u0003',
	'\u0002\u0002\u0002\u021f\u0227\u0003\u0002\u0002\u0002\u0220\u0223\u0007',
	'\u001a\u0002\u0002\u0221\u0224\u0005\u0154\u00ab\u0002\u0222\u0224\u0005',
	'\u00dco\u0002\u0223\u0221\u0003\u0002\u0002\u0002\u0223\u0222\u0003',
	'\u0002\u0002\u0002\u0224\u0226\u0003\u0002\u0002\u0002\u0225\u0220\u0003',
	'\u0002\u0002\u0002\u0226\u0229\u0003\u0002\u0002\u0002\u0227\u0225\u0003',
	'\u0002\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002\u0228\u022b\u0003',
	'\u0002\u0002\u0002\u0229\u0227\u0003\u0002\u0002\u0002\u022a\u020f\u0003',
	'\u0002\u0002\u0002\u022a\u021a\u0003\u0002\u0002\u0002\u022a\u021e\u0003',
	'\u0002\u0002\u0002\u022b\u001f\u0003\u0002\u0002\u0002\u022c\u022d\u0007',
	'Q\u0002\u0002\u022d\u022e\u0007R\u0002\u0002\u022e\u0234\u0007\u001d',
	'\u0002\u0002\u022f\u0232\u00070\u0002\u0002\u0230\u0231\u0007\u001a',
	'\u0002\u0002\u0231\u0233\u00070\u0002\u0002\u0232\u0230\u0003\u0002',
	'\u0002\u0002\u0232\u0233\u0003\u0002\u0002\u0002\u0233\u0235\u0003\u0002',
	'\u0002\u0002\u0234\u022f\u0003\u0002\u0002\u0002\u0234\u0235\u0003\u0002',
	'\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236\u0237\u0007\u001e',
	'\u0002\u0002\u0237!\u0003\u0002\u0002\u0002\u0238\u0239\u0007S\u0002',
	'\u0002\u0239\u023a\u0005\u009aN\u0002\u023a#\u0003\u0002\u0002\u0002',
	'\u023b\u023c\u0007T\u0002\u0002\u023c\u0241\u0005&\u0014\u0002\u023d',
	'\u023e\u0007\u001a\u0002\u0002\u023e\u0240\u0005&\u0014\u0002\u023f',
	'\u023d\u0003\u0002\u0002\u0002\u0240\u0243\u0003\u0002\u0002\u0002\u0241',
	'\u023f\u0003\u0002\u0002\u0002\u0241\u0242\u0003\u0002\u0002\u0002\u0242',
	'%\u0003\u0002\u0002\u0002\u0243\u0241\u0003\u0002\u0002\u0002\u0244',
	'\u0245\u0005\u012a\u0096\u0002\u0245\u0246\u0007U\u0002\u0002\u0246',
	"\u0247\u0005(\u0015\u0002\u0247'\u0003\u0002\u0002\u0002\u0248\u0249",
	'\u0007\u001d\u0002\u0002\u0249\u024a\u0005*\u0016\u0002\u024a\u024b',
	'\u0007\u001e\u0002\u0002\u024b)\u0003\u0002\u0002\u0002\u024c\u024e',
	'\u0005\u012a\u0096\u0002\u024d\u024c\u0003\u0002\u0002\u0002\u024d\u024e',
	'\u0003\u0002\u0002\u0002\u024e\u0252\u0003\u0002\u0002\u0002\u024f\u0250',
	'\u0007V\u0002\u0002\u0250\u0251\u0007W\u0002\u0002\u0251\u0253\u0005',
	'\u00f8}\u0002\u0252\u024f\u0003\u0002\u0002\u0002\u0252\u0253\u0003',
	'\u0002\u0002\u0002\u0253\u0255\u0003\u0002\u0002\u0002\u0254\u0256\u0005',
	'B"\u0002\u0255\u0254\u0003\u0002\u0002\u0002\u0255\u0256\u0003\u0002',
	'\u0002\u0002\u0256\u0258\u0003\u0002\u0002\u0002\u0257\u0259\u0005,',
	'\u0017\u0002\u0258\u0257\u0003\u0002\u0002\u0002\u0258\u0259\u0003\u0002',
	'\u0002\u0002\u0259+\u0003\u0002\u0002\u0002\u025a\u025b\u0005.\u0018',
	'\u0002\u025b\u025d\u00050\u0019\u0002\u025c\u025e\u00058\u001d\u0002',
	'\u025d\u025c\u0003\u0002\u0002\u0002\u025d\u025e\u0003\u0002\u0002\u0002',
	'\u025e-\u0003\u0002\u0002\u0002\u025f\u0260\t\u0004\u0002\u0002\u0260',
	'/\u0003\u0002\u0002\u0002\u0261\u0264\u00052\u001a\u0002\u0262\u0264',
	'\u00054\u001b\u0002\u0263\u0261\u0003\u0002\u0002\u0002\u0263\u0262',
	'\u0003\u0002\u0002\u0002\u02641\u0003\u0002\u0002\u0002\u0265\u0266',
	'\u0007[\u0002\u0002\u0266\u0274\u0007\\\u0002\u0002\u0267\u0268\u0005',
	'\u013a\u009e\u0002\u0268\u0269\u0007\\\u0002\u0002\u0269\u0274\u0003',
	'\u0002\u0002\u0002\u026a\u026b\u0007,\u0002\u0002\u026b\u0274\u0007',
	'\\\u0002\u0002\u026c\u026d\u0007]\u0002\u0002\u026d\u026e\u0005\u009a',
	'N\u0002\u026e\u026f\u0005\u00eex\u0002\u026f\u0270\u0007\\\u0002\u0002',
	'\u0270\u0274\u0003\u0002\u0002\u0002\u0271\u0272\u0007^\u0002\u0002',
	'\u0272\u0274\u0007_\u0002\u0002\u0273\u0265\u0003\u0002\u0002\u0002',
	'\u0273\u0267\u0003\u0002\u0002\u0002\u0273\u026a\u0003\u0002\u0002\u0002',
	'\u0273\u026c\u0003\u0002\u0002\u0002\u0273\u0271\u0003\u0002\u0002\u0002',
	'\u02743\u0003\u0002\u0002\u0002\u0275\u0276\u0007`\u0002\u0002\u0276',
	'\u0277\u00056\u001c\u0002\u0277\u0278\u0007a\u0002\u0002\u0278\u0279',
	'\u00056\u001c\u0002\u02795\u0003\u0002\u0002\u0002\u027a\u0288\u0005',
	'2\u001a\u0002\u027b\u027c\u0007[\u0002\u0002\u027c\u0288\u0007b\u0002',
	'\u0002\u027d\u027e\u0005\u013a\u009e\u0002\u027e\u027f\u0007b\u0002',
	'\u0002\u027f\u0288\u0003\u0002\u0002\u0002\u0280\u0281\u0007,\u0002',
	'\u0002\u0281\u0288\u0007b\u0002\u0002\u0282\u0283\u0007]\u0002\u0002',
	'\u0283\u0284\u0005\u009aN\u0002\u0284\u0285\u0005\u00eex\u0002\u0285',
	'\u0286\u0007b\u0002\u0002\u0286\u0288\u0003\u0002\u0002\u0002\u0287',
	'\u027a\u0003\u0002\u0002\u0002\u0287\u027b\u0003\u0002\u0002\u0002\u0287',
	'\u027d\u0003\u0002\u0002\u0002\u0287\u0280\u0003\u0002\u0002\u0002\u0287',
	'\u0282\u0003\u0002\u0002\u0002\u02887\u0003\u0002\u0002\u0002\u0289',
	'\u0290\u0007c\u0002\u0002\u028a\u028b\u0007^\u0002\u0002\u028b\u0291',
	'\u0007_\u0002\u0002\u028c\u0291\u0007d\u0002\u0002\u028d\u0291\u0007',
	'e\u0002\u0002\u028e\u028f\u0007f\u0002\u0002\u028f\u0291\u0007g\u0002',
	'\u0002\u0290\u028a\u0003\u0002\u0002\u0002\u0290\u028c\u0003\u0002\u0002',
	'\u0002\u0290\u028d\u0003\u0002\u0002\u0002\u0290\u028e\u0003\u0002\u0002',
	'\u0002\u02919\u0003\u0002\u0002\u0002\u0292\u0294\u0007h\u0002\u0002',
	'\u0293\u0295\u0007j\u0002\u0002\u0294\u0293\u0003\u0002\u0002\u0002',
	'\u0294\u0295\u0003\u0002\u0002\u0002\u0295\u0296\u0003\u0002\u0002\u0002',
	'\u0296\u029b\u0005<\u001f\u0002\u0297\u0298\u0007\u001a\u0002\u0002',
	'\u0298\u029a\u0005<\u001f\u0002\u0299\u0297\u0003\u0002\u0002\u0002',
	'\u029a\u029d\u0003\u0002\u0002\u0002\u029b\u0299\u0003\u0002\u0002\u0002',
	'\u029b\u029c\u0003\u0002\u0002\u0002\u029c;\u0003\u0002\u0002\u0002',
	'\u029d\u029b\u0003\u0002\u0002\u0002\u029e\u02a0\u0005\u012a\u0096\u0002',
	'\u029f\u02a1\u0005\u0124\u0093\u0002\u02a0\u029f\u0003\u0002\u0002\u0002',
	'\u02a0\u02a1\u0003\u0002\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002',
	'\u02a2\u02a3\u0007U\u0002\u0002\u02a3\u02a4\u0005\u0014\u000b\u0002',
	'\u02a4=\u0003\u0002\u0002\u0002\u02a5\u02a6\u0007d\u0002\u0002\u02a6',
	'\u02a7\u0007W\u0002\u0002\u02a7\u02a9\u0005\u00f8}\u0002\u02a8\u02aa',
	'\u0005@!\u0002\u02a9\u02a8\u0003\u0002\u0002\u0002\u02a9\u02aa\u0003',
	'\u0002\u0002\u0002\u02aa?\u0003\u0002\u0002\u0002\u02ab\u02ac\u0007',
	'h\u0002\u0002\u02ac\u02b0\u0007k\u0002\u0002\u02ad\u02ae\u0007h\u0002',
	'\u0002\u02ae\u02b0\u0007l\u0002\u0002\u02af\u02ab\u0003\u0002\u0002',
	'\u0002\u02af\u02ad\u0003\u0002\u0002\u0002\u02b0A\u0003\u0002\u0002',
	'\u0002\u02b1\u02b2\u0007m\u0002\u0002\u02b2\u02b3\u0007W\u0002\u0002',
	'\u02b3\u02b5\u0005\u00f8}\u0002\u02b4\u02b6\u0005\u00fa~\u0002\u02b5',
	'\u02b4\u0003\u0002\u0002\u0002\u02b5\u02b6\u0003\u0002\u0002\u0002\u02b6',
	'C\u0003\u0002\u0002\u0002\u02b7\u02b8\t\u0005\u0002\u0002\u02b8E\u0003',
	'\u0002\u0002\u0002\u02b9\u02bc\u0007p\u0002\u0002\u02ba\u02bd\u0007',
	'q\u0002\u0002\u02bb\u02bd\u0005H%\u0002\u02bc\u02ba\u0003\u0002\u0002',
	'\u0002\u02bc\u02bb\u0003\u0002\u0002\u0002\u02bdG\u0003\u0002\u0002',
	'\u0002\u02be\u02c3\u0005d3\u0002\u02bf\u02c0\u0007\u001a\u0002\u0002',
	'\u02c0\u02c2\u0005d3\u0002\u02c1\u02bf\u0003\u0002\u0002\u0002\u02c2',
	'\u02c5\u0003\u0002\u0002\u0002\u02c3\u02c1\u0003\u0002\u0002\u0002\u02c3',
	'\u02c4\u0003\u0002\u0002\u0002\u02c4I\u0003\u0002\u0002\u0002\u02c5',
	'\u02c3\u0003\u0002\u0002\u0002\u02c6\u02c7\u0007r\u0002\u0002\u02c7',
	'\u02cc\u0005N(\u0002\u02c8\u02c9\u0007\u001a\u0002\u0002\u02c9\u02cb',
	'\u0005N(\u0002\u02ca\u02c8\u0003\u0002\u0002\u0002\u02cb\u02ce\u0003',
	'\u0002\u0002\u0002\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cc\u02cd\u0003',
	'\u0002\u0002\u0002\u02cdK\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003',
	'\u0002\u0002\u0002\u02cf\u02d0\u0007s\u0002\u0002\u02d0\u02d1\u0005',
	'\u0130\u0099\u0002\u02d1M\u0003\u0002\u0002\u0002\u02d2\u02d3\u0007',
	'_\u0002\u0002\u02d3\u02d5\u0007\u001d\u0002\u0002\u02d4\u02d6\u0005',
	'\u0004\u0003\u0002\u02d5\u02d4\u0003\u0002\u0002\u0002\u02d5\u02d6\u0003',
	'\u0002\u0002\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002\u02d7\u02d8\u0007',
	'\u001e\u0002\u0002\u02d8O\u0003\u0002\u0002\u0002\u02d9\u02e0\u0005',
	'\u0016\f\u0002\u02da\u02e0\u0007t\u0002\u0002\u02db\u02e0\u0007u\u0002',
	'\u0002\u02dc\u02dd\u0007v\u0002\u0002\u02dd\u02de\u0007\u0003\u0002',
	'\u0002\u02de\u02e0\u0005\u0138\u009d\u0002\u02df\u02d9\u0003\u0002\u0002',
	'\u0002\u02df\u02da\u0003\u0002\u0002\u0002\u02df\u02db\u0003\u0002\u0002',
	'\u0002\u02df\u02dc\u0003\u0002\u0002\u0002\u02e0Q\u0003\u0002\u0002',
	'\u0002\u02e1\u02e3\u0005T+\u0002\u02e2\u02e1\u0003\u0002\u0002\u0002',
	'\u02e3\u02e4\u0003\u0002\u0002\u0002\u02e4\u02e2\u0003\u0002\u0002\u0002',
	'\u02e4\u02e5\u0003\u0002\u0002\u0002\u02e5S\u0003\u0002\u0002\u0002',
	'\u02e6\u02e7\u0007w\u0002\u0002\u02e7\u02ea\u0005V,\u0002\u02e8\u02e9',
	'\u0007x\u0002\u0002\u02e9\u02eb\u0005\u0126\u0094\u0002\u02ea\u02e8',
	'\u0003\u0002\u0002\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002\u02eb\u02ed',
	'\u0003\u0002\u0002\u0002\u02ec\u02ee\u0005X-\u0002\u02ed\u02ec\u0003',
	'\u0002\u0002\u0002\u02ed\u02ee\u0003\u0002\u0002\u0002\u02ee\u02f4\u0003',
	'\u0002\u0002\u0002\u02ef\u02f0\u0007y\u0002\u0002\u02f0\u02f1\u0007',
	'z\u0002\u0002\u02f1\u02f2\u0007{\u0002\u0002\u02f2\u02f4\u0007|\u0002',
	'\u0002\u02f3\u02e6\u0003\u0002\u0002\u0002\u02f3\u02ef\u0003\u0002\u0002',
	'\u0002\u02f4U\u0003\u0002\u0002\u0002\u02f5\u02f6\t\u0006\u0002\u0002',
	'\u02f6W\u0003\u0002\u0002\u0002\u02f7\u02f8\u0007~\u0002\u0002\u02f8',
	'\u02fb\u0007\u007f\u0002\u0002\u02f9\u02fb\u0007\u0080\u0002\u0002\u02fa',
	'\u02f7\u0003\u0002\u0002\u0002\u02fa\u02f9\u0003\u0002\u0002\u0002\u02fb',
	'Y\u0003\u0002\u0002\u0002\u02fc\u02ff\u0005\\/\u0002\u02fd\u02ff\u0007',
	'\r\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe\u02fd\u0003',
	'\u0002\u0002\u0002\u02ff\u0304\u0003\u0002\u0002\u0002\u0300\u0301\u0007',
	'\u001a\u0002\u0002\u0301\u0303\u0005\\/\u0002\u0302\u0300\u0003\u0002',
	'\u0002\u0002\u0303\u0306\u0003\u0002\u0002\u0002\u0304\u0302\u0003\u0002',
	'\u0002\u0002\u0304\u0305\u0003\u0002\u0002\u0002\u0305[\u0003\u0002',
	'\u0002\u0002\u0306\u0304\u0003\u0002\u0002\u0002\u0307\u030a\u0005\u0130',
	'\u0099\u0002\u0308\u030a\u0005\u0132\u009a\u0002\u0309\u0307\u0003\u0002',
	'\u0002\u0002\u0309\u0308\u0003\u0002\u0002\u0002\u030a\u030c\u0003\u0002',
	'\u0002\u0002\u030b\u030d\u0005^0\u0002\u030c\u030b\u0003\u0002\u0002',
	'\u0002\u030c\u030d\u0003\u0002\u0002\u0002\u030d\u0313\u0003\u0002\u0002',
	'\u0002\u030e\u0310\u0005\u009aN\u0002\u030f\u0311\u0005^0\u0002\u0310',
	'\u030f\u0003\u0002\u0002\u0002\u0310\u0311\u0003\u0002\u0002\u0002\u0311',
	'\u0313\u0003\u0002\u0002\u0002\u0312\u0309\u0003\u0002\u0002\u0002\u0312',
	'\u030e\u0003\u0002\u0002\u0002\u0313]\u0003\u0002\u0002\u0002\u0314',
	'\u0316\u0007U\u0002\u0002\u0315\u0314\u0003\u0002\u0002\u0002\u0315',
	'\u0316\u0003\u0002\u0002\u0002\u0316\u0319\u0003\u0002\u0002\u0002\u0317',
	'\u031a\u0005\u012a\u0096\u0002\u0318\u031a\u0005\u0142\u00a2\u0002\u0319',
	'\u0317\u0003\u0002\u0002\u0002\u0319\u0318\u0003\u0002\u0002\u0002\u031a',
	'_\u0003\u0002\u0002\u0002\u031b\u031c\u0007\u0081\u0002\u0002\u031c',
	'\u031d\u0005\u009aN\u0002\u031da\u0003\u0002\u0002\u0002\u031e\u031f',
	'\u0007\u0082\u0002\u0002\u031f\u0320\u0005\u009aN\u0002\u0320c\u0003',
	'\u0002\u0002\u0002\u0321\u032b\u0005p9\u0002\u0322\u0325\u0007\u001f',
	'\u0002\u0002\u0323\u0326\u0005\u012a\u0096\u0002\u0324\u0326\u0007\u0083',
	'\u0002\u0002\u0325\u0323\u0003\u0002\u0002\u0002\u0325\u0324\u0003\u0002',
	'\u0002\u0002\u0326\u0327\u0003\u0002\u0002\u0002\u0327\u0328\u0005f',
	'4\u0002\u0328\u0329\u0007 \u0002\u0002\u0329\u032b\u0003\u0002\u0002',
	'\u0002\u032a\u0321\u0003\u0002\u0002\u0002\u032a\u0322\u0003\u0002\u0002',
	'\u0002\u032b\u032f\u0003\u0002\u0002\u0002\u032c\u032e\u0005h5\u0002',
	'\u032d\u032c\u0003\u0002\u0002\u0002\u032e\u0331\u0003\u0002\u0002\u0002',
	'\u032f\u032d\u0003\u0002\u0002\u0002\u032f\u0330\u0003\u0002\u0002\u0002',
	'\u0330e\u0003\u0002\u0002\u0002\u0331\u032f\u0003\u0002\u0002\u0002',
	'\u0332\u0336\u0005p9\u0002\u0333\u0335\u0005h5\u0002\u0334\u0333\u0003',
	'\u0002\u0002\u0002\u0335\u0338\u0003\u0002\u0002\u0002\u0336\u0334\u0003',
	'\u0002\u0002\u0002\u0336\u0337\u0003\u0002\u0002\u0002\u0337g\u0003',
	'\u0002\u0002\u0002\u0338\u0336\u0003\u0002\u0002\u0002\u0339\u033a\u0005',
	'l7\u0002\u033a\u033f\u0005d3\u0002\u033b\u033c\u0007\u0084\u0002\u0002',
	'\u033c\u0340\u0005\u009aN\u0002\u033d\u033e\u0007\u0085\u0002\u0002',
	'\u033e\u0340\u0005\u012e\u0098\u0002\u033f\u033b\u0003\u0002\u0002\u0002',
	'\u033f\u033d\u0003\u0002\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002',
	'\u0340\u034d\u0003\u0002\u0002\u0002\u0341\u0342\u0005n8\u0002\u0342',
	'\u0347\u0005d3\u0002\u0343\u0344\u0007\u0084\u0002\u0002\u0344\u0348',
	'\u0005\u009aN\u0002\u0345\u0346\u0007\u0085\u0002\u0002\u0346\u0348',
	'\u0005\u012e\u0098\u0002\u0347\u0343\u0003\u0002\u0002\u0002\u0347\u0345',
	'\u0003\u0002\u0002\u0002\u0348\u034d\u0003\u0002\u0002\u0002\u0349\u034a',
	'\u0005j6\u0002\u034a\u034b\u0005p9\u0002\u034b\u034d\u0003\u0002\u0002',
	'\u0002\u034c\u0339\u0003\u0002\u0002\u0002\u034c\u0341\u0003\u0002\u0002',
	'\u0002\u034c\u0349\u0003\u0002\u0002\u0002\u034di\u0003\u0002\u0002',
	'\u0002\u034e\u0350\u0007\u0086\u0002\u0002\u034f\u0351\u0007\u0087\u0002',
	'\u0002\u0350\u034f\u0003\u0002\u0002\u0002\u0350\u0351\u0003\u0002\u0002',
	'\u0002\u0351\u0352\u0003\u0002\u0002\u0002\u0352\u035a\u0007\u0088\u0002',
	'\u0002\u0353\u0354\u0007\u0086\u0002\u0002\u0354\u0356\t\u0007\u0002',
	'\u0002\u0355\u0357\u0007\u008b\u0002\u0002\u0356\u0355\u0003\u0002\u0002',
	'\u0002\u0356\u0357\u0003\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002',
	'\u0002\u0358\u035a\u0007\u0088\u0002\u0002\u0359\u034e\u0003\u0002\u0002',
	'\u0002\u0359\u0353\u0003\u0002\u0002\u0002\u035ak\u0003\u0002\u0002',
	'\u0002\u035b\u035d\t\b\u0002\u0002\u035c\u035b\u0003\u0002\u0002\u0002',
	'\u035c\u035d\u0003\u0002\u0002\u0002\u035d\u035e\u0003\u0002\u0002\u0002',
	'\u035e\u0361\u0007\u0088\u0002\u0002\u035f\u0361\u0007F\u0002\u0002',
	'\u0360\u035c\u0003\u0002\u0002\u0002\u0360\u035f\u0003\u0002\u0002\u0002',
	'\u0361m\u0003\u0002\u0002\u0002\u0362\u0364\t\u0007\u0002\u0002\u0363',
	'\u0365\u0007\u008b\u0002\u0002\u0364\u0363\u0003\u0002\u0002\u0002\u0364',
	'\u0365\u0003\u0002\u0002\u0002\u0365\u0366\u0003\u0002\u0002\u0002\u0366',
	'\u0367\u0007\u0088\u0002\u0002\u0367o\u0003\u0002\u0002\u0002\u0368',
	'\u036e\u0005r:\u0002\u0369\u036e\u0005t;\u0002\u036a\u036e\u0005v<\u0002',
	'\u036b\u036e\u0005x=\u0002\u036c\u036e\u0005z>\u0002\u036d\u0368\u0003',
	'\u0002\u0002\u0002\u036d\u0369\u0003\u0002\u0002\u0002\u036d\u036a\u0003',
	'\u0002\u0002\u0002\u036d\u036b\u0003\u0002\u0002\u0002\u036d\u036c\u0003',
	'\u0002\u0002\u0002\u036eq\u0003\u0002\u0002\u0002\u036f\u0371\u0005',
	'\u0130\u0099\u0002\u0370\u0372\u0005\u0122\u0092\u0002\u0371\u0370\u0003',
	'\u0002\u0002\u0002\u0371\u0372\u0003\u0002\u0002\u0002\u0372\u0374\u0003',
	'\u0002\u0002\u0002\u0373\u0375\u0005\u008aF\u0002\u0374\u0373\u0003',
	'\u0002\u0002\u0002\u0374\u0375\u0003\u0002\u0002\u0002\u0375\u0377\u0003',
	'\u0002\u0002\u0002\u0376\u0378\u0005\u008cG\u0002\u0377\u0376\u0003',
	'\u0002\u0002\u0002\u0377\u0378\u0003\u0002\u0002\u0002\u0378s\u0003',
	'\u0002\u0002\u0002\u0379\u037c\u0007\u001d\u0002\u0002\u037a\u037d\u0005',
	'r:\u0002\u037b\u037d\u0005t;\u0002\u037c\u037a\u0003\u0002\u0002\u0002',
	'\u037c\u037b\u0003\u0002\u0002\u0002\u037d\u037e\u0003\u0002\u0002\u0002',
	'\u037e\u037f\u0007\u001e\u0002\u0002\u037fu\u0003\u0002\u0002\u0002',
	'\u0380\u0382\u0005\u0014\u000b\u0002\u0381\u0383\u0005\u008aF\u0002',
	'\u0382\u0381\u0003\u0002\u0002\u0002\u0382\u0383\u0003\u0002\u0002\u0002',
	'\u0383\u0385\u0003\u0002\u0002\u0002\u0384\u0386\u0005\u0124\u0093\u0002',
	'\u0385\u0384\u0003\u0002\u0002\u0002\u0385\u0386\u0003\u0002\u0002\u0002',
	'\u0386\u0390\u0003\u0002\u0002\u0002\u0387\u0388\u0007\u008d\u0002\u0002',
	'\u0388\u038a\u0005\u0014\u000b\u0002\u0389\u038b\u0005\u008aF\u0002',
	'\u038a\u0389\u0003\u0002\u0002\u0002\u038a\u038b\u0003\u0002\u0002\u0002',
	'\u038b\u038d\u0003\u0002\u0002\u0002\u038c\u038e\u0005\u0124\u0093\u0002',
	'\u038d\u038c\u0003\u0002\u0002\u0002\u038d\u038e\u0003\u0002\u0002\u0002',
	'\u038e\u0390\u0003\u0002\u0002\u0002\u038f\u0380\u0003\u0002\u0002\u0002',
	'\u038f\u0387\u0003\u0002\u0002\u0002\u0390w\u0003\u0002\u0002\u0002',
	'\u0391\u0394\u0007\u001d\u0002\u0002\u0392\u0395\u0005H%\u0002\u0393',
	'\u0395\u0005x=\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0394\u0393',
	'\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002\u0002\u0396\u0397',
	'\u0007\u001e\u0002\u0002\u0397y\u0003\u0002\u0002\u0002\u0398\u0399',
	'\u0007\u008e\u0002\u0002\u0399\u039a\u0007\u001d\u0002\u0002\u039a\u039b',
	'\u0005\u009aN\u0002\u039b\u039c\u0007\u001a\u0002\u0002\u039c\u039d',
	'\u0005\u0142\u00a2\u0002\u039d\u039e\u0005|?\u0002\u039e\u03a0\u0007',
	'\u001e\u0002\u0002\u039f\u03a1\u0005\u008aF\u0002\u03a0\u039f\u0003',
	'\u0002\u0002\u0002\u03a0\u03a1\u0003\u0002\u0002\u0002\u03a1{\u0003',
	'\u0002\u0002\u0002\u03a2\u03a3\u0007\u008f\u0002\u0002\u03a3\u03a4\u0007',
	'\u001d\u0002\u0002\u03a4\u03a9\u0005~@\u0002\u03a5\u03a6\u0007\u001a',
	'\u0002\u0002\u03a6\u03a8\u0005~@\u0002\u03a7\u03a5\u0003\u0002\u0002',
	'\u0002\u03a8\u03ab\u0003\u0002\u0002\u0002\u03a9\u03a7\u0003\u0002\u0002',
	'\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aa\u03ac\u0003\u0002\u0002',
	'\u0002\u03ab\u03a9\u0003\u0002\u0002\u0002\u03ac\u03ad\u0007\u001e\u0002',
	'\u0002\u03ad}\u0003\u0002\u0002\u0002\u03ae\u03af\u0005\u012a\u0096',
	'\u0002\u03af\u03b0\u0007w\u0002\u0002\u03b0\u03b1\u0007\u0090\u0002',
	'\u0002\u03b1\u03c5\u0003\u0002\u0002\u0002\u03b2\u03b3\u0005\u012a\u0096',
	'\u0002\u03b3\u03b5\u0005\u0100\u0081\u0002\u03b4\u03b6\u0005\u0116\u008c',
	'\u0002\u03b5\u03b4\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003\u0002\u0002',
	'\u0002\u03b6\u03b8\u0003\u0002\u0002\u0002\u03b7\u03b9\u0007\u0091\u0002',
	'\u0002\u03b8\u03b7\u0003\u0002\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002',
	'\u0002\u03b9\u03ba\u0003\u0002\u0002\u0002\u03ba\u03bb\u0007\u0092\u0002',
	'\u0002\u03bb\u03bd\u0005\u0142\u00a2\u0002\u03bc\u03be\u0005\u0080A',
	'\u0002\u03bd\u03bc\u0003\u0002\u0002\u0002\u03bd\u03be\u0003\u0002\u0002',
	'\u0002\u03be\u03c5\u0003\u0002\u0002\u0002\u03bf\u03c0\u0007\u0093\u0002',
	'\u0002\u03c0\u03c1\u0007\u0092\u0002\u0002\u03c1\u03c2\u0005\u0142\u00a2',
	'\u0002\u03c2\u03c3\u0005|?\u0002\u03c3\u03c5\u0003\u0002\u0002\u0002',
	'\u03c4\u03ae\u0003\u0002\u0002\u0002\u03c4\u03b2\u0003\u0002\u0002\u0002',
	'\u03c4\u03bf\u0003\u0002\u0002\u0002\u03c5\u007f\u0003\u0002\u0002\u0002',
	'\u03c6\u03c8\u0005\u0082B\u0002\u03c7\u03c9\u0005\u0084C\u0002\u03c8',
	'\u03c7\u0003\u0002\u0002\u0002\u03c8\u03c9\u0003\u0002\u0002\u0002\u03c9',
	'\u03cf\u0003\u0002\u0002\u0002\u03ca\u03cc\u0005\u0084C\u0002\u03cb',
	'\u03cd\u0005\u0082B\u0002\u03cc\u03cb\u0003\u0002\u0002\u0002\u03cc',
	'\u03cd\u0003\u0002\u0002\u0002\u03cd\u03cf\u0003\u0002\u0002\u0002\u03ce',
	'\u03c6\u0003\u0002\u0002\u0002\u03ce\u03ca\u0003\u0002\u0002\u0002\u03cf',
	'\u0081\u0003\u0002\u0002\u0002\u03d0\u03d1\u0005\u0086D\u0002\u03d1',
	'\u03d2\u0007\u0084\u0002\u0002\u03d2\u03d3\u0007\u0094\u0002\u0002\u03d3',
	'\u0083\u0003\u0002\u0002\u0002\u03d4\u03d5\u0005\u0086D\u0002\u03d5',
	'\u03d6\u0007\u0084\u0002\u0002\u03d6\u03d7\u0007\u0095\u0002\u0002\u03d7',
	'\u0085\u0003\u0002\u0002\u0002\u03d8\u03dd\u0007\u0095\u0002\u0002\u03d9',
	'\u03dd\u0007\u0096\u0002\u0002\u03da\u03db\u0007A\u0002\u0002\u03db',
	'\u03dd\u0005\u0142\u00a2\u0002\u03dc\u03d8\u0003\u0002\u0002\u0002\u03dc',
	'\u03d9\u0003\u0002\u0002\u0002\u03dc\u03da\u0003\u0002\u0002\u0002\u03dd',
	'\u0087\u0003\u0002\u0002\u0002\u03de\u03df\t\t\u0002\u0002\u03df\u0089',
	'\u0003\u0002\u0002\u0002\u03e0\u03e2\t\n\u0002\u0002\u03e1\u03e0\u0003',
	'\u0002\u0002\u0002\u03e1\u03e2\u0003\u0002\u0002\u0002\u03e2\u03e3\u0003',
	'\u0002\u0002\u0002\u03e3\u03e4\u0005\u012a\u0096\u0002\u03e4\u008b\u0003',
	'\u0002\u0002\u0002\u03e5\u03ea\u0005\u008eH\u0002\u03e6\u03e7\u0007',
	'\u001a\u0002\u0002\u03e7\u03e9\u0005\u008eH\u0002\u03e8\u03e6\u0003',
	'\u0002\u0002\u0002\u03e9\u03ec\u0003\u0002\u0002\u0002\u03ea\u03e8\u0003',
	'\u0002\u0002\u0002\u03ea\u03eb\u0003\u0002\u0002\u0002\u03eb\u008d\u0003',
	'\u0002\u0002\u0002\u03ec\u03ea\u0003\u0002\u0002\u0002\u03ed\u03ee\u0005',
	'\u0090I\u0002\u03ee\u03f0\u0005\u0092J\u0002\u03ef\u03f1\u0005\u0094',
	'K\u0002\u03f0\u03ef\u0003\u0002\u0002\u0002\u03f0\u03f1\u0003\u0002',
	'\u0002\u0002\u03f1\u03f2\u0003\u0002\u0002\u0002\u03f2\u03f3\u0007\u001d',
	'\u0002\u0002\u03f3\u03f4\u0005\u0096L\u0002\u03f4\u03f5\u0007\u001e',
	'\u0002\u0002\u03f5\u0402\u0003\u0002\u0002\u0002\u03f6\u03f7\u0007\u0097',
	'\u0002\u0002\u03f7\u03f9\u0005\u0092J\u0002\u03f8\u03fa\u0005\u0094',
	'K\u0002\u03f9\u03f8\u0003\u0002\u0002\u0002\u03f9\u03fa\u0003\u0002',
	'\u0002\u0002\u03fa\u03fb\u0003\u0002\u0002\u0002\u03fb\u03fd\u0007\u001d',
	'\u0002\u0002\u03fc\u03fe\u0005\u0096L\u0002\u03fd\u03fc\u0003\u0002',
	'\u0002\u0002\u03fd\u03fe\u0003\u0002\u0002\u0002\u03fe\u03ff\u0003\u0002',
	'\u0002\u0002\u03ff\u0400\u0007\u001e\u0002\u0002\u0400\u0402\u0003\u0002',
	'\u0002\u0002\u0401\u03ed\u0003\u0002\u0002\u0002\u0401\u03f6\u0003\u0002',
	'\u0002\u0002\u0402\u008f\u0003\u0002\u0002\u0002\u0403\u0404\t\u000b',
	'\u0002\u0002\u0404\u0091\u0003\u0002\u0002\u0002\u0405\u0406\t\f\u0002',
	'\u0002\u0406\u0093\u0003\u0002\u0002\u0002\u0407\u040d\u0007w\u0002',
	'\u0002\u0408\u040e\u0007\u0088\u0002\u0002\u0409\u040a\u0007m\u0002',
	'\u0002\u040a\u040e\u0007W\u0002\u0002\u040b\u040c\u0007d\u0002\u0002',
	'\u040c\u040e\u0007W\u0002\u0002\u040d\u0408\u0003\u0002\u0002\u0002',
	'\u040d\u0409\u0003\u0002\u0002\u0002\u040d\u040b\u0003\u0002\u0002\u0002',
	'\u040e\u0095\u0003\u0002\u0002\u0002\u040f\u0414\u0005\u0098M\u0002',
	'\u0410\u0411\u0007\u001a\u0002\u0002\u0411\u0413\u0005\u0098M\u0002',
	'\u0412\u0410\u0003\u0002\u0002\u0002\u0413\u0416\u0003\u0002\u0002\u0002',
	'\u0414\u0412\u0003\u0002\u0002\u0002\u0414\u0415\u0003\u0002\u0002\u0002',
	'\u0415\u0097\u0003\u0002\u0002\u0002\u0416\u0414\u0003\u0002\u0002\u0002',
	'\u0417\u041a\u0005\u012a\u0096\u0002\u0418\u041a\u0007\u009c\u0002\u0002',
	'\u0419\u0417\u0003\u0002\u0002\u0002\u0419\u0418\u0003\u0002\u0002\u0002',
	'\u041a\u0099\u0003\u0002\u0002\u0002\u041b\u041c\bN\u0001\u0002\u041c',
	'\u0422\u0005\u009cO\u0002\u041d\u041f\u0007\u009d\u0002\u0002\u041e',
	'\u0420\u0005\u00eav\u0002\u041f\u041e\u0003\u0002\u0002\u0002\u041f',
	'\u0420\u0003\u0002\u0002\u0002\u0420\u0421\u0003\u0002\u0002\u0002\u0421',
	'\u0423\t\r\u0002\u0002\u0422\u041d\u0003\u0002\u0002\u0002\u0422\u0423',
	'\u0003\u0002\u0002\u0002\u0423\u0427\u0003\u0002\u0002\u0002\u0424\u0425',
	'\u0007\u00a1\u0002\u0002\u0425\u0427\u0005\u009aN\u0006\u0426\u041b',
	'\u0003\u0002\u0002\u0002\u0426\u0424\u0003\u0002\u0002\u0002\u0427\u0433',
	'\u0003\u0002\u0002\u0002\u0428\u0429\f\u0005\u0002\u0002\u0429\u042a',
	'\t\u000e\u0002\u0002\u042a\u0432\u0005\u009aN\u0006\u042b\u042c\f\u0004',
	'\u0002\u0002\u042c\u042d\u0007\u00a2\u0002\u0002\u042d\u0432\u0005\u009a',
	'N\u0005\u042e\u042f\f\u0003\u0002\u0002\u042f\u0430\t\u000f\u0002\u0002',
	'\u0430\u0432\u0005\u009aN\u0004\u0431\u0428\u0003\u0002\u0002\u0002',
	'\u0431\u042b\u0003\u0002\u0002\u0002\u0431\u042e\u0003\u0002\u0002\u0002',
	'\u0432\u0435\u0003\u0002\u0002\u0002\u0433\u0431\u0003\u0002\u0002\u0002',
	'\u0433\u0434\u0003\u0002\u0002\u0002\u0434\u009b\u0003\u0002\u0002\u0002',
	'\u0435\u0433\u0003\u0002\u0002\u0002\u0436\u0437\bO\u0001\u0002\u0437',
	'\u0438\u0005\u00a0Q\u0002\u0438\u044a\u0003\u0002\u0002\u0002\u0439',
	'\u043a\f\u0005\u0002\u0002\u043a\u043c\u0007\u009d\u0002\u0002\u043b',
	'\u043d\u0005\u00eav\u0002\u043c\u043b\u0003\u0002\u0002\u0002\u043c',
	'\u043d\u0003\u0002\u0002\u0002\u043d\u043e\u0003\u0002\u0002\u0002\u043e',
	'\u0449\u0007\u0096\u0002\u0002\u043f\u0440\f\u0004\u0002\u0002\u0440',
	'\u0441\u0005\u009eP\u0002\u0441\u0442\u0005\u00a0Q\u0002\u0442\u0449',
	'\u0003\u0002\u0002\u0002\u0443\u0444\f\u0003\u0002\u0002\u0444\u0445',
	'\u0005\u009eP\u0002\u0445\u0446\t\u0010\u0002\u0002\u0446\u0447\u0005',
	'\u0014\u000b\u0002\u0447\u0449\u0003\u0002\u0002\u0002\u0448\u0439\u0003',
	'\u0002\u0002\u0002\u0448\u043f\u0003\u0002\u0002\u0002\u0448\u0443\u0003',
	'\u0002\u0002\u0002\u0449\u044c\u0003\u0002\u0002\u0002\u044a\u0448\u0003',
	'\u0002\u0002\u0002\u044a\u044b\u0003\u0002\u0002\u0002\u044b\u009d\u0003',
	'\u0002\u0002\u0002\u044c\u044a\u0003\u0002\u0002\u0002\u044d\u044e\t',
	'\u0011\u0002\u0002\u044e\u009f\u0003\u0002\u0002\u0002\u044f\u045d\u0005',
	'\u00a4S\u0002\u0450\u0452\u0005\u00eav\u0002\u0451\u0450\u0003\u0002',
	'\u0002\u0002\u0451\u0452\u0003\u0002\u0002\u0002\u0452\u0453\u0003\u0002',
	'\u0002\u0002\u0453\u045e\u0005\u00a2R\u0002\u0454\u0456\u0007\u00a5',
	'\u0002\u0002\u0455\u0457\u0007x\u0002\u0002\u0456\u0455\u0003\u0002',
	'\u0002\u0002\u0456\u0457\u0003\u0002\u0002\u0002\u0457\u0458\u0003\u0002',
	'\u0002\u0002\u0458\u045e\u0005\u00f6|\u0002\u0459\u045a\u0007\u00a6',
	'\u0002\u0002\u045a\u045b\u0007\u00a7\u0002\u0002\u045b\u045e\u0005\u00a4',
	'S\u0002\u045c\u045e\u0005\u00b4[\u0002\u045d\u0451\u0003\u0002\u0002',
	'\u0002\u045d\u0454\u0003\u0002\u0002\u0002\u045d\u0459\u0003\u0002\u0002',
	'\u0002\u045d\u045c\u0003\u0002\u0002\u0002\u045d\u045e\u0003\u0002\u0002',
	'\u0002\u045e\u00a1\u0003\u0002\u0002\u0002\u045f\u0465\u0007z\u0002',
	'\u0002\u0460\u0466\u0005\u0014\u000b\u0002\u0461\u0462\u0007\u001d\u0002',
	'\u0002\u0462\u0463\u0005\u00e6t\u0002\u0463\u0464\u0007\u001e\u0002',
	'\u0002\u0464\u0466\u0003\u0002\u0002\u0002\u0465\u0460\u0003\u0002\u0002',
	'\u0002\u0465\u0461\u0003\u0002\u0002\u0002\u0466\u0475\u0003\u0002\u0002',
	'\u0002\u0467\u0468\u0007`\u0002\u0002\u0468\u0469\u0005\u00a4S\u0002',
	'\u0469\u046a\u0007a\u0002\u0002\u046a\u046b\u0005\u00a0Q\u0002\u046b',
	'\u0475\u0003\u0002\u0002\u0002\u046c\u046d\u0007\u00a7\u0002\u0002\u046d',
	'\u0470\u0005\u00a6T\u0002\u046e\u046f\u0007\u00a8\u0002\u0002\u046f',
	'\u0471\u0005\u00a6T\u0002\u0470\u046e\u0003\u0002\u0002\u0002\u0470',
	'\u0471\u0003\u0002\u0002\u0002\u0471\u0475\u0003\u0002\u0002\u0002\u0472',
	'\u0473\u0007\u00a9\u0002\u0002\u0473\u0475\u0005\u00a4S\u0002\u0474',
	'\u045f\u0003\u0002\u0002\u0002\u0474\u0467\u0003\u0002\u0002\u0002\u0474',
	'\u046c\u0003\u0002\u0002\u0002\u0474\u0472\u0003\u0002\u0002\u0002\u0475',
	'\u00a3\u0003\u0002\u0002\u0002\u0476\u0477\bS\u0001\u0002\u0477\u0478',
	'\u0005\u00a6T\u0002\u0478\u0493\u0003\u0002\u0002\u0002\u0479\u047a',
	'\f\t\u0002\u0002\u047a\u047b\u0007\u0016\u0002\u0002\u047b\u0492\u0005',
	'\u00a4S\n\u047c\u047d\f\b\u0002\u0002\u047d\u047e\t\u0012\u0002\u0002',
	'\u047e\u0492\u0005\u00a4S\t\u047f\u0480\f\u0006\u0002\u0002\u0480\u0481',
	'\t\u0013\u0002\u0002\u0481\u0492\u0005\u00a4S\u0007\u0482\u0483\f\u0005',
	'\u0002\u0002\u0483\u0484\u0007\u0015\u0002\u0002\u0484\u0492\u0005\u00a4',
	'S\u0006\u0485\u0486\f\u0004\u0002\u0002\u0486\u0487\u0007\u0018\u0002',
	'\u0002\u0487\u0492\u0005\u00a4S\u0005\u0488\u0489\f\u0007\u0002\u0002',
	'\u0489\u048a\t\u0014\u0002\u0002\u048a\u048f\u0007]\u0002\u0002\u048b',
	'\u048c\u0005\u009aN\u0002\u048c\u048d\u0005\u00eex\u0002\u048d\u0490',
	'\u0003\u0002\u0002\u0002\u048e\u0490\u0007\u0163\u0002\u0002\u048f\u048b',
	'\u0003\u0002\u0002\u0002\u048f\u048e\u0003\u0002\u0002\u0002\u0490\u0492',
	'\u0003\u0002\u0002\u0002\u0491\u0479\u0003\u0002\u0002\u0002\u0491\u047c',
	'\u0003\u0002\u0002\u0002\u0491\u047f\u0003\u0002\u0002\u0002\u0491\u0482',
	'\u0003\u0002\u0002\u0002\u0491\u0485\u0003\u0002\u0002\u0002\u0491\u0488',
	'\u0003\u0002\u0002\u0002\u0492\u0495\u0003\u0002\u0002\u0002\u0493\u0491',
	'\u0003\u0002\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u00a5',
	'\u0003\u0002\u0002\u0002\u0495\u0493\u0003\u0002\u0002\u0002\u0496\u0497',
	'\bT\u0001\u0002\u0497\u049b\u0005\u00dan\u0002\u0498\u0499\u0005\u0158',
	'\u00ad\u0002\u0499\u049a\u0005\u009aN\u0002\u049a\u049c\u0003\u0002',
	'\u0002\u0002\u049b\u0498\u0003\u0002\u0002\u0002\u049b\u049c\u0003\u0002',
	'\u0002\u0002\u049c\u0503\u0003\u0002\u0002\u0002\u049d\u049f\u0005\u0130',
	'\u0099\u0002\u049e\u04a0\u0005\u00a8U\u0002\u049f\u049e\u0003\u0002',
	'\u0002\u0002\u049f\u04a0\u0003\u0002\u0002\u0002\u04a0\u0503\u0003\u0002',
	'\u0002\u0002\u04a1\u0503\u0005\u00c0a\u0002\u04a2\u0503\u0005\u00d2',
	'j\u0002\u04a3\u0503\u0005\u013e\u00a0\u0002\u04a4\u0503\u0007,\u0002',
	'\u0002\u04a5\u0503\u0005\u00aaV\u0002\u04a6\u0503\u0005\u00acW\u0002',
	'\u04a7\u0503\u0005\u00aeX\u0002\u04a8\u04a9\t\u0015\u0002\u0002\u04a9',
	'\u0503\u0005\u00a6T\u0012\u04aa\u04ab\u0005\u00ecw\u0002\u04ab\u04ac',
	'\u0005\u00a6T\u0011\u04ac\u0503\u0003\u0002\u0002\u0002\u04ad\u04af',
	'\u0007_\u0002\u0002\u04ae\u04ad\u0003\u0002\u0002\u0002\u04ae\u04af',
	'\u0003\u0002\u0002\u0002\u04af\u04b0\u0003\u0002\u0002\u0002\u04b0\u04b1',
	'\u0007\u001d\u0002\u0002\u04b1\u04b2\u0005\u00e6t\u0002\u04b2\u04b3',
	'\u0007\u001e\u0002\u0002\u04b3\u0503\u0003\u0002\u0002\u0002\u04b4\u04b6',
	'\u0007\u0091\u0002\u0002\u04b5\u04b4\u0003\u0002\u0002\u0002\u04b5\u04b6',
	'\u0003\u0002\u0002\u0002\u04b6\u04b7\u0003\u0002\u0002\u0002\u04b7\u0503',
	'\u0005\u0014\u000b\u0002\u04b8\u04b9\u0007\u001f\u0002\u0002\u04b9\u04ba',
	'\u0005\u012a\u0096\u0002\u04ba\u04bb\u0005\u009aN\u0002\u04bb\u04bc',
	'\u0007 \u0002\u0002\u04bc\u0503\u0003\u0002\u0002\u0002\u04bd\u04be',
	'\u0007\u00ac\u0002\u0002\u04be\u04bf\u0005\u00ba^\u0002\u04bf\u04c0',
	'\u0007\u00ad\u0002\u0002\u04c0\u04c1\u0007\u001d\u0002\u0002\u04c1\u04c3',
	'\u0005\u00a4S\u0002\u04c2\u04c4\u0005\u00be`\u0002\u04c3\u04c2\u0003',
	'\u0002\u0002\u0002\u04c3\u04c4\u0003\u0002\u0002\u0002\u04c4\u04c5\u0003',
	'\u0002\u0002\u0002\u04c5\u04c6\u0007\u001e\u0002\u0002\u04c6\u0503\u0003',
	'\u0002\u0002\u0002\u04c7\u04c8\u0007\u00ae\u0002\u0002\u04c8\u0503\u0005',
	'\u00a6T\f\u04c9\u04ca\u0007\u00af\u0002\u0002\u04ca\u04cb\u0007\u001d',
	'\u0002\u0002\u04cb\u04cc\u0005\u009aN\u0002\u04cc\u04cd\u0007U\u0002',
	'\u0002\u04cd\u04cf\u0005\u0100\u0081\u0002\u04ce\u04d0\u0007\u00b0\u0002',
	'\u0002\u04cf\u04ce\u0003\u0002\u0002\u0002\u04cf\u04d0\u0003\u0002\u0002',
	'\u0002\u04d0\u04d1\u0003\u0002\u0002\u0002\u04d1\u04d2\u0007\u001e\u0002',
	'\u0002\u04d2\u0503\u0003\u0002\u0002\u0002\u04d3\u04d5\u0007\u00b1\u0002',
	'\u0002\u04d4\u04d6\u0005\u009aN\u0002\u04d5\u04d4\u0003\u0002\u0002',
	'\u0002\u04d5\u04d6\u0003\u0002\u0002\u0002\u04d6\u04da\u0003\u0002\u0002',
	'\u0002\u04d7\u04d8\u0005\u00e0q\u0002\u04d8\u04d9\u0005\u00e2r\u0002',
	'\u04d9\u04db\u0003\u0002\u0002\u0002\u04da\u04d7\u0003\u0002\u0002\u0002',
	'\u04db\u04dc\u0003\u0002\u0002\u0002\u04dc\u04da\u0003\u0002\u0002\u0002',
	'\u04dc\u04dd\u0003\u0002\u0002\u0002\u04dd\u04df\u0003\u0002\u0002\u0002',
	'\u04de\u04e0\u0005\u00e4s\u0002\u04df\u04de\u0003\u0002\u0002\u0002',
	'\u04df\u04e0\u0003\u0002\u0002\u0002\u04e0\u04e1\u0003\u0002\u0002\u0002',
	'\u04e1\u04e2\u0007\u00b2\u0002\u0002\u04e2\u0503\u0003\u0002\u0002\u0002',
	'\u04e3\u04e4\u0007\u00b3\u0002\u0002\u04e4\u04e5\u0007\u001d\u0002\u0002',
	'\u04e5\u04e6\u0005\u009aN\u0002\u04e6\u04e7\u0007\u001a\u0002\u0002',
	'\u04e7\u04e8\u0005\u0100\u0081\u0002\u04e8\u04e9\u0007\u001e\u0002\u0002',
	'\u04e9\u0503\u0003\u0002\u0002\u0002\u04ea\u04eb\u0007\u00b3\u0002\u0002',
	'\u04eb\u04ec\u0007\u001d\u0002\u0002\u04ec\u04ed\u0005\u009aN\u0002',
	'\u04ed\u04ee\u0007\u0085\u0002\u0002\u04ee\u04ef\u0005\u0112\u008a\u0002',
	'\u04ef\u04f0\u0007\u001e\u0002\u0002\u04f0\u0503\u0003\u0002\u0002\u0002',
	'\u04f1\u04f2\u0007A\u0002\u0002\u04f2\u04f3\u0007\u001d\u0002\u0002',
	'\u04f3\u04f4\u0005\u0130\u0099\u0002\u04f4\u04f5\u0007\u001e\u0002\u0002',
	'\u04f5\u0503\u0003\u0002\u0002\u0002\u04f6\u04f7\u0007r\u0002\u0002',
	'\u04f7\u04f8\u0007\u001d\u0002\u0002\u04f8\u04f9\u0005\u0130\u0099\u0002',
	'\u04f9\u04fa\u0007\u001e\u0002\u0002\u04fa\u0503\u0003\u0002\u0002\u0002',
	'\u04fb\u04fc\u0007]\u0002\u0002\u04fc\u04fd\u0005\u009aN\u0002\u04fd',
	'\u04fe\u0005\u00eex\u0002\u04fe\u04ff\u0007\u000b\u0002\u0002\u04ff',
	'\u0500\u0005\u009aN\u0002\u0500\u0503\u0003\u0002\u0002\u0002\u0501',
	'\u0503\u0005\u0132\u009a\u0002\u0502\u0496\u0003\u0002\u0002\u0002\u0502',
	'\u049d\u0003\u0002\u0002\u0002\u0502\u04a1\u0003\u0002\u0002\u0002\u0502',
	'\u04a2\u0003\u0002\u0002\u0002\u0502\u04a3\u0003\u0002\u0002\u0002\u0502',
	'\u04a4\u0003\u0002\u0002\u0002\u0502\u04a5\u0003\u0002\u0002\u0002\u0502',
	'\u04a6\u0003\u0002\u0002\u0002\u0502\u04a7\u0003\u0002\u0002\u0002\u0502',
	'\u04a8\u0003\u0002\u0002\u0002\u0502\u04aa\u0003\u0002\u0002\u0002\u0502',
	'\u04ae\u0003\u0002\u0002\u0002\u0502\u04b5\u0003\u0002\u0002\u0002\u0502',
	'\u04b8\u0003\u0002\u0002\u0002\u0502\u04bd\u0003\u0002\u0002\u0002\u0502',
	'\u04c7\u0003\u0002\u0002\u0002\u0502\u04c9\u0003\u0002\u0002\u0002\u0502',
	'\u04d3\u0003\u0002\u0002\u0002\u0502\u04e3\u0003\u0002\u0002\u0002\u0502',
	'\u04ea\u0003\u0002\u0002\u0002\u0502\u04f1\u0003\u0002\u0002\u0002\u0502',
	'\u04f6\u0003\u0002\u0002\u0002\u0502\u04fb\u0003\u0002\u0002\u0002\u0502',
	'\u0501\u0003\u0002\u0002\u0002\u0503\u050f\u0003\u0002\u0002\u0002\u0504',
	'\u0505\f\u0013\u0002\u0002\u0505\u0506\u0007\u0017\u0002\u0002\u0506',
	'\u050e\u0005\u00a6T\u0014\u0507\u0508\f\u0019\u0002\u0002\u0508\u0509',
	'\u0007\u00b4\u0002\u0002\u0509\u050e\u0005\u0154\u00ab\u0002\u050a\u050b',
	'\f\n\u0002\u0002\u050b\u050c\u0007-\u0002\u0002\u050c\u050e\u0005\u0100',
	'\u0081\u0002\u050d\u0504\u0003\u0002\u0002\u0002\u050d\u0507\u0003\u0002',
	'\u0002\u0002\u050d\u050a\u0003\u0002\u0002\u0002\u050e\u0511\u0003\u0002',
	'\u0002\u0002\u050f\u050d\u0003\u0002\u0002\u0002\u050f\u0510\u0003\u0002',
	'\u0002\u0002\u0510\u00a7\u0003\u0002\u0002\u0002\u0511\u050f\u0003\u0002',
	'\u0002\u0002\u0512\u0515\t\u0016\u0002\u0002\u0513\u0516\u0005\u0142',
	'\u00a2\u0002\u0514\u0516\u0005\u009aN\u0002\u0515\u0513\u0003\u0002',
	'\u0002\u0002\u0515\u0514\u0003\u0002\u0002\u0002\u0516\u00a9\u0003\u0002',
	'\u0002\u0002\u0517\u0518\u0007\u00b5\u0002\u0002\u0518\u051a\u0007\u001d',
	'\u0002\u0002\u0519\u051b\u0007E\u0002\u0002\u051a\u0519\u0003\u0002',
	'\u0002\u0002\u051a\u051b\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002',
	'\u0002\u0002\u051c\u051d\u0005\u00b8]\u0002\u051d\u051f\u0007\u001e',
	'\u0002\u0002\u051e\u0520\u0005\u00b0Y\u0002\u051f\u051e\u0003\u0002',
	'\u0002\u0002\u051f\u0520\u0003\u0002\u0002\u0002\u0520\u058e\u0003\u0002',
	'\u0002\u0002\u0521\u0522\t\u0017\u0002\u0002\u0522\u0523\u0007\u001d',
	'\u0002\u0002\u0523\u0524\u0005\u00b8]\u0002\u0524\u0526\u0007\u001e',
	'\u0002\u0002\u0525\u0527\u0005\u00b0Y\u0002\u0526\u0525\u0003\u0002',
	'\u0002\u0002\u0526\u0527\u0003\u0002\u0002\u0002\u0527\u058e\u0003\u0002',
	'\u0002\u0002\u0528\u058e\u0005\u00b6\\\u0002\u0529\u052a\u0007\u00b9',
	'\u0002\u0002\u052a\u052c\u0007\u001d\u0002\u0002\u052b\u052d\u0007D',
	'\u0002\u0002\u052c\u052b\u0003\u0002\u0002\u0002\u052c\u052d\u0003\u0002',
	'\u0002\u0002\u052d\u052e\u0003\u0002\u0002\u0002\u052e\u052f\u0007\r',
	'\u0002\u0002\u052f\u0531\u0007\u001e\u0002\u0002\u0530\u0532\u0005\u00b0',
	'Y\u0002\u0531\u0530\u0003\u0002\u0002\u0002\u0531\u0532\u0003\u0002',
	'\u0002\u0002\u0532\u058e\u0003\u0002\u0002\u0002\u0533\u0534\u0007\u00b9',
	'\u0002\u0002\u0534\u053c\u0007\u001d\u0002\u0002\u0535\u0537\u0007D',
	'\u0002\u0002\u0536\u0535\u0003\u0002\u0002\u0002\u0536\u0537\u0003\u0002',
	'\u0002\u0002\u0537\u0538\u0003\u0002\u0002\u0002\u0538\u053d\u0007\r',
	'\u0002\u0002\u0539\u053d\u0005\u00b8]\u0002\u053a\u053b\u0007E\u0002',
	'\u0002\u053b\u053d\u0005\u00e6t\u0002\u053c\u0536\u0003\u0002\u0002',
	'\u0002\u053c\u0539\u0003\u0002\u0002\u0002\u053c\u053a\u0003\u0002\u0002',
	'\u0002\u053d\u053e\u0003\u0002\u0002\u0002\u053e\u0540\u0007\u001e\u0002',
	'\u0002\u053f\u0541\u0005\u00b0Y\u0002\u0540\u053f\u0003\u0002\u0002',
	'\u0002\u0540\u0541\u0003\u0002\u0002\u0002\u0541\u058e\u0003\u0002\u0002',
	'\u0002\u0542\u0543\u0007\u00ba\u0002\u0002\u0543\u0545\u0007\u001d\u0002',
	'\u0002\u0544\u0546\u0007E\u0002\u0002\u0545\u0544\u0003\u0002\u0002',
	'\u0002\u0545\u0546\u0003\u0002\u0002\u0002\u0546\u0547\u0003\u0002\u0002',
	'\u0002\u0547\u0548\u0005\u00b8]\u0002\u0548\u054a\u0007\u001e\u0002',
	'\u0002\u0549\u054b\u0005\u00b0Y\u0002\u054a\u0549\u0003\u0002\u0002',
	'\u0002\u054a\u054b\u0003\u0002\u0002\u0002\u054b\u058e\u0003\u0002\u0002',
	'\u0002\u054c\u054d\u0007\u00bb\u0002\u0002\u054d\u054f\u0007\u001d\u0002',
	'\u0002\u054e\u0550\u0007E\u0002\u0002\u054f\u054e\u0003\u0002\u0002',
	'\u0002\u054f\u0550\u0003\u0002\u0002\u0002\u0550\u0551\u0003\u0002\u0002',
	'\u0002\u0551\u0552\u0005\u00b8]\u0002\u0552\u0554\u0007\u001e\u0002',
	'\u0002\u0553\u0555\u0005\u00b0Y\u0002\u0554\u0553\u0003\u0002\u0002',
	'\u0002\u0554\u0555\u0003\u0002\u0002\u0002\u0555\u058e\u0003\u0002\u0002',
	'\u0002\u0556\u0557\u0007\u00bc\u0002\u0002\u0557\u0558\u0007\u001d\u0002',
	'\u0002\u0558\u0559\u0005\u00b8]\u0002\u0559\u055b\u0007\u001e\u0002',
	'\u0002\u055a\u055c\u0005\u00b0Y\u0002\u055b\u055a\u0003\u0002\u0002',
	'\u0002\u055b\u055c\u0003\u0002\u0002\u0002\u055c\u058e\u0003\u0002\u0002',
	'\u0002\u055d\u055e\u0007\u00bd\u0002\u0002\u055e\u055f\u0007\u001d\u0002',
	'\u0002\u055f\u0560\u0005\u00b8]\u0002\u0560\u0562\u0007\u001e\u0002',
	'\u0002\u0561\u0563\u0005\u00b0Y\u0002\u0562\u0561\u0003\u0002\u0002',
	'\u0002\u0562\u0563\u0003\u0002\u0002\u0002\u0563\u058e\u0003\u0002\u0002',
	'\u0002\u0564\u0565\u0007\u00be\u0002\u0002\u0565\u0566\u0007\u001d\u0002',
	'\u0002\u0566\u0567\u0005\u00b8]\u0002\u0567\u0569\u0007\u001e\u0002',
	'\u0002\u0568\u056a\u0005\u00b0Y\u0002\u0569\u0568\u0003\u0002\u0002',
	'\u0002\u0569\u056a\u0003\u0002\u0002\u0002\u056a\u058e\u0003\u0002\u0002',
	'\u0002\u056b\u056c\u0007\u00bf\u0002\u0002\u056c\u056d\u0007\u001d\u0002',
	'\u0002\u056d\u056e\u0005\u00b8]\u0002\u056e\u0570\u0007\u001e\u0002',
	'\u0002\u056f\u0571\u0005\u00b0Y\u0002\u0570\u056f\u0003\u0002\u0002',
	'\u0002\u0570\u0571\u0003\u0002\u0002\u0002\u0571\u058e\u0003\u0002\u0002',
	'\u0002\u0572\u0573\u0007\u00c0\u0002\u0002\u0573\u0575\u0007\u001d\u0002',
	'\u0002\u0574\u0576\u0007E\u0002\u0002\u0575\u0574\u0003\u0002\u0002',
	'\u0002\u0575\u0576\u0003\u0002\u0002\u0002\u0576\u0577\u0003\u0002\u0002',
	'\u0002\u0577\u0578\u0005\u00b8]\u0002\u0578\u057a\u0007\u001e\u0002',
	'\u0002\u0579\u057b\u0005\u00b0Y\u0002\u057a\u0579\u0003\u0002\u0002',
	'\u0002\u057a\u057b\u0003\u0002\u0002\u0002\u057b\u058e\u0003\u0002\u0002',
	'\u0002\u057c\u057d\u0007\u00c1\u0002\u0002\u057d\u057f\u0007\u001d\u0002',
	'\u0002\u057e\u0580\u0007E\u0002\u0002\u057f\u057e\u0003\u0002\u0002',
	'\u0002\u057f\u0580\u0003\u0002\u0002\u0002\u0580\u0581\u0003\u0002\u0002',
	'\u0002\u0581\u0583\u0005\u00e6t\u0002\u0582\u0584\u0005B"\u0002\u0583',
	'\u0582\u0003\u0002\u0002\u0002\u0583\u0584\u0003\u0002\u0002\u0002\u0584',
	'\u0587\u0003\u0002\u0002\u0002\u0585\u0586\u0007\u00c2\u0002\u0002\u0586',
	'\u0588\u0005\u0144\u00a3\u0002\u0587\u0585\u0003\u0002\u0002\u0002\u0587',
	'\u0588\u0003\u0002\u0002\u0002\u0588\u0589\u0003\u0002\u0002\u0002\u0589',
	'\u058b\u0007\u001e\u0002\u0002\u058a\u058c\u0005\u00b0Y\u0002\u058b',
	'\u058a\u0003\u0002\u0002\u0002\u058b\u058c\u0003\u0002\u0002\u0002\u058c',
	'\u058e\u0003\u0002\u0002\u0002\u058d\u0517\u0003\u0002\u0002\u0002\u058d',
	'\u0521\u0003\u0002\u0002\u0002\u058d\u0528\u0003\u0002\u0002\u0002\u058d',
	'\u0529\u0003\u0002\u0002\u0002\u058d\u0533\u0003\u0002\u0002\u0002\u058d',
	'\u0542\u0003\u0002\u0002\u0002\u058d\u054c\u0003\u0002\u0002\u0002\u058d',
	'\u0556\u0003\u0002\u0002\u0002\u058d\u055d\u0003\u0002\u0002\u0002\u058d',
	'\u0564\u0003\u0002\u0002\u0002\u058d\u056b\u0003\u0002\u0002\u0002\u058d',
	'\u0572\u0003\u0002\u0002\u0002\u058d\u057c\u0003\u0002\u0002\u0002\u058e',
	'\u00ab\u0003\u0002\u0002\u0002\u058f\u0590\u0007\u00c3\u0002\u0002\u0590',
	'\u0591\u0007\u001d\u0002\u0002\u0591\u0592\u0005\u00e6t\u0002\u0592',
	'\u0593\u0007\u001e\u0002\u0002\u0593\u00ad\u0003\u0002\u0002\u0002\u0594',
	'\u0595\t\u0018\u0002\u0002\u0595\u0596\u0005\u0156\u00ac\u0002\u0596',
	'\u0597\u0005\u00b0Y\u0002\u0597\u05bf\u0003\u0002\u0002\u0002\u0598',
	'\u0599\u0007\u00c9\u0002\u0002\u0599\u059a\u0005\u00f6|\u0002\u059a',
	'\u059b\u0005\u00b0Y\u0002\u059b\u05bf\u0003\u0002\u0002\u0002\u059c',
	'\u059d\t\u0019\u0002\u0002\u059d\u059e\u0007\u001d\u0002\u0002\u059e',
	'\u05a0\u0005\u009aN\u0002\u059f\u05a1\u0005\u00b2Z\u0002\u05a0\u059f',
	'\u0003\u0002\u0002\u0002\u05a0\u05a1\u0003\u0002\u0002\u0002\u05a1\u05a2',
	'\u0003\u0002\u0002\u0002\u05a2\u05a4\u0007\u001e\u0002\u0002\u05a3\u05a5',
	'\u0005\u00b4[\u0002\u05a4\u05a3\u0003\u0002\u0002\u0002\u05a4\u05a5',
	'\u0003\u0002\u0002\u0002\u05a5\u05a6\u0003\u0002\u0002\u0002\u05a6\u05a7',
	'\u0005\u00b0Y\u0002\u05a7\u05bf\u0003\u0002\u0002\u0002\u05a8\u05a9',
	'\t\u001a\u0002\u0002\u05a9\u05ab\u0005\u00f4{\u0002\u05aa\u05ac\u0005',
	'\u00b4[\u0002\u05ab\u05aa\u0003\u0002\u0002\u0002\u05ab\u05ac\u0003',
	'\u0002\u0002\u0002\u05ac\u05ad\u0003\u0002\u0002\u0002\u05ad\u05ae\u0005',
	'\u00b0Y\u0002\u05ae\u05bf\u0003\u0002\u0002\u0002\u05af\u05b0\u0007',
	'\u00ce\u0002\u0002\u05b0\u05b1\u0007\u001d\u0002\u0002\u05b1\u05b2\u0005',
	'\u009aN\u0002\u05b2\u05b3\u0007\u001a\u0002\u0002\u05b3\u05b4\u0005',
	'\u00a6T\u0002\u05b4\u05b7\u0007\u001e\u0002\u0002\u05b5\u05b6\u0007',
	'p\u0002\u0002\u05b6\u05b8\t\u001b\u0002\u0002\u05b7\u05b5\u0003\u0002',
	'\u0002\u0002\u05b7\u05b8\u0003\u0002\u0002\u0002\u05b8\u05ba\u0003\u0002',
	'\u0002\u0002\u05b9\u05bb\u0005\u00b4[\u0002\u05ba\u05b9\u0003\u0002',
	'\u0002\u0002\u05ba\u05bb\u0003\u0002\u0002\u0002\u05bb\u05bc\u0003\u0002',
	'\u0002\u0002\u05bc\u05bd\u0005\u00b0Y\u0002\u05bd\u05bf\u0003\u0002',
	'\u0002\u0002\u05be\u0594\u0003\u0002\u0002\u0002\u05be\u0598\u0003\u0002',
	'\u0002\u0002\u05be\u059c\u0003\u0002\u0002\u0002\u05be\u05a8\u0003\u0002',
	'\u0002\u0002\u05be\u05af\u0003\u0002\u0002\u0002\u05bf\u00af\u0003\u0002',
	'\u0002\u0002\u05c0\u05c3\u0007\u00d1\u0002\u0002\u05c1\u05c4\u0005\u012a',
	'\u0096\u0002\u05c2\u05c4\u0005(\u0015\u0002\u05c3\u05c1\u0003\u0002',
	'\u0002\u0002\u05c3\u05c2\u0003\u0002\u0002\u0002\u05c4\u00b1\u0003\u0002',
	'\u0002\u0002\u05c5\u05c8\u0007\u001a\u0002\u0002\u05c6\u05c9\u0005\u013a',
	'\u009e\u0002\u05c7\u05c9\u0007,\u0002\u0002\u05c8\u05c6\u0003\u0002',
	'\u0002\u0002\u05c8\u05c7\u0003\u0002\u0002\u0002\u05c9\u05cc\u0003\u0002',
	'\u0002\u0002\u05ca\u05cb\u0007\u001a\u0002\u0002\u05cb\u05cd\u0005\u009a',
	'N\u0002\u05cc\u05ca\u0003\u0002\u0002\u0002\u05cc\u05cd\u0003\u0002',
	'\u0002\u0002\u05cd\u00b3\u0003\u0002\u0002\u0002\u05ce\u05cf\t\u001c',
	'\u0002\u0002\u05cf\u05d0\u0007\u00d3\u0002\u0002\u05d0\u00b5\u0003\u0002',
	'\u0002\u0002\u05d1\u05d2\u0007\u00d4\u0002\u0002\u05d2\u05d3\u0007\u001d',
	'\u0002\u0002\u05d3\u05d4\u0005\u00b8]\u0002\u05d4\u05d6\u0007\u001e',
	'\u0002\u0002\u05d5\u05d7\u0005\u00b0Y\u0002\u05d6\u05d5\u0003\u0002',
	'\u0002\u0002\u05d6\u05d7\u0003\u0002\u0002\u0002\u05d7\u05e2\u0003\u0002',
	'\u0002\u0002\u05d8\u05d9\u0007\u00d5\u0002\u0002\u05d9\u05da\u0007\u001d',
	'\u0002\u0002\u05da\u05db\u0005\u00b8]\u0002\u05db\u05dc\u0007\u001a',
	'\u0002\u0002\u05dc\u05dd\u0005\u00b8]\u0002\u05dd\u05df\u0007\u001e',
	'\u0002\u0002\u05de\u05e0\u0005\u00b0Y\u0002\u05df\u05de\u0003\u0002',
	'\u0002\u0002\u05df\u05e0\u0003\u0002\u0002\u0002\u05e0\u05e2\u0003\u0002',
	'\u0002\u0002\u05e1\u05d1\u0003\u0002\u0002\u0002\u05e1\u05d8\u0003\u0002',
	'\u0002\u0002\u05e2\u00b7\u0003\u0002\u0002\u0002\u05e3\u05e5\u0007D',
	'\u0002\u0002\u05e4\u05e3\u0003\u0002\u0002\u0002\u05e4\u05e5\u0003\u0002',
	'\u0002\u0002\u05e5\u05e6\u0003\u0002\u0002\u0002\u05e6\u05e7\u0005\u009a',
	'N\u0002\u05e7\u00b9\u0003\u0002\u0002\u0002\u05e8\u05ee\u0005\u00bc',
	'_\u0002\u05e9\u05ea\u0007\u001d\u0002\u0002\u05ea\u05eb\u0005\u00bc',
	'_\u0002\u05eb\u05ec\u0007\u001e\u0002\u0002\u05ec\u05ee\u0003\u0002',
	'\u0002\u0002\u05ed\u05e8\u0003\u0002\u0002\u0002\u05ed\u05e9\u0003\u0002',
	'\u0002\u0002\u05ee\u00bb\u0003\u0002\u0002\u0002\u05ef\u05f4\u0005\u0130',
	'\u0099\u0002\u05f0\u05f1\u0007\u001a\u0002\u0002\u05f1\u05f3\u0005\u0130',
	'\u0099\u0002\u05f2\u05f0\u0003\u0002\u0002\u0002\u05f3\u05f6\u0003\u0002',
	'\u0002\u0002\u05f4\u05f2\u0003\u0002\u0002\u0002\u05f4\u05f5\u0003\u0002',
	'\u0002\u0002\u05f5\u00bd\u0003\u0002\u0002\u0002\u05f6\u05f4\u0003\u0002',
	'\u0002\u0002\u05f7\u05f8\u0007z\u0002\u0002\u05f8\u05f9\u0007\u00d6',
	'\u0002\u0002\u05f9\u0607\u0007|\u0002\u0002\u05fa\u05fb\u0007z\u0002',
	'\u0002\u05fb\u05fc\u0007\u0086\u0002\u0002\u05fc\u05fd\u0007\u00d7\u0002',
	'\u0002\u05fd\u0601\u0007|\u0002\u0002\u05fe\u05ff\u0007h\u0002\u0002',
	'\u05ff\u0600\u0007\u00d8\u0002\u0002\u0600\u0602\u0007\u00d9\u0002\u0002',
	'\u0601\u05fe\u0003\u0002\u0002\u0002\u0601\u0602\u0003\u0002\u0002\u0002',
	'\u0602\u0607\u0003\u0002\u0002\u0002\u0603\u0604\u0007h\u0002\u0002',
	'\u0604\u0605\u0007\u00d8\u0002\u0002\u0605\u0607\u0007\u00d9\u0002\u0002',
	'\u0606\u05f7\u0003\u0002\u0002\u0002\u0606\u05fa\u0003\u0002\u0002\u0002',
	'\u0606\u0603\u0003\u0002\u0002\u0002\u0607\u00bf\u0003\u0002\u0002\u0002',
	'\u0608\u0609\u0007\u00da\u0002\u0002\u0609\u060a\u0007\u001d\u0002\u0002',
	'\u060a\u060d\u0005\u00e6t\u0002\u060b\u060c\u0007\u0085\u0002\u0002',
	'\u060c\u060e\u0005\u0112\u008a\u0002\u060d\u060b\u0003\u0002\u0002\u0002',
	'\u060d\u060e\u0003\u0002\u0002\u0002\u060e\u060f\u0003\u0002\u0002\u0002',
	'\u060f\u0610\u0007\u001e\u0002\u0002\u0610\u0717\u0003\u0002\u0002\u0002',
	'\u0611\u0613\u0007\u00db\u0002\u0002\u0612\u0614\u0005\u0156\u00ac\u0002',
	'\u0613\u0612\u0003\u0002\u0002\u0002\u0613\u0614\u0003\u0002\u0002\u0002',
	'\u0614\u0717\u0003\u0002\u0002\u0002\u0615\u0616\u0007\u00dc\u0002\u0002',
	'\u0616\u0717\u0005\u00f4{\u0002\u0617\u0618\u0007<\u0002\u0002\u0618',
	'\u0717\u0005\u00f4{\u0002\u0619\u061a\u0007;\u0002\u0002\u061a\u0717',
	'\u0005\u00f4{\u0002\u061b\u061c\u0007\u00dd\u0002\u0002\u061c\u061d',
	'\u0007\u001d\u0002\u0002\u061d\u061e\u0005\u009aN\u0002\u061e\u061f',
	'\u0007\u001a\u0002\u0002\u061f\u0620\u0005\u009aN\u0002\u0620\u0621',
	'\u0007\u001a\u0002\u0002\u0621\u0622\u0005\u009aN\u0002\u0622\u0623',
	'\u0007\u001a\u0002\u0002\u0623\u0624\u0005\u009aN\u0002\u0624\u0625',
	'\u0007\u001e\u0002\u0002\u0625\u0717\u0003\u0002\u0002\u0002\u0626\u0627',
	'\u0007]\u0002\u0002\u0627\u0628\u0007\u001d\u0002\u0002\u0628\u062b',
	'\u0005\u009aN\u0002\u0629\u062a\u0007\u001a\u0002\u0002\u062a\u062c',
	'\u0005\u009aN\u0002\u062b\u0629\u0003\u0002\u0002\u0002\u062c\u062d',
	'\u0003\u0002\u0002\u0002\u062d\u062b\u0003\u0002\u0002\u0002\u062d\u062e',
	'\u0003\u0002\u0002\u0002\u062e\u062f\u0003\u0002\u0002\u0002\u062f\u0630',
	'\u0007\u001e\u0002\u0002\u0630\u0717\u0003\u0002\u0002\u0002\u0631\u0632',
	'\u0007\u0089\u0002\u0002\u0632\u0633\u0007\u001d\u0002\u0002\u0633\u0634',
	'\u0005\u009aN\u0002\u0634\u0635\u0007\u001a\u0002\u0002\u0635\u0636',
	'\u0005\u009aN\u0002\u0636\u0637\u0007\u001e\u0002\u0002\u0637\u0717',
	'\u0003\u0002\u0002\u0002\u0638\u0639\u0007:\u0002\u0002\u0639\u0717',
	'\u0005\u00f4{\u0002\u063a\u063b\u0007>\u0002\u0002\u063b\u0717\u0005',
	'\u00f4{\u0002\u063c\u063d\u0007\u008a\u0002\u0002\u063d\u063e\u0007',
	'\u001d\u0002\u0002\u063e\u063f\u0005\u009aN\u0002\u063f\u0640\u0007',
	'\u001a\u0002\u0002\u0640\u0641\u0005\u009aN\u0002\u0641\u0642\u0007',
	'\u001e\u0002\u0002\u0642\u0717\u0003\u0002\u0002\u0002\u0643\u0644\u0007',
	'9\u0002\u0002\u0644\u0717\u0005\u00f4{\u0002\u0645\u0646\u0007\u00de',
	'\u0002\u0002\u0646\u0717\u0005\u00f4{\u0002\u0647\u0648\u0007\u00df',
	'\u0002\u0002\u0648\u0649\u0007\u001d\u0002\u0002\u0649\u064c\u0005\u009a',
	'N\u0002\u064a\u064b\u0007\u001a\u0002\u0002\u064b\u064d\u0005\u009a',
	'N\u0002\u064c\u064a\u0003\u0002\u0002\u0002\u064c\u064d\u0003\u0002',
	'\u0002\u0002\u064d\u064e\u0003\u0002\u0002\u0002\u064e\u064f\u0007\u001e',
	'\u0002\u0002\u064f\u0717\u0003\u0002\u0002\u0002\u0650\u0717\u0005\u00ce',
	'h\u0002\u0651\u0652\u0007\u00e3\u0002\u0002\u0652\u0717\u0005\u0156',
	'\u00ac\u0002\u0653\u0654\u0007r\u0002\u0002\u0654\u0717\u0005\u00f4',
	'{\u0002\u0655\u0656\u0007@\u0002\u0002\u0656\u0717\u0005\u00f4{\u0002',
	'\u0657\u0658\t\u001d\u0002\u0002\u0658\u0659\u0007\u001d\u0002\u0002',
	'\u0659\u065a\u0005\u009aN\u0002\u065a\u0660\u0007\u001a\u0002\u0002',
	'\u065b\u0661\u0005\u009aN\u0002\u065c\u065d\u0007]\u0002\u0002\u065d',
	'\u065e\u0005\u009aN\u0002\u065e\u065f\u0005\u00eex\u0002\u065f\u0661',
	'\u0003\u0002\u0002\u0002\u0660\u065b\u0003\u0002\u0002\u0002\u0660\u065c',
	'\u0003\u0002\u0002\u0002\u0661\u0662\u0003\u0002\u0002\u0002\u0662\u0663',
	'\u0007\u001e\u0002\u0002\u0663\u0717\u0003\u0002\u0002\u0002\u0664\u0666',
	'\u0007\u00e6\u0002\u0002\u0665\u0667\u0005\u0156\u00ac\u0002\u0666\u0665',
	'\u0003\u0002\u0002\u0002\u0666\u0667\u0003\u0002\u0002\u0002\u0667\u0717',
	'\u0003\u0002\u0002\u0002\u0668\u066a\u0007\u00e7\u0002\u0002\u0669\u066b',
	'\u0005\u00c4c\u0002\u066a\u0669\u0003\u0002\u0002\u0002\u066a\u066b',
	'\u0003\u0002\u0002\u0002\u066b\u0717\u0003\u0002\u0002\u0002\u066c\u066d',
	'\t\u001e\u0002\u0002\u066d\u066e\u0007\u001d\u0002\u0002\u066e\u066f',
	'\u0005\u009aN\u0002\u066f\u0670\u0007\u001a\u0002\u0002\u0670\u0671',
	'\u0007]\u0002\u0002\u0671\u0672\u0005\u009aN\u0002\u0672\u0673\u0005',
	'\u00eex\u0002\u0673\u0674\u0007\u001e\u0002\u0002\u0674\u0717\u0003',
	'\u0002\u0002\u0002\u0675\u0676\u0007\u00ea\u0002\u0002\u0676\u0677\u0007',
	'\u001d\u0002\u0002\u0677\u0678\u0005\u00eex\u0002\u0678\u0679\u0007',
	'p\u0002\u0002\u0679\u067a\u0005\u009aN\u0002\u067a\u067b\u0007\u001e',
	'\u0002\u0002\u067b\u0717\u0003\u0002\u0002\u0002\u067c\u067d\u0007\u00eb',
	'\u0002\u0002\u067d\u067e\u0007\u001d\u0002\u0002\u067e\u067f\u0005\u00cc',
	'g\u0002\u067f\u0680\u0007\u001a\u0002\u0002\u0680\u0681\u0005\u009a',
	'N\u0002\u0681\u0682\u0007\u001e\u0002\u0002\u0682\u0717\u0003\u0002',
	'\u0002\u0002\u0683\u0685\u0007\u00ec\u0002\u0002\u0684\u0686\u0005\u00c4',
	'c\u0002\u0685\u0684\u0003\u0002\u0002\u0002\u0685\u0686\u0003\u0002',
	'\u0002\u0002\u0686\u0717\u0003\u0002\u0002\u0002\u0687\u0688\u0007\u00ed',
	'\u0002\u0002\u0688\u0689\u0007\u001d\u0002\u0002\u0689\u068a\u0005\u00a4',
	'S\u0002\u068a\u068b\u0007z\u0002\u0002\u068b\u068c\u0005\u009aN\u0002',
	'\u068c\u068d\u0007\u001e\u0002\u0002\u068d\u0717\u0003\u0002\u0002\u0002',
	'\u068e\u0717\u0005\u00d0i\u0002\u068f\u0691\u0007\u00ee\u0002\u0002',
	'\u0690\u0692\u0005\u00c4c\u0002\u0691\u0690\u0003\u0002\u0002\u0002',
	'\u0691\u0692\u0003\u0002\u0002\u0002\u0692\u0717\u0003\u0002\u0002\u0002',
	'\u0693\u0694\t\u001f\u0002\u0002\u0694\u0695\u0007\u001d\u0002\u0002',
	'\u0695\u0696\u0005\u00f0y\u0002\u0696\u0697\u0007\u001a\u0002\u0002',
	'\u0697\u0698\u0005\u009aN\u0002\u0698\u0699\u0007\u001a\u0002\u0002',
	'\u0699\u069a\u0005\u009aN\u0002\u069a\u069b\u0007\u001e\u0002\u0002',
	'\u069b\u0717\u0003\u0002\u0002\u0002\u069c\u069e\u0007\u00f1\u0002\u0002',
	'\u069d\u069f\u0005\u0156\u00ac\u0002\u069e\u069d\u0003\u0002\u0002\u0002',
	'\u069e\u069f\u0003\u0002\u0002\u0002\u069f\u0717\u0003\u0002\u0002\u0002',
	'\u06a0\u06a2\u0007\u00f2\u0002\u0002\u06a1\u06a3\u0005\u00c4c\u0002',
	'\u06a2\u06a1\u0003\u0002\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002',
	'\u06a3\u0717\u0003\u0002\u0002\u0002\u06a4\u06a6\u0007\u00f3\u0002\u0002',
	'\u06a5\u06a7\u0005\u00c4c\u0002\u06a6\u06a5\u0003\u0002\u0002\u0002',
	'\u06a6\u06a7\u0003\u0002\u0002\u0002\u06a7\u0717\u0003\u0002\u0002\u0002',
	'\u06a8\u06a9\u0007\u00f4\u0002\u0002\u06a9\u0717\u0005\u00f4{\u0002',
	'\u06aa\u06ab\u0007\u00f5\u0002\u0002\u06ab\u0717\u0005\u00f4{\u0002',
	'\u06ac\u06ad\u0007\u00f6\u0002\u0002\u06ad\u0717\u0005\u00f2z\u0002',
	'\u06ae\u06af\u0007\u00f7\u0002\u0002\u06af\u0717\u0005\u00f4{\u0002',
	'\u06b0\u06b1\u0007\u00f8\u0002\u0002\u06b1\u0717\u0005\u0156\u00ac\u0002',
	'\u06b2\u06b3\u0007\u00f9\u0002\u0002\u06b3\u06b4\u0007\u001d\u0002\u0002',
	'\u06b4\u06b5\u0005\u009aN\u0002\u06b5\u06b6\u0007\u001a\u0002\u0002',
	'\u06b6\u06b7\u0005\u009aN\u0002\u06b7\u06b8\u0007\u001a\u0002\u0002',
	'\u06b8\u06b9\u0005\u009aN\u0002\u06b9\u06ba\u0007\u001e\u0002\u0002',
	'\u06ba\u0717\u0003\u0002\u0002\u0002\u06bb\u06bc\u0007\u00fa\u0002\u0002',
	'\u06bc\u06bd\u0007\u001d\u0002\u0002\u06bd\u06be\u0005\u009aN\u0002',
	'\u06be\u06bf\u0007\u001a\u0002\u0002\u06bf\u06c2\u0005\u009aN\u0002',
	'\u06c0\u06c1\u0007\u001a\u0002\u0002\u06c1\u06c3\u0005\u009aN\u0002',
	'\u06c2\u06c0\u0003\u0002\u0002\u0002\u06c2\u06c3\u0003\u0002\u0002\u0002',
	'\u06c3\u06c4\u0003\u0002\u0002\u0002\u06c4\u06c5\u0007\u001e\u0002\u0002',
	'\u06c5\u0717\u0003\u0002\u0002\u0002\u06c6\u06c7\u0007\u00fb\u0002\u0002',
	'\u06c7\u0717\u0005\u00f4{\u0002\u06c8\u06c9\u0007\u00ab\u0002\u0002',
	'\u06c9\u06ca\u0007\u001d\u0002\u0002\u06ca\u06cb\u0005\u009aN\u0002',
	'\u06cb\u06cc\u0007\u001a\u0002\u0002\u06cc\u06cd\u0005\u009aN\u0002',
	'\u06cd\u06ce\u0007\u001e\u0002\u0002\u06ce\u0717\u0003\u0002\u0002\u0002',
	'\u06cf\u06d0\u0007\u00fc\u0002\u0002\u06d0\u06d1\u0007\u001d\u0002\u0002',
	'\u06d1\u06d2\u0005\u0146\u00a4\u0002\u06d2\u06d3\u0007\u001e\u0002\u0002',
	'\u06d3\u0717\u0003\u0002\u0002\u0002\u06d4\u06d5\u0007\u00fd\u0002\u0002',
	'\u06d5\u0717\u0005\u00f4{\u0002\u06d6\u06d7\u0007?\u0002\u0002\u06d7',
	'\u0717\u0005\u00f4{\u0002\u06d8\u06d9\u0007\u00fe\u0002\u0002\u06d9',
	'\u06da\u0007\u001d\u0002\u0002\u06da\u06db\u0005\u009aN\u0002\u06db',
	'\u06dc\u0007\u001a\u0002\u0002\u06dc\u06dd\u0005\u009aN\u0002\u06dd',
	'\u06de\u0007\u001e\u0002\u0002\u06de\u0717\u0003\u0002\u0002\u0002\u06df',
	'\u06e0\u0007\u00ff\u0002\u0002\u06e0\u06e1\u0007\u001d\u0002\u0002\u06e1',
	'\u06e2\u0005\u009aN\u0002\u06e2\u06e3\u0007\u001a\u0002\u0002\u06e3',
	'\u06e4\u0005\u009aN\u0002\u06e4\u06e5\u0007\u001a\u0002\u0002\u06e5',
	'\u06e6\u0005\u009aN\u0002\u06e6\u06e7\u0007\u001e\u0002\u0002\u06e7',
	'\u0717\u0003\u0002\u0002\u0002\u06e8\u06e9\u0007\u0100\u0002\u0002\u06e9',
	'\u0717\u0005\u00f4{\u0002\u06ea\u06eb\u0007\u0101\u0002\u0002\u06eb',
	'\u0717\u0005\u0156\u00ac\u0002\u06ec\u06ed\u0007\u0102\u0002\u0002\u06ed',
	'\u06ee\u0007\u001d\u0002\u0002\u06ee\u06ef\u0005\u009aN\u0002\u06ef',
	'\u06f0\u0007\u001a\u0002\u0002\u06f0\u06f1\u0005\u009aN\u0002\u06f1',
	'\u06f2\u0007\u001e\u0002\u0002\u06f2\u0717\u0003\u0002\u0002\u0002\u06f3',
	'\u06f4\u0007=\u0002\u0002\u06f4\u06f5\u0007\u001d\u0002\u0002\u06f5',
	'\u06f8\u0005\u009aN\u0002\u06f6\u06f7\u0007\u001a\u0002\u0002\u06f7',
	'\u06f9\u0005\u009aN\u0002\u06f8\u06f6\u0003\u0002\u0002\u0002\u06f8',
	'\u06f9\u0003\u0002\u0002\u0002\u06f9\u06fa\u0003\u0002\u0002\u0002\u06fa',
	'\u06fb\u0007\u001e\u0002\u0002\u06fb\u0717\u0003\u0002\u0002\u0002\u06fc',
	'\u06fd\u0007\u0103\u0002\u0002\u06fd\u06fe\u0007\u001d\u0002\u0002\u06fe',
	'\u0711\u0005\u009aN\u0002\u06ff\u0700\u0007U\u0002\u0002\u0700\u0701',
	'\u0007\u00da\u0002\u0002\u0701\u0703\u0005\u010e\u0088\u0002\u0702\u06ff',
	'\u0003\u0002\u0002\u0002\u0702\u0703\u0003\u0002\u0002\u0002\u0703\u0705',
	'\u0003\u0002\u0002\u0002\u0704\u0706\u0005\u00c8e\u0002\u0705\u0704',
	'\u0003\u0002\u0002\u0002\u0705\u0706\u0003\u0002\u0002\u0002\u0706\u0712',
	'\u0003\u0002\u0002\u0002\u0707\u0708\u0007U\u0002\u0002\u0708\u0709',
	'\u0007\u00ae\u0002\u0002\u0709\u0712\u0005\u010e\u0088\u0002\u070a\u070b',
	'\u0007\u001a\u0002\u0002\u070b\u070c\u0005\u0136\u009c\u0002\u070c\u070d',
	'\u0007\u001a\u0002\u0002\u070d\u070e\u0005\u0136\u009c\u0002\u070e\u070f',
	'\u0007\u001a\u0002\u0002\u070f\u0710\u0005\u0136\u009c\u0002\u0710\u0712',
	'\u0003\u0002\u0002\u0002\u0711\u0702\u0003\u0002\u0002\u0002\u0711\u0707',
	'\u0003\u0002\u0002\u0002\u0711\u070a\u0003\u0002\u0002\u0002\u0712\u0713',
	'\u0003\u0002\u0002\u0002\u0713\u0714\u0007\u001e\u0002\u0002\u0714\u0717',
	'\u0003\u0002\u0002\u0002\u0715\u0717\u0005\u00c2b\u0002\u0716\u0608',
	'\u0003\u0002\u0002\u0002\u0716\u0611\u0003\u0002\u0002\u0002\u0716\u0615',
	'\u0003\u0002\u0002\u0002\u0716\u0617\u0003\u0002\u0002\u0002\u0716\u0619',
	'\u0003\u0002\u0002\u0002\u0716\u061b\u0003\u0002\u0002\u0002\u0716\u0626',
	'\u0003\u0002\u0002\u0002\u0716\u0631\u0003\u0002\u0002\u0002\u0716\u0638',
	'\u0003\u0002\u0002\u0002\u0716\u063a\u0003\u0002\u0002\u0002\u0716\u063c',
	'\u0003\u0002\u0002\u0002\u0716\u0643\u0003\u0002\u0002\u0002\u0716\u0645',
	'\u0003\u0002\u0002\u0002\u0716\u0647\u0003\u0002\u0002\u0002\u0716\u0650',
	'\u0003\u0002\u0002\u0002\u0716\u0651\u0003\u0002\u0002\u0002\u0716\u0653',
	'\u0003\u0002\u0002\u0002\u0716\u0655\u0003\u0002\u0002\u0002\u0716\u0657',
	'\u0003\u0002\u0002\u0002\u0716\u0664\u0003\u0002\u0002\u0002\u0716\u0668',
	'\u0003\u0002\u0002\u0002\u0716\u066c\u0003\u0002\u0002\u0002\u0716\u0675',
	'\u0003\u0002\u0002\u0002\u0716\u067c\u0003\u0002\u0002\u0002\u0716\u0683',
	'\u0003\u0002\u0002\u0002\u0716\u0687\u0003\u0002\u0002\u0002\u0716\u068e',
	'\u0003\u0002\u0002\u0002\u0716\u068f\u0003\u0002\u0002\u0002\u0716\u0693',
	'\u0003\u0002\u0002\u0002\u0716\u069c\u0003\u0002\u0002\u0002\u0716\u06a0',
	'\u0003\u0002\u0002\u0002\u0716\u06a4\u0003\u0002\u0002\u0002\u0716\u06a8',
	'\u0003\u0002\u0002\u0002\u0716\u06aa\u0003\u0002\u0002\u0002\u0716\u06ac',
	'\u0003\u0002\u0002\u0002\u0716\u06ae\u0003\u0002\u0002\u0002\u0716\u06b0',
	'\u0003\u0002\u0002\u0002\u0716\u06b2\u0003\u0002\u0002\u0002\u0716\u06bb',
	'\u0003\u0002\u0002\u0002\u0716\u06c6\u0003\u0002\u0002\u0002\u0716\u06c8',
	'\u0003\u0002\u0002\u0002\u0716\u06cf\u0003\u0002\u0002\u0002\u0716\u06d4',
	'\u0003\u0002\u0002\u0002\u0716\u06d6\u0003\u0002\u0002\u0002\u0716\u06d8',
	'\u0003\u0002\u0002\u0002\u0716\u06df\u0003\u0002\u0002\u0002\u0716\u06e8',
	'\u0003\u0002\u0002\u0002\u0716\u06ea\u0003\u0002\u0002\u0002\u0716\u06ec',
	'\u0003\u0002\u0002\u0002\u0716\u06f3\u0003\u0002\u0002\u0002\u0716\u06fc',
	'\u0003\u0002\u0002\u0002\u0716\u0715\u0003\u0002\u0002\u0002\u0717\u00c1',
	'\u0003\u0002\u0002\u0002\u0718\u0719\u0007\u0104\u0002\u0002\u0719\u071a',
	'\u0007\u001d\u0002\u0002\u071a\u071b\u0005\u009aN\u0002\u071b\u071c',
	'\u0007\u001a\u0002\u0002\u071c\u071d\u0005\u009aN\u0002\u071d\u071e',
	'\u0007\u001e\u0002\u0002\u071e\u0737\u0003\u0002\u0002\u0002\u071f\u0720',
	'\u0007\u0105\u0002\u0002\u0720\u0722\u0007\u001d\u0002\u0002\u0721\u0723',
	'\u0005\u00e6t\u0002\u0722\u0721\u0003\u0002\u0002\u0002\u0722\u0723',
	'\u0003\u0002\u0002\u0002\u0723\u0724\u0003\u0002\u0002\u0002\u0724\u0737',
	'\u0007\u001e\u0002\u0002\u0725\u0726\u0007\u0106\u0002\u0002\u0726\u0737',
	'\u0005\u00f2z\u0002\u0727\u0728\u0007\u0107\u0002\u0002\u0728\u0737',
	'\u0005\u00f2z\u0002\u0729\u072a\u0007\u0108\u0002\u0002\u072a\u0737',
	'\u0005\u00f2z\u0002\u072b\u072c\u0007\u0109\u0002\u0002\u072c\u0737',
	'\u0005\u00f2z\u0002\u072d\u072e\u0007\u010a\u0002\u0002\u072e\u072f',
	'\u0007\u001d\u0002\u0002\u072f\u0730\u0005\u009aN\u0002\u0730\u0731',
	'\u0007\u001a\u0002\u0002\u0731\u0732\u0005\u009aN\u0002\u0732\u0733',
	'\u0007\u001e\u0002\u0002\u0733\u0737\u0003\u0002\u0002\u0002\u0734\u0735',
	'\u0007\u010b\u0002\u0002\u0735\u0737\u0005\u00f2z\u0002\u0736\u0718',
	'\u0003\u0002\u0002\u0002\u0736\u071f\u0003\u0002\u0002\u0002\u0736\u0725',
	'\u0003\u0002\u0002\u0002\u0736\u0727\u0003\u0002\u0002\u0002\u0736\u0729',
	'\u0003\u0002\u0002\u0002\u0736\u072b\u0003\u0002\u0002\u0002\u0736\u072d',
	'\u0003\u0002\u0002\u0002\u0736\u0734\u0003\u0002\u0002\u0002\u0737\u00c3',
	'\u0003\u0002\u0002\u0002\u0738\u073a\u0007\u001d\u0002\u0002\u0739\u073b',
	'\u0005\u00c6d\u0002\u073a\u0739\u0003\u0002\u0002\u0002\u073a\u073b',
	'\u0003\u0002\u0002\u0002\u073b\u073c\u0003\u0002\u0002\u0002\u073c\u073d',
	'\u0007\u001e\u0002\u0002\u073d\u00c5\u0003\u0002\u0002\u0002\u073e\u073f',
	'\u00070\u0002\u0002\u073f\u00c7\u0003\u0002\u0002\u0002\u0740\u074d',
	'\u0007\u010c\u0002\u0002\u0741\u0742\u0005\u0138\u009d\u0002\u0742\u0743',
	'\u0007\f\u0002\u0002\u0743\u0744\u0005\u0138\u009d\u0002\u0744\u074e',
	'\u0003\u0002\u0002\u0002\u0745\u074a\u0005\u00caf\u0002\u0746\u0747',
	'\u0007\u001a\u0002\u0002\u0747\u0749\u0005\u00caf\u0002\u0748\u0746',
	'\u0003\u0002\u0002\u0002\u0749\u074c\u0003\u0002\u0002\u0002\u074a\u0748',
	'\u0003\u0002\u0002\u0002\u074a\u074b\u0003\u0002\u0002\u0002\u074b\u074e',
	'\u0003\u0002\u0002\u0002\u074c\u074a\u0003\u0002\u0002\u0002\u074d\u0741',
	'\u0003\u0002\u0002\u0002\u074d\u0745\u0003\u0002\u0002\u0002\u074e\u00c9',
	'\u0003\u0002\u0002\u0002\u074f\u0755\u0005\u0138\u009d\u0002\u0750\u0752',
	'\t\u0005\u0002\u0002\u0751\u0753\u0007\u0100\u0002\u0002\u0752\u0751',
	'\u0003\u0002\u0002\u0002\u0752\u0753\u0003\u0002\u0002\u0002\u0753\u0756',
	'\u0003\u0002\u0002\u0002\u0754\u0756\u0007\u0100\u0002\u0002\u0755\u0750',
	'\u0003\u0002\u0002\u0002\u0755\u0754\u0003\u0002\u0002\u0002\u0755\u0756',
	'\u0003\u0002\u0002\u0002\u0756\u00cb\u0003\u0002\u0002\u0002\u0757\u0758',
	'\t \u0002\u0002\u0758\u00cd\u0003\u0002\u0002\u0002\u0759\u075a\u0007',
	'\u010e\u0002\u0002\u075a\u0772\u0007\u001d\u0002\u0002\u075b\u075e\u0005',
	'\u009aN\u0002\u075c\u075d\u0007p\u0002\u0002\u075d\u075f\u0005\u009a',
	'N\u0002\u075e\u075c\u0003\u0002\u0002\u0002\u075e\u075f\u0003\u0002',
	'\u0002\u0002\u075f\u0773\u0003\u0002\u0002\u0002\u0760\u0762\u0007\u010f',
	'\u0002\u0002\u0761\u0763\u0005\u009aN\u0002\u0762\u0761\u0003\u0002',
	'\u0002\u0002\u0762\u0763\u0003\u0002\u0002\u0002\u0763\u0764\u0003\u0002',
	'\u0002\u0002\u0764\u0765\u0007p\u0002\u0002\u0765\u0773\u0005\u009a',
	'N\u0002\u0766\u0768\u0007\u0110\u0002\u0002\u0767\u0769\u0005\u009a',
	'N\u0002\u0768\u0767\u0003\u0002\u0002\u0002\u0768\u0769\u0003\u0002',
	'\u0002\u0002\u0769\u076a\u0003\u0002\u0002\u0002\u076a\u076b\u0007p',
	'\u0002\u0002\u076b\u0773\u0005\u009aN\u0002\u076c\u076e\u0007\u0111',
	'\u0002\u0002\u076d\u076f\u0005\u009aN\u0002\u076e\u076d\u0003\u0002',
	'\u0002\u0002\u076e\u076f\u0003\u0002\u0002\u0002\u076f\u0770\u0003\u0002',
	'\u0002\u0002\u0770\u0771\u0007p\u0002\u0002\u0771\u0773\u0005\u009a',
	'N\u0002\u0772\u075b\u0003\u0002\u0002\u0002\u0772\u0760\u0003\u0002',
	'\u0002\u0002\u0772\u0766\u0003\u0002\u0002\u0002\u0772\u076c\u0003\u0002',
	'\u0002\u0002\u0773\u0774\u0003\u0002\u0002\u0002\u0774\u0775\u0007\u001e',
	'\u0002\u0002\u0775\u00cf\u0003\u0002\u0002\u0002\u0776\u0777\u0007\u0113',
	'\u0002\u0002\u0777\u0778\u0007\u001d\u0002\u0002\u0778\u0785\u0005\u009a',
	'N\u0002\u0779\u077a\u0007\u001a\u0002\u0002\u077a\u077d\u0005\u009a',
	'N\u0002\u077b\u077c\u0007\u001a\u0002\u0002\u077c\u077e\u0005\u009a',
	'N\u0002\u077d\u077b\u0003\u0002\u0002\u0002\u077d\u077e\u0003\u0002',
	'\u0002\u0002\u077e\u0786\u0003\u0002\u0002\u0002\u077f\u0780\u0007p',
	'\u0002\u0002\u0780\u0783\u0005\u009aN\u0002\u0781\u0782\u0007w\u0002',
	'\u0002\u0782\u0784\u0005\u009aN\u0002\u0783\u0781\u0003\u0002\u0002',
	'\u0002\u0783\u0784\u0003\u0002\u0002\u0002\u0784\u0786\u0003\u0002\u0002',
	'\u0002\u0785\u0779\u0003\u0002\u0002\u0002\u0785\u077f\u0003\u0002\u0002',
	'\u0002\u0786\u0787\u0003\u0002\u0002\u0002\u0787\u0788\u0007\u001e\u0002',
	'\u0002\u0788\u00d1\u0003\u0002\u0002\u0002\u0789\u078a\u0005\u0128\u0095',
	'\u0002\u078a\u078c\u0007\u001d\u0002\u0002\u078b\u078d\u0005\u00d4k',
	'\u0002\u078c\u078b\u0003\u0002\u0002\u0002\u078c\u078d\u0003\u0002\u0002',
	'\u0002\u078d\u078e\u0003\u0002\u0002\u0002\u078e\u078f\u0007\u001e\u0002',
	'\u0002\u078f\u079d\u0003\u0002\u0002\u0002\u0790\u0791\u0005\u0130\u0099',
	'\u0002\u0791\u0798\u0007\u001d\u0002\u0002\u0792\u0794\u0005\u00e6t',
	'\u0002\u0793\u0792\u0003\u0002\u0002\u0002\u0793\u0794\u0003\u0002\u0002',
	'\u0002\u0794\u0799\u0003\u0002\u0002\u0002\u0795\u0797\u0005\\/\u0002',
	'\u0796\u0795\u0003\u0002\u0002\u0002\u0796\u0797\u0003\u0002\u0002\u0002',
	'\u0797\u0799\u0003\u0002\u0002\u0002\u0798\u0793\u0003\u0002\u0002\u0002',
	'\u0798\u0796\u0003\u0002\u0002\u0002\u0799\u079a\u0003\u0002\u0002\u0002',
	'\u079a\u079b\u0007\u001e\u0002\u0002\u079b\u079d\u0003\u0002\u0002\u0002',
	'\u079c\u0789\u0003\u0002\u0002\u0002\u079c\u0790\u0003\u0002\u0002\u0002',
	'\u079d\u00d3\u0003\u0002\u0002\u0002\u079e\u07a3\u0005\u00d6l\u0002',
	'\u079f\u07a0\u0007\u001a\u0002\u0002\u07a0\u07a2\u0005\u00d6l\u0002',
	'\u07a1\u079f\u0003\u0002\u0002\u0002\u07a2\u07a5\u0003\u0002\u0002\u0002',
	'\u07a3\u07a1\u0003\u0002\u0002\u0002\u07a3\u07a4\u0003\u0002\u0002\u0002',
	'\u07a4\u00d5\u0003\u0002\u0002\u0002\u07a5\u07a3\u0003\u0002\u0002\u0002',
	'\u07a6\u07a8\u0005\u009aN\u0002\u07a7\u07a9\u0005\u0130\u0099\u0002',
	'\u07a8\u07a7\u0003\u0002\u0002\u0002\u07a8\u07a9\u0003\u0002\u0002\u0002',
	'\u07a9\u07ab\u0003\u0002\u0002\u0002\u07aa\u07ac\u0005^0\u0002\u07ab',
	'\u07aa\u0003\u0002\u0002\u0002\u07ab\u07ac\u0003\u0002\u0002\u0002\u07ac',
	'\u00d7\u0003\u0002\u0002\u0002\u07ad\u07ae\u0007\u015b\u0002\u0002\u07ae',
	'\u07af\u0007\u001d\u0002\u0002\u07af\u07b2\u0005\u012a\u0096\u0002\u07b0',
	'\u07b1\u0007w\u0002\u0002\u07b1\u07b3\u0005\u012a\u0096\u0002\u07b2',
	'\u07b0\u0003\u0002\u0002\u0002\u07b2\u07b3\u0003\u0002\u0002\u0002\u07b3',
	'\u07b4\u0003\u0002\u0002\u0002\u07b4\u07b5\u0007z\u0002\u0002\u07b5',
	'\u07b6\u0005\u012e\u0098\u0002\u07b6\u07ba\u0007\u001e\u0002\u0002\u07b7',
	'\u07b9\u0005`1\u0002\u07b8\u07b7\u0003\u0002\u0002\u0002\u07b9\u07bc',
	'\u0003\u0002\u0002\u0002\u07ba\u07b8\u0003\u0002\u0002\u0002\u07ba\u07bb',
	'\u0003\u0002\u0002\u0002\u07bb\u00d9\u0003\u0002\u0002\u0002\u07bc\u07ba',
	'\u0003\u0002\u0002\u0002\u07bd\u07c0\u0005\u00dco\u0002\u07be\u07c0',
	'\u0005\u00dep\u0002\u07bf\u07bd\u0003\u0002\u0002\u0002\u07bf\u07be',
	'\u0003\u0002\u0002\u0002\u07c0\u00db\u0003\u0002\u0002\u0002\u07c1\u07c2',
	'\u0007(\u0002\u0002\u07c2\u07c5\u0005\u0154\u00ab\u0002\u07c3\u07c5',
	'\u0007)\u0002\u0002\u07c4\u07c1\u0003\u0002\u0002\u0002\u07c4\u07c3',
	'\u0003\u0002\u0002\u0002\u07c5\u00dd\u0003\u0002\u0002\u0002\u07c6\u07c8',
	'\u0007*\u0002\u0002\u07c7\u07c9\u0005\u015a\u00ae\u0002\u07c8\u07c7',
	'\u0003\u0002\u0002\u0002\u07c8\u07c9\u0003\u0002\u0002\u0002\u07c9\u07ca',
	'\u0003\u0002\u0002\u0002\u07ca\u07cc\u0005\u0154\u00ab\u0002\u07cb\u07cd',
	'\u0005\u0134\u009b\u0002\u07cc\u07cb\u0003\u0002\u0002\u0002\u07cc\u07cd',
	'\u0003\u0002\u0002\u0002\u07cd\u00df\u0003\u0002\u0002\u0002\u07ce\u07cf',
	'\u0007\u0114\u0002\u0002\u07cf\u07d0\u0005\u009aN\u0002\u07d0\u00e1',
	'\u0003\u0002\u0002\u0002\u07d1\u07d2\u0007\u0115\u0002\u0002\u07d2\u07d3',
	'\u0005\u009aN\u0002\u07d3\u00e3\u0003\u0002\u0002\u0002\u07d4\u07d5',
	'\u0007\u0116\u0002\u0002\u07d5\u07d6\u0005\u009aN\u0002\u07d6\u00e5',
	'\u0003\u0002\u0002\u0002\u07d7\u07dc\u0005\u009aN\u0002\u07d8\u07d9',
	'\u0007\u001a\u0002\u0002\u07d9\u07db\u0005\u009aN\u0002\u07da\u07d8',
	'\u0003\u0002\u0002\u0002\u07db\u07de\u0003\u0002\u0002\u0002\u07dc\u07da',
	'\u0003\u0002\u0002\u0002\u07dc\u07dd\u0003\u0002\u0002\u0002\u07dd\u00e7',
	'\u0003\u0002\u0002\u0002\u07de\u07dc\u0003\u0002\u0002\u0002\u07df\u07e0',
	'\u0007\u00da\u0002\u0002\u07e0\u07e3\u0007\u011e\u0002\u0002\u07e1\u07e3',
	'\u0007\u00f5\u0002\u0002\u07e2\u07df\u0003\u0002\u0002\u0002\u07e2\u07e1',
	'\u0003\u0002\u0002\u0002\u07e3\u00e9\u0003\u0002\u0002\u0002\u07e4\u07e5',
	'\u0007\u00a1\u0002\u0002\u07e5\u00eb\u0003\u0002\u0002\u0002\u07e6\u07e7',
	'\u0007\u0010\u0002\u0002\u07e7\u00ed\u0003\u0002\u0002\u0002\u07e8\u07eb',
	'\u0005\u00f0y\u0002\u07e9\u07eb\t!\u0002\u0002\u07ea\u07e8\u0003\u0002',
	'\u0002\u0002\u07ea\u07e9\u0003\u0002\u0002\u0002\u07eb\u00ef\u0003\u0002',
	'\u0002\u0002\u07ec\u07ed\t"\u0002\u0002\u07ed\u00f1\u0003\u0002\u0002',
	'\u0002\u07ee\u07ef\u0007\u001d\u0002\u0002\u07ef\u07f0\u0005\u00e6t',
	'\u0002\u07f0\u07f1\u0007\u001e\u0002\u0002\u07f1\u00f3\u0003\u0002\u0002',
	'\u0002\u07f2\u07f3\u0007\u001d\u0002\u0002\u07f3\u07f4\u0005\u009aN',
	'\u0002\u07f4\u07f5\u0007\u001e\u0002\u0002\u07f5\u00f5\u0003\u0002\u0002',
	'\u0002\u07f6\u07f7\u0007\u001d\u0002\u0002\u07f7\u07f8\u0005\u00a6T',
	'\u0002\u07f8\u07f9\u0007\u001e\u0002\u0002\u07f9\u00f7\u0003\u0002\u0002',
	'\u0002\u07fa\u07ff\u0005\u00fc\u007f\u0002\u07fb\u07fc\u0007\u001a\u0002',
	'\u0002\u07fc\u07fe\u0005\u00fc\u007f\u0002\u07fd\u07fb\u0003\u0002\u0002',
	'\u0002\u07fe\u0801\u0003\u0002\u0002\u0002\u07ff\u07fd\u0003\u0002\u0002',
	'\u0002\u07ff\u0800\u0003\u0002\u0002\u0002\u0800\u00f9\u0003\u0002\u0002',
	'\u0002\u0801\u07ff\u0003\u0002\u0002\u0002\u0802\u0803\u0007\u00d3\u0002',
	'\u0002\u0803\u0807\u0007\u00cf\u0002\u0002\u0804\u0805\u0007\u00d3\u0002',
	'\u0002\u0805\u0807\u0007\u00d0\u0002\u0002\u0806\u0802\u0003\u0002\u0002',
	'\u0002\u0806\u0804\u0003\u0002\u0002\u0002\u0807\u00fb\u0003\u0002\u0002',
	'\u0002\u0808\u080a\u0005\u009aN\u0002\u0809\u080b\u0005D#\u0002\u080a',
	'\u0809\u0003\u0002\u0002\u0002\u080a\u080b\u0003\u0002\u0002\u0002\u080b',
	'\u00fd\u0003\u0002\u0002\u0002\u080c\u080d\t#\u0002\u0002\u080d\u00ff',
	'\u0003\u0002\u0002\u0002\u080e\u0810\t$\u0002\u0002\u080f\u0811\u0005',
	'\u0104\u0083\u0002\u0810\u080f\u0003\u0002\u0002\u0002\u0810\u0811\u0003',
	'\u0002\u0002\u0002\u0811\u0813\u0003\u0002\u0002\u0002\u0812\u0814\u0005',
	'\u0106\u0084\u0002\u0813\u0812\u0003\u0002\u0002\u0002\u0813\u0814\u0003',
	'\u0002\u0002\u0002\u0814\u08e0\u0003\u0002\u0002\u0002\u0815\u081b\u0007',
	'\u012d\u0002\u0002\u0816\u0818\u0007\u012e\u0002\u0002\u0817\u0819\u0007',
	'\u012f\u0002\u0002\u0818\u0817\u0003\u0002\u0002\u0002\u0818\u0819\u0003',
	'\u0002\u0002\u0002\u0819\u081b\u0003\u0002\u0002\u0002\u081a\u0815\u0003',
	'\u0002\u0002\u0002\u081a\u0816\u0003\u0002\u0002\u0002\u081b\u081d\u0003',
	'\u0002\u0002\u0002\u081c\u081e\u0005\u0152\u00aa\u0002\u081d\u081c\u0003',
	'\u0002\u0002\u0002\u081d\u081e\u0003\u0002\u0002\u0002\u081e\u0820\u0003',
	'\u0002\u0002\u0002\u081f\u0821\u0005\u0106\u0084\u0002\u0820\u081f\u0003',
	'\u0002\u0002\u0002\u0820\u0821\u0003\u0002\u0002\u0002\u0821\u08e0\u0003',
	'\u0002\u0002\u0002\u0822\u0824\t%\u0002\u0002\u0823\u0825\u0005\u0150',
	'\u00a9\u0002\u0824\u0823\u0003\u0002\u0002\u0002\u0824\u0825\u0003\u0002',
	'\u0002\u0002\u0825\u0827\u0003\u0002\u0002\u0002\u0826\u0828\u0005\u0106',
	'\u0084\u0002\u0827\u0826\u0003\u0002\u0002\u0002\u0827\u0828\u0003\u0002',
	'\u0002\u0002\u0828\u08e0\u0003\u0002\u0002\u0002\u0829\u082b\u0007\u0133',
	'\u0002\u0002\u082a\u082c\u0005\u0104\u0083\u0002\u082b\u082a\u0003\u0002',
	'\u0002\u0002\u082b\u082c\u0003\u0002\u0002\u0002\u082c\u08e0\u0003\u0002',
	'\u0002\u0002\u082d\u08e0\t&\u0002\u0002\u082e\u0830\u0005\u0102\u0082',
	'\u0002\u082f\u0831\u0005\u0104\u0083\u0002\u0830\u082f\u0003\u0002\u0002',
	'\u0002\u0830\u0831\u0003\u0002\u0002\u0002\u0831\u0833\u0003\u0002\u0002',
	'\u0002\u0832\u0834\u0007\u00ae\u0002\u0002\u0833\u0832\u0003\u0002\u0002',
	'\u0002\u0833\u0834\u0003\u0002\u0002\u0002\u0834\u08e0\u0003\u0002\u0002',
	'\u0002\u0835\u0837\u0007\u00ae\u0002\u0002\u0836\u0838\u0005\u0104\u0083',
	'\u0002\u0837\u0836\u0003\u0002\u0002\u0002\u0837\u0838\u0003\u0002\u0002',
	'\u0002\u0838\u08e0\u0003\u0002\u0002\u0002\u0839\u083a\u0007\u00da\u0002',
	"\u0002\u083a\u08e0\u0007\u0135\u0002\u0002\u083b\u083c\t'\u0002\u0002",
	'\u083c\u083e\u0005\u0104\u0083\u0002\u083d\u083f\u0005\u0108\u0085\u0002',
	'\u083e\u083d\u0003\u0002\u0002\u0002\u083e\u083f\u0003\u0002\u0002\u0002',
	'\u083f\u08e0\u0003\u0002\u0002\u0002\u0840\u0841\u0007\u0138\u0002\u0002',
	'\u0841\u084e\u0007\u0136\u0002\u0002\u0842\u084e\u0007\u013a\u0002\u0002',
	'\u0843\u084e\u0007\u0139\u0002\u0002\u0844\u0845\u0007\u013b\u0002\u0002',
	'\u0845\u084e\u0007\u0137\u0002\u0002\u0846\u0847\u0007\u013b\u0002\u0002',
	'\u0847\u084e\u0007\u0136\u0002\u0002\u0848\u0849\u0007\u0138\u0002\u0002',
	'\u0849\u084a\u0007\u00da\u0002\u0002\u084a\u084e\u0007\u0135\u0002\u0002',
	'\u084b\u084c\u0007\u013b\u0002\u0002\u084c\u084e\u0007\u0135\u0002\u0002',
	'\u084d\u0840\u0003\u0002\u0002\u0002\u084d\u0842\u0003\u0002\u0002\u0002',
	'\u084d\u0843\u0003\u0002\u0002\u0002\u084d\u0844\u0003\u0002\u0002\u0002',
	'\u084d\u0846\u0003\u0002\u0002\u0002\u084d\u0848\u0003\u0002\u0002\u0002',
	'\u084d\u084b\u0003\u0002\u0002\u0002\u084e\u084f\u0003\u0002\u0002\u0002',
	'\u084f\u0851\u0005\u0104\u0083\u0002\u0850\u0852\u0007\u00ae\u0002\u0002',
	'\u0851\u0850\u0003\u0002\u0002\u0002\u0851\u0852\u0003\u0002\u0002\u0002',
	'\u0852\u08e0\u0003\u0002\u0002\u0002\u0853\u0854\u0007\u013c\u0002\u0002',
	'\u0854\u08e0\u0005\u0104\u0083\u0002\u0855\u0857\u0007@\u0002\u0002',
	'\u0856\u0858\u0005\u0104\u0083\u0002\u0857\u0856\u0003\u0002\u0002\u0002',
	'\u0857\u0858\u0003\u0002\u0002\u0002\u0858\u085a\u0003\u0002\u0002\u0002',
	'\u0859\u085b\u0005\u0106\u0084\u0002\u085a\u0859\u0003\u0002\u0002\u0002',
	'\u085a\u085b\u0003\u0002\u0002\u0002\u085b\u08e0\u0003\u0002\u0002\u0002',
	'\u085c\u08e0\u0007\u00dc\u0002\u0002\u085d\u085f\u0007\u00de\u0002\u0002',
	'\u085e\u0860\u0005\u0110\u0089\u0002\u085f\u085e\u0003\u0002\u0002\u0002',
	'\u085f\u0860\u0003\u0002\u0002\u0002\u0860\u08e0\u0003\u0002\u0002\u0002',
	'\u0861\u0863\u0007\u00df\u0002\u0002\u0862\u0864\u0005\u0110\u0089\u0002',
	'\u0863\u0862\u0003\u0002\u0002\u0002\u0863\u0864\u0003\u0002\u0002\u0002',
	'\u0864\u08e0\u0003\u0002\u0002\u0002\u0865\u0867\u0007\u00e1\u0002\u0002',
	'\u0866\u0868\u0005\u0110\u0089\u0002\u0867\u0866\u0003\u0002\u0002\u0002',
	'\u0867\u0868\u0003\u0002\u0002\u0002\u0868\u08e0\u0003\u0002\u0002\u0002',
	'\u0869\u086b\u0007\u00e0\u0002\u0002\u086a\u086c\u0005\u0110\u0089\u0002',
	'\u086b\u086a\u0003\u0002\u0002\u0002\u086b\u086c\u0003\u0002\u0002\u0002',
	'\u086c\u08e0\u0003\u0002\u0002\u0002\u086d\u086e\u0007\u00df\u0002\u0002',
	'\u086e\u086f\u0007h\u0002\u0002\u086f\u0870\u0007\u0156\u0002\u0002',
	'\u0870\u0871\u0007\u00de\u0002\u0002\u0871\u0873\u0007\u00e2\u0002\u0002',
	'\u0872\u0874\u0005\u0110\u0089\u0002\u0873\u0872\u0003\u0002\u0002\u0002',
	'\u0873\u0874\u0003\u0002\u0002\u0002\u0874\u08e0\u0003\u0002\u0002\u0002',
	'\u0875\u0876\u0007\u00df\u0002\u0002\u0876\u0877\u0007i\u0002\u0002',
	'\u0877\u0878\u0007\u0156\u0002\u0002\u0878\u0879\u0007\u00de\u0002\u0002',
	'\u0879\u087b\u0007\u00e2\u0002\u0002\u087a\u087c\u0005\u0110\u0089\u0002',
	'\u087b\u087a\u0003\u0002\u0002\u0002\u087b\u087c\u0003\u0002\u0002\u0002',
	'\u087c\u08e0\u0003\u0002\u0002\u0002\u087d\u087e\u0007\u00df\u0002\u0002',
	'\u087e\u087f\u0007h\u0002\u0002\u087f\u0880\u0007\u00de\u0002\u0002',
	'\u0880\u0882\u0007\u00e2\u0002\u0002\u0881\u0883\u0005\u0110\u0089\u0002',
	'\u0882\u0881\u0003\u0002\u0002\u0002\u0882\u0883\u0003\u0002\u0002\u0002',
	'\u0883\u08e0\u0003\u0002\u0002\u0002\u0884\u0886\u0007\u010d\u0002\u0002',
	'\u0885\u0887\u0005\u0110\u0089\u0002\u0886\u0885\u0003\u0002\u0002\u0002',
	'\u0886\u0887\u0003\u0002\u0002\u0002\u0887\u08e0\u0003\u0002\u0002\u0002',
	'\u0888\u08e0\u0007\u013d\u0002\u0002\u0889\u0890\u0007\u013e\u0002\u0002',
	'\u088a\u0890\u0007\u013f\u0002\u0002\u088b\u0890\u0007\u0140\u0002\u0002',
	'\u088c\u088d\u0007\u0144\u0002\u0002\u088d\u0890\u0007\u0141\u0002\u0002',
	'\u088e\u0890\u0007\u0141\u0002\u0002\u088f\u0889\u0003\u0002\u0002\u0002',
	'\u088f\u088a\u0003\u0002\u0002\u0002\u088f\u088b\u0003\u0002\u0002\u0002',
	'\u088f\u088c\u0003\u0002\u0002\u0002\u088f\u088e\u0003\u0002\u0002\u0002',
	'\u0890\u0892\u0003\u0002\u0002\u0002\u0891\u0893\u0005\u0104\u0083\u0002',
	'\u0892\u0891\u0003\u0002\u0002\u0002\u0892\u0893\u0003\u0002\u0002\u0002',
	'\u0893\u08e0\u0003\u0002\u0002\u0002\u0894\u08e0\t(\u0002\u0002\u0895',
	'\u0896\u0007\u0144\u0002\u0002\u0896\u08e0\u0007\u013c\u0002\u0002\u0897',
	'\u089c\u0007\u0144\u0002\u0002\u0898\u0899\u0007\u00da\u0002\u0002\u0899',
	'\u089d\u0007\u0135\u0002\u0002\u089a\u089d\u0007\u0136\u0002\u0002\u089b',
	'\u089d\u0007\u0137\u0002\u0002\u089c\u0898\u0003\u0002\u0002\u0002\u089c',
	'\u089a\u0003\u0002\u0002\u0002\u089c\u089b\u0003\u0002\u0002\u0002\u089c',
	'\u089d\u0003\u0002\u0002\u0002\u089d\u089f\u0003\u0002\u0002\u0002\u089e',
	'\u08a0\u0005\u0108\u0085\u0002\u089f\u089e\u0003\u0002\u0002\u0002\u089f',
	'\u08a0\u0003\u0002\u0002\u0002\u08a0\u08e0\u0003\u0002\u0002\u0002\u08a1',
	'\u08a3\u0007\u0145\u0002\u0002\u08a2\u08a4\u0005\u0108\u0085\u0002\u08a3',
	'\u08a2\u0003\u0002\u0002\u0002\u08a3\u08a4\u0003\u0002\u0002\u0002\u08a4',
	'\u08e0\u0003\u0002\u0002\u0002\u08a5\u08a7\u0007\u0146\u0002\u0002\u08a6',
	'\u08a8\u0005\u0104\u0083\u0002\u08a7\u08a6\u0003\u0002\u0002\u0002\u08a7',
	'\u08a8\u0003\u0002\u0002\u0002\u08a8\u08aa\u0003\u0002\u0002\u0002\u08a9',
	'\u08ab\u0005\u0108\u0085\u0002\u08aa\u08a9\u0003\u0002\u0002\u0002\u08aa',
	'\u08ab\u0003\u0002\u0002\u0002\u08ab\u08e0\u0003\u0002\u0002\u0002\u08ac',
	'\u08ae\u0007\u0147\u0002\u0002\u08ad\u08af\u0005\u0108\u0085\u0002\u08ae',
	'\u08ad\u0003\u0002\u0002\u0002\u08ae\u08af\u0003\u0002\u0002\u0002\u08af',
	'\u08e0\u0003\u0002\u0002\u0002\u08b0\u08b2\u0007\u0148\u0002\u0002\u08b1',
	'\u08b3\u0005\u0108\u0085\u0002\u08b2\u08b1\u0003\u0002\u0002\u0002\u08b2',
	'\u08b3\u0003\u0002\u0002\u0002\u08b3\u08e0\u0003\u0002\u0002\u0002\u08b4',
	'\u08b5\u0007\u0149\u0002\u0002\u08b5\u08b7\u0005\u0140\u00a1\u0002\u08b6',
	'\u08b8\u0005\u0108\u0085\u0002\u08b7\u08b6\u0003\u0002\u0002\u0002\u08b7',
	'\u08b8\u0003\u0002\u0002\u0002\u08b8\u08e0\u0003\u0002\u0002\u0002\u08b9',
	'\u08ba\u0007\u011e\u0002\u0002\u08ba\u08bc\u0005\u0140\u00a1\u0002\u08bb',
	'\u08bd\u0005\u0108\u0085\u0002\u08bc\u08bb\u0003\u0002\u0002\u0002\u08bc',
	'\u08bd\u0003\u0002\u0002\u0002\u08bd\u08e0\u0003\u0002\u0002\u0002\u08be',
	'\u08e0\u0007\u014a\u0002\u0002\u08bf\u08e0\u0007\u011a\u0002\u0002\u08c0',
	'\u08e0\t)\u0002\u0002\u08c1\u08e0\u0007\u015a\u0002\u0002\u08c2\u08e0',
	'\u0007\u0158\u0002\u0002\u08c3\u08e0\u0007\u0159\u0002\u0002\u08c4\u08e0',
	'\u0007\u00b0\u0002\u0002\u08c5\u08ce\u0007\u0149\u0002\u0002\u08c6\u08cb',
	'\u0005\u009aN\u0002\u08c7\u08c8\u0007\u001a\u0002\u0002\u08c8\u08ca',
	'\u0005\u009aN\u0002\u08c9\u08c7\u0003\u0002\u0002\u0002\u08ca\u08cd',
	'\u0003\u0002\u0002\u0002\u08cb\u08c9\u0003\u0002\u0002\u0002\u08cb\u08cc',
	'\u0003\u0002\u0002\u0002\u08cc\u08cf\u0003\u0002\u0002\u0002\u08cd\u08cb',
	'\u0003\u0002\u0002\u0002\u08ce\u08c6\u0003\u0002\u0002\u0002\u08ce\u08cf',
	'\u0003\u0002\u0002\u0002\u08cf\u08e0\u0003\u0002\u0002\u0002\u08d0\u08d9',
	'\u0007\u011e\u0002\u0002\u08d1\u08d6\u0005\u009aN\u0002\u08d2\u08d3',
	'\u0007\u001a\u0002\u0002\u08d3\u08d5\u0005\u009aN\u0002\u08d4\u08d2',
	'\u0003\u0002\u0002\u0002\u08d5\u08d8\u0003\u0002\u0002\u0002\u08d6\u08d4',
	'\u0003\u0002\u0002\u0002\u08d6\u08d7\u0003\u0002\u0002\u0002\u08d7\u08da',
	'\u0003\u0002\u0002\u0002\u08d8\u08d6\u0003\u0002\u0002\u0002\u08d9\u08d1',
	'\u0003\u0002\u0002\u0002\u08d9\u08da\u0003\u0002\u0002\u0002\u08da\u08e0',
	'\u0003\u0002\u0002\u0002\u08db\u08dd\u0005\u012a\u0096\u0002\u08dc\u08de',
	'\u0005\u0152\u00aa\u0002\u08dd\u08dc\u0003\u0002\u0002\u0002\u08dd\u08de',
	'\u0003\u0002\u0002\u0002\u08de\u08e0\u0003\u0002\u0002\u0002\u08df\u080e',
	'\u0003\u0002\u0002\u0002\u08df\u081a\u0003\u0002\u0002\u0002\u08df\u0822',
	'\u0003\u0002\u0002\u0002\u08df\u0829\u0003\u0002\u0002\u0002\u08df\u082d',
	'\u0003\u0002\u0002\u0002\u08df\u082e\u0003\u0002\u0002\u0002\u08df\u0835',
	'\u0003\u0002\u0002\u0002\u08df\u0839\u0003\u0002\u0002\u0002\u08df\u083b',
	'\u0003\u0002\u0002\u0002\u08df\u084d\u0003\u0002\u0002\u0002\u08df\u0853',
	'\u0003\u0002\u0002\u0002\u08df\u0855\u0003\u0002\u0002\u0002\u08df\u085c',
	'\u0003\u0002\u0002\u0002\u08df\u085d\u0003\u0002\u0002\u0002\u08df\u0861',
	'\u0003\u0002\u0002\u0002\u08df\u0865\u0003\u0002\u0002\u0002\u08df\u0869',
	'\u0003\u0002\u0002\u0002\u08df\u086d\u0003\u0002\u0002\u0002\u08df\u0875',
	'\u0003\u0002\u0002\u0002\u08df\u087d\u0003\u0002\u0002\u0002\u08df\u0884',
	'\u0003\u0002\u0002\u0002\u08df\u0888\u0003\u0002\u0002\u0002\u08df\u088f',
	'\u0003\u0002\u0002\u0002\u08df\u0894\u0003\u0002\u0002\u0002\u08df\u0895',
	'\u0003\u0002\u0002\u0002\u08df\u0897\u0003\u0002\u0002\u0002\u08df\u08a1',
	'\u0003\u0002\u0002\u0002\u08df\u08a5\u0003\u0002\u0002\u0002\u08df\u08ac',
	'\u0003\u0002\u0002\u0002\u08df\u08b0\u0003\u0002\u0002\u0002\u08df\u08b4',
	'\u0003\u0002\u0002\u0002\u08df\u08b9\u0003\u0002\u0002\u0002\u08df\u08be',
	'\u0003\u0002\u0002\u0002\u08df\u08bf\u0003\u0002\u0002\u0002\u08df\u08c0',
	'\u0003\u0002\u0002\u0002\u08df\u08c1\u0003\u0002\u0002\u0002\u08df\u08c2',
	'\u0003\u0002\u0002\u0002\u08df\u08c3\u0003\u0002\u0002\u0002\u08df\u08c4',
	'\u0003\u0002\u0002\u0002\u08df\u08c5\u0003\u0002\u0002\u0002\u08df\u08d0',
	'\u0003\u0002\u0002\u0002\u08df\u08db\u0003\u0002\u0002\u0002\u08e0\u0101',
	'\u0003\u0002\u0002\u0002\u08e1\u08e5\u0007\u013b\u0002\u0002\u08e2\u08e3',
	'\u0007\u0138\u0002\u0002\u08e3\u08e5\u0007\u00da\u0002\u0002\u08e4\u08e1',
	'\u0003\u0002\u0002\u0002\u08e4\u08e2\u0003\u0002\u0002\u0002\u08e5\u0103',
	'\u0003\u0002\u0002\u0002\u08e6\u08e9\u0007\u001d\u0002\u0002\u08e7\u08ea',
	'\u0005\u013c\u009f\u0002\u08e8\u08ea\u00071\u0002\u0002\u08e9\u08e7',
	'\u0003\u0002\u0002\u0002\u08e9\u08e8\u0003\u0002\u0002\u0002\u08ea\u08ec',
	'\u0003\u0002\u0002\u0002\u08eb\u08ed\u0007\u00da\u0002\u0002\u08ec\u08eb',
	'\u0003\u0002\u0002\u0002\u08ec\u08ed\u0003\u0002\u0002\u0002\u08ed\u08ee',
	'\u0003\u0002\u0002\u0002\u08ee\u08ef\u0007\u001e\u0002\u0002\u08ef\u0105',
	'\u0003\u0002\u0002\u0002\u08f0\u08f2\t*\u0002\u0002\u08f1\u08f0\u0003',
	'\u0002\u0002\u0002\u08f2\u08f3\u0003\u0002\u0002\u0002\u08f3\u08f1\u0003',
	'\u0002\u0002\u0002\u08f3\u08f4\u0003\u0002\u0002\u0002\u08f4\u0107\u0003',
	'\u0002\u0002\u0002\u08f5\u0904\u0005\u010a\u0086\u0002\u08f6\u0904\u0005',
	'\u010c\u0087\u0002\u08f7\u0904\u0007\u014d\u0002\u0002\u08f8\u08f9\u0005',
	'\u00e8u\u0002\u08f9\u08fb\u0005\u0112\u008a\u0002\u08fa\u08fc\u0007',
	'\u00ae\u0002\u0002\u08fb\u08fa\u0003\u0002\u0002\u0002\u08fb\u08fc\u0003',
	'\u0002\u0002\u0002\u08fc\u0904\u0003\u0002\u0002\u0002\u08fd\u0901\u0007',
	'\u00ae\u0002\u0002\u08fe\u08ff\u0005\u00e8u\u0002\u08ff\u0900\u0005',
	'\u0112\u008a\u0002\u0900\u0902\u0003\u0002\u0002\u0002\u0901\u08fe\u0003',
	'\u0002\u0002\u0002\u0901\u0902\u0003\u0002\u0002\u0002\u0902\u0904\u0003',
	'\u0002\u0002\u0002\u0903\u08f5\u0003\u0002\u0002\u0002\u0903\u08f6\u0003',
	'\u0002\u0002\u0002\u0903\u08f7\u0003\u0002\u0002\u0002\u0903\u08f8\u0003',
	'\u0002\u0002\u0002\u0903\u08fd\u0003\u0002\u0002\u0002\u0904\u0109\u0003',
	'\u0002\u0002\u0002\u0905\u0907\u0007\u00f4\u0002\u0002\u0906\u0908\u0007',
	'\u00ae\u0002\u0002\u0907\u0906\u0003\u0002\u0002\u0002\u0907\u0908\u0003',
	'\u0002\u0002\u0002\u0908\u090c\u0003\u0002\u0002\u0002\u0909\u090a\u0007',
	'\u00ae\u0002\u0002\u090a\u090c\u0007\u00f4\u0002\u0002\u090b\u0905\u0003',
	'\u0002\u0002\u0002\u090b\u0909\u0003\u0002\u0002\u0002\u090c\u010b\u0003',
	'\u0002\u0002\u0002\u090d\u090f\u0007\u014e\u0002\u0002\u090e\u0910\u0007',
	'\u00ae\u0002\u0002\u090f\u090e\u0003\u0002\u0002\u0002\u090f\u0910\u0003',
	'\u0002\u0002\u0002\u0910\u0914\u0003\u0002\u0002\u0002\u0911\u0912\u0007',
	'\u00ae\u0002\u0002\u0912\u0914\u0007\u014e\u0002\u0002\u0913\u090d\u0003',
	'\u0002\u0002\u0002\u0913\u0911\u0003\u0002\u0002\u0002\u0914\u010d\u0003',
	'\u0002\u0002\u0002\u0915\u0916\u0007\u001d\u0002\u0002\u0916\u0917\u0005',
	'\u0138\u009d\u0002\u0917\u0918\u0007\u001e\u0002\u0002\u0918\u010f\u0003',
	'\u0002\u0002\u0002\u0919\u091a\u0007\u001d\u0002\u0002\u091a\u091b\u0007',
	'0\u0002\u0002\u091b\u091c\u0007\u001e\u0002\u0002\u091c\u0111\u0003',
	'\u0002\u0002\u0002\u091d\u0921\u0005\u0154\u00ab\u0002\u091e\u0921\u0007',
	'\u00ae\u0002\u0002\u091f\u0921\u0007A\u0002\u0002\u0920\u091d\u0003',
	'\u0002\u0002\u0002\u0920\u091e\u0003\u0002\u0002\u0002\u0920\u091f\u0003',
	'\u0002\u0002\u0002\u0921\u0113\u0003\u0002\u0002\u0002\u0922\u0926\u0005',
	'\u0154\u00ab\u0002\u0923\u0926\u0007A\u0002\u0002\u0924\u0926\u0007',
	'\u00ae\u0002\u0002\u0925\u0922\u0003\u0002\u0002\u0002\u0925\u0923\u0003',
	'\u0002\u0002\u0002\u0925\u0924\u0003\u0002\u0002\u0002\u0926\u0115\u0003',
	'\u0002\u0002\u0002\u0927\u0928\u0007\u00b4\u0002\u0002\u0928\u0929\u0005',
	'\u0114\u008b\u0002\u0929\u0117\u0003\u0002\u0002\u0002\u092a\u092b\u0005',
	'\u00e8u\u0002\u092b\u092c\u0005\u0112\u008a\u0002\u092c\u0119\u0003',
	'\u0002\u0002\u0002\u092d\u092f\u0007\u008f\u0002\u0002\u092e\u0930\u0005',
	'\u011c\u008f\u0002\u092f\u092e\u0003\u0002\u0002\u0002\u0930\u0931\u0003',
	'\u0002\u0002\u0002\u0931\u092f\u0003\u0002\u0002\u0002\u0931\u0932\u0003',
	'\u0002\u0002\u0002\u0932\u011b\u0003\u0002\u0002\u0002\u0933\u0934\u0007',
	'\u014f\u0002\u0002\u0934\u0935\u0007W\u0002\u0002\u0935\u0940\u0005',
	'\u0144\u00a3\u0002\u0936\u0938\u0007\u0150\u0002\u0002\u0937\u0936\u0003',
	'\u0002\u0002\u0002\u0937\u0938\u0003\u0002\u0002\u0002\u0938\u0939\u0003',
	'\u0002\u0002\u0002\u0939\u093a\u0007\u0151\u0002\u0002\u093a\u093b\u0007',
	'W\u0002\u0002\u093b\u0940\u0005\u0144\u00a3\u0002\u093c\u093d\u0007',
	'\u0152\u0002\u0002\u093d\u093e\u0007W\u0002\u0002\u093e\u0940\u0005',
	'\u0144\u00a3\u0002\u093f\u0933\u0003\u0002\u0002\u0002\u093f\u0937\u0003',
	'\u0002\u0002\u0002\u093f\u093c\u0003\u0002\u0002\u0002\u0940\u011d\u0003',
	'\u0002\u0002\u0002\u0941\u0943\u0007\u0153\u0002\u0002\u0942\u0944\u0005',
	'\u0120\u0091\u0002\u0943\u0942\u0003\u0002\u0002\u0002\u0944\u0945\u0003',
	'\u0002\u0002\u0002\u0945\u0943\u0003\u0002\u0002\u0002\u0945\u0946\u0003',
	'\u0002\u0002\u0002\u0946\u011f\u0003\u0002\u0002\u0002\u0947\u0948\t',
	'+\u0002\u0002\u0948\u0949\u0007W\u0002\u0002\u0949\u094a\u0005\u0144',
	'\u00a3\u0002\u094a\u0121\u0003\u0002\u0002\u0002\u094b\u094c\u0007V',
	'\u0002\u0002\u094c\u094d\u0005\u012e\u0098\u0002\u094d\u0123\u0003\u0002',
	'\u0002\u0002\u094e\u094f\u0007\u001d\u0002\u0002\u094f\u0954\u0005\u012a',
	'\u0096\u0002\u0950\u0951\u0007\u001a\u0002\u0002\u0951\u0953\u0005\u012a',
	'\u0096\u0002\u0952\u0950\u0003\u0002\u0002\u0002\u0953\u0956\u0003\u0002',
	'\u0002\u0002\u0954\u0952\u0003\u0002\u0002\u0002\u0954\u0955\u0003\u0002',
	'\u0002\u0002\u0955\u0957\u0003\u0002\u0002\u0002\u0956\u0954\u0003\u0002',
	'\u0002\u0002\u0957\u0958\u0007\u001e\u0002\u0002\u0958\u0125\u0003\u0002',
	'\u0002\u0002\u0959\u095e\u0005\u0130\u0099\u0002\u095a\u095b\u0007\u001a',
	'\u0002\u0002\u095b\u095d\u0005\u0130\u0099\u0002\u095c\u095a\u0003\u0002',
	'\u0002\u0002\u095d\u0960\u0003\u0002\u0002\u0002\u095e\u095c\u0003\u0002',
	'\u0002\u0002\u095e\u095f\u0003\u0002\u0002\u0002\u095f\u0127\u0003\u0002',
	'\u0002\u0002\u0960\u095e\u0003\u0002\u0002\u0002\u0961\u0962\t,\u0002',
	'\u0002\u0962\u0129\u0003\u0002\u0002\u0002\u0963\u0966\u0005\u0128\u0095',
	'\u0002\u0964\u0966\u0005\u015c\u00af\u0002\u0965\u0963\u0003\u0002\u0002',
	'\u0002\u0965\u0964\u0003\u0002\u0002\u0002\u0966\u012b\u0003\u0002\u0002',
	'\u0002\u0967\u096c\u0005\u012a\u0096\u0002\u0968\u0969\u0007\u001a\u0002',
	'\u0002\u0969\u096b\u0005\u012a\u0096\u0002\u096a\u0968\u0003\u0002\u0002',
	'\u0002\u096b\u096e\u0003\u0002\u0002\u0002\u096c\u096a\u0003\u0002\u0002',
	'\u0002\u096c\u096d\u0003\u0002\u0002\u0002\u096d\u012d\u0003\u0002\u0002',
	'\u0002\u096e\u096c\u0003\u0002\u0002\u0002\u096f\u0970\u0007\u001d\u0002',
	'\u0002\u0970\u0971\u0005\u012c\u0097\u0002\u0971\u0972\u0007\u001e\u0002',
	'\u0002\u0972\u012f\u0003\u0002\u0002\u0002\u0973\u0978\u0005\u012a\u0096',
	'\u0002\u0974\u0975\u0007\u0019\u0002\u0002\u0975\u0977\u0005\u012a\u0096',
	'\u0002\u0976\u0974\u0003\u0002\u0002\u0002\u0977\u097a\u0003\u0002\u0002',
	'\u0002\u0978\u0976\u0003\u0002\u0002\u0002\u0978\u0979\u0003\u0002\u0002',
	'\u0002\u0979\u097d\u0003\u0002\u0002\u0002\u097a\u0978\u0003\u0002\u0002',
	'\u0002\u097b\u097c\u0007\u0019\u0002\u0002\u097c\u097e\u0007\r\u0002',
	'\u0002\u097d\u097b\u0003\u0002\u0002\u0002\u097d\u097e\u0003\u0002\u0002',
	'\u0002\u097e\u0131\u0003\u0002\u0002\u0002\u097f\u0980\u0005\u0130\u0099',
	'\u0002\u0980\u0981\u0007\u001c\u0002\u0002\u0981\u0987\u0005\u012a\u0096',
	'\u0002\u0982\u0983\t-\u0002\u0002\u0983\u0986\u0005\u012a\u0096\u0002',
	'\u0984\u0986\u0007\u0164\u0002\u0002\u0985\u0982\u0003\u0002\u0002\u0002',
	'\u0985\u0984\u0003\u0002\u0002\u0002\u0986\u0989\u0003\u0002\u0002\u0002',
	'\u0987\u0985\u0003\u0002\u0002\u0002\u0987\u0988\u0003\u0002\u0002\u0002',
	'\u0988\u098c\u0003\u0002\u0002\u0002\u0989\u0987\u0003\u0002\u0002\u0002',
	'\u098a\u098b\u0007-\u0002\u0002\u098b\u098d\u0005\u0100\u0081\u0002',
	'\u098c\u098a\u0003\u0002\u0002\u0002\u098c\u098d\u0003\u0002\u0002\u0002',
	'\u098d\u0992\u0003\u0002\u0002\u0002\u098e\u0990\u0007\u00b4\u0002\u0002',
	'\u098f\u0991\u0005\u012a\u0096\u0002\u0990\u098f\u0003\u0002\u0002\u0002',
	'\u0990\u0991\u0003\u0002\u0002\u0002\u0991\u0993\u0003\u0002\u0002\u0002',
	'\u0992\u098e\u0003\u0002\u0002\u0002\u0992\u0993\u0003\u0002\u0002\u0002',
	'\u0993\u0133\u0003\u0002\u0002\u0002\u0994\u0995\u0007\u0019\u0002\u0002',
	'\u0995\u0996\u0005\u012a\u0096\u0002\u0996\u0135\u0003\u0002\u0002\u0002',
	'\u0997\u0998\t.\u0002\u0002\u0998\u0137\u0003\u0002\u0002\u0002\u0999',
	'\u099a\t/\u0002\u0002\u099a\u0139\u0003\u0002\u0002\u0002\u099b\u099c',
	'\t0\u0002\u0002\u099c\u013b\u0003\u0002\u0002\u0002\u099d\u099e\t/\u0002',
	'\u0002\u099e\u013d\u0003\u0002\u0002\u0002\u099f\u09a9\u0005\u0146\u00a4',
	'\u0002\u09a0\u09a9\u0005\u0148\u00a5\u0002\u09a1\u09a9\u0005\u014e\u00a8',
	'\u0002\u09a2\u09a9\u0005\u014c\u00a7\u0002\u09a3\u09a9\u0005\u014a\u00a6',
	'\u0002\u09a4\u09a6\u0007\u015e\u0002\u0002\u09a5\u09a4\u0003\u0002\u0002',
	'\u0002\u09a5\u09a6\u0003\u0002\u0002\u0002\u09a6\u09a7\u0003\u0002\u0002',
	'\u0002\u09a7\u09a9\t1\u0002\u0002\u09a8\u099f\u0003\u0002\u0002\u0002',
	'\u09a8\u09a0\u0003\u0002\u0002\u0002\u09a8\u09a1\u0003\u0002\u0002\u0002',
	'\u09a8\u09a2\u0003\u0002\u0002\u0002\u09a8\u09a3\u0003\u0002\u0002\u0002',
	'\u09a8\u09a5\u0003\u0002\u0002\u0002\u09a9\u013f\u0003\u0002\u0002\u0002',
	'\u09aa\u09ab\u0007\u001d\u0002\u0002\u09ab\u09b0\u0005\u0144\u00a3\u0002',
	'\u09ac\u09ad\u0007\u001a\u0002\u0002\u09ad\u09af\u0005\u0144\u00a3\u0002',
	'\u09ae\u09ac\u0003\u0002\u0002\u0002\u09af\u09b2\u0003\u0002\u0002\u0002',
	'\u09b0\u09ae\u0003\u0002\u0002\u0002\u09b0\u09b1\u0003\u0002\u0002\u0002',
	'\u09b1\u09b3\u0003\u0002\u0002\u0002\u09b2\u09b0\u0003\u0002\u0002\u0002',
	'\u09b3\u09b4\u0007\u001e\u0002\u0002\u09b4\u0141\u0003\u0002\u0002\u0002',
	'\u09b5\u09b6\t2\u0002\u0002\u09b6\u0143\u0003\u0002\u0002\u0002\u09b7',
	'\u09bb\u0005\u0142\u00a2\u0002\u09b8\u09bb\u0007.\u0002\u0002\u09b9',
	'\u09bb\u0007/\u0002\u0002\u09ba\u09b7\u0003\u0002\u0002\u0002\u09ba',
	'\u09b8\u0003\u0002\u0002\u0002\u09ba\u09b9\u0003\u0002\u0002\u0002\u09bb',
	'\u0145\u0003\u0002\u0002\u0002\u09bc\u09be\u0007\u015e\u0002\u0002\u09bd',
	'\u09bc\u0003\u0002\u0002\u0002\u09bd\u09be\u0003\u0002\u0002\u0002\u09be',
	'\u09bf\u0003\u0002\u0002\u0002\u09bf\u09c2\u0005\u0142\u00a2\u0002\u09c0',
	'\u09c2\u0007\u0160\u0002\u0002\u09c1\u09bd\u0003\u0002\u0002\u0002\u09c1',
	'\u09c0\u0003\u0002\u0002\u0002\u09c2\u09c6\u0003\u0002\u0002\u0002\u09c3',
	'\u09c5\u0005\u0142\u00a2\u0002\u09c4\u09c3\u0003\u0002\u0002\u0002\u09c5',
	'\u09c8\u0003\u0002\u0002\u0002\u09c6\u09c4\u0003\u0002\u0002\u0002\u09c6',
	'\u09c7\u0003\u0002\u0002\u0002\u09c7\u0147\u0003\u0002\u0002\u0002\u09c8',
	'\u09c6\u0003\u0002\u0002\u0002\u09c9\u09ca\t0\u0002\u0002\u09ca\u0149',
	'\u0003\u0002\u0002\u0002\u09cb\u09cc\t3\u0002\u0002\u09cc\u014b\u0003',
	'\u0002\u0002\u0002\u09cd\u09ce\t4\u0002\u0002\u09ce\u014d\u0003\u0002',
	'\u0002\u0002\u09cf\u09d0\u0007\u00dc\u0002\u0002\u09d0\u09d6\u0007\u0163',
	'\u0002\u0002\u09d1\u09d2\u0007\u00de\u0002\u0002\u09d2\u09d6\u0007\u0163',
	'\u0002\u0002\u09d3\u09d4\u0007\u00df\u0002\u0002\u09d4\u09d6\u0007\u0163',
	'\u0002\u0002\u09d5\u09cf\u0003\u0002\u0002\u0002\u09d5\u09d1\u0003\u0002',
	'\u0002\u0002\u09d5\u09d3\u0003\u0002\u0002\u0002\u09d6\u014f\u0003\u0002',
	'\u0002\u0002\u09d7\u09da\u0005\u0104\u0083\u0002\u09d8\u09da\u0005\u0152',
	'\u00aa\u0002\u09d9\u09d7\u0003\u0002\u0002\u0002\u09d9\u09d8\u0003\u0002',
	'\u0002\u0002\u09da\u0151\u0003\u0002\u0002\u0002\u09db\u09dc\u0007\u001d',
	'\u0002\u0002\u09dc\u09dd\u00070\u0002\u0002\u09dd\u09de\u0007\u001a',
	'\u0002\u0002\u09de\u09df\u00070\u0002\u0002\u09df\u09e0\u0007\u001e',
	'\u0002\u0002\u09e0\u0153\u0003\u0002\u0002\u0002\u09e1\u09e4\u0005\u012a',
	'\u0096\u0002\u09e2\u09e4\u0005\u0142\u00a2\u0002\u09e3\u09e1\u0003\u0002',
	'\u0002\u0002\u09e3\u09e2\u0003\u0002\u0002\u0002\u09e4\u0155\u0003\u0002',
	'\u0002\u0002\u09e5\u09e6\u0007\u001d\u0002\u0002\u09e6\u09e7\u0007\u001e',
	'\u0002\u0002\u09e7\u0157\u0003\u0002\u0002\u0002\u09e8\u09e9\t5\u0002',
	'\u0002\u09e9\u0159\u0003\u0002\u0002\u0002\u09ea\u09eb\u0007\u0155\u0002',
	'\u0002\u09eb\u09f1\u0007\u0019\u0002\u0002\u09ec\u09ed\u0007\u0156\u0002',
	'\u0002\u09ed\u09f1\u0007\u0019\u0002\u0002\u09ee\u09ef\u0007\u0157\u0002',
	'\u0002\u09ef\u09f1\u0007\u0019\u0002\u0002\u09f0\u09ea\u0003\u0002\u0002',
	'\u0002\u09f0\u09ec\u0003\u0002\u0002\u0002\u09f0\u09ee\u0003\u0002\u0002',
	'\u0002\u09f1\u015b\u0003\u0002\u0002\u0002\u09f2\u09f3\t6\u0002\u0002',
	'\u09f3\u015d\u0003\u0002\u0002\u0002\u014b\u015f\u0164\u0167\u016b\u0170',
	'\u0174\u0179\u017d\u0186\u018b\u018e\u0192\u0195\u0199\u019c\u019e\u01a1',
	'\u01a7\u01ab\u01ad\u01b1\u01b5\u01b9\u01c0\u01c2\u01c9\u01cf\u01d4\u01d7',
	'\u01da\u01df\u01e3\u01e6\u01e9\u01ec\u01f0\u0200\u0208\u020c\u0212\u0215',
	'\u0218\u021e\u0223\u0227\u022a\u0232\u0234\u0241\u024d\u0252\u0255\u0258',
	'\u025d\u0263\u0273\u0287\u0290\u0294\u029b\u02a0\u02a9\u02af\u02b5\u02bc',
	'\u02c3\u02cc\u02d5\u02df\u02e4\u02ea\u02ed\u02f3\u02fa\u02fe\u0304\u0309',
	'\u030c\u0310\u0312\u0315\u0319\u0325\u032a\u032f\u0336\u033f\u0347\u034c',
	'\u0350\u0356\u0359\u035c\u0360\u0364\u036d\u0371\u0374\u0377\u037c\u0382',
	'\u0385\u038a\u038d\u038f\u0394\u03a0\u03a9\u03b5\u03b8\u03bd\u03c4\u03c8',
	'\u03cc\u03ce\u03dc\u03e1\u03ea\u03f0\u03f9\u03fd\u0401\u040d\u0414\u0419',
	'\u041f\u0422\u0426\u0431\u0433\u043c\u0448\u044a\u0451\u0456\u045d\u0465',
	'\u0470\u0474\u048f\u0491\u0493\u049b\u049f\u04ae\u04b5\u04c3\u04cf\u04d5',
	'\u04dc\u04df\u0502\u050d\u050f\u0515\u051a\u051f\u0526\u052c\u0531\u0536',
	'\u053c\u0540\u0545\u054a\u054f\u0554\u055b\u0562\u0569\u0570\u0575\u057a',
	'\u057f\u0583\u0587\u058b\u058d\u05a0\u05a4\u05ab\u05b7\u05ba\u05be\u05c3',
	'\u05c8\u05cc\u05d6\u05df\u05e1\u05e4\u05ed\u05f4\u0601\u0606\u060d\u0613',
	'\u062d\u064c\u0660\u0666\u066a\u0685\u0691\u069e\u06a2\u06a6\u06c2\u06f8',
	'\u0702\u0705\u0711\u0716\u0722\u0736\u073a\u074a\u074d\u0752\u0755\u075e',
	'\u0762\u0768\u076e\u0772\u077d\u0783\u0785\u078c\u0793\u0796\u0798\u079c',
	'\u07a3\u07a8\u07ab\u07b2\u07ba\u07bf\u07c4\u07c8\u07cc\u07dc\u07e2\u07ea',
	'\u07ff\u0806\u080a\u0810\u0813\u0818\u081a\u081d\u0820\u0824\u0827\u082b',
	'\u0830\u0833\u0837\u083e\u084d\u0851\u0857\u085a\u085f\u0863\u0867\u086b',
	'\u0873\u087b\u0882\u0886\u088f\u0892\u089c\u089f\u08a3\u08a7\u08aa\u08ae',
	'\u08b2\u08b7\u08bc\u08cb\u08ce\u08d6\u08d9\u08dd\u08df\u08e4\u08e9\u08ec',
	'\u08f3\u08fb\u0901\u0903\u0907\u090b\u090f\u0913\u0920\u0925\u0931\u0937',
	'\u093f\u0945\u0954\u095e\u0965\u096c\u0978\u097d\u0985\u0987\u098c\u0990',
	'\u0992\u09a5\u09a8\u09b0\u09ba\u09bd\u09c1\u09c6\u09d5\u09d9\u09e3\u09f0',
].join('');

const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4.dfa.DFA(ds, index));

const sharedContextCache = new antlr4.PredictionContextCache();

class SQLSelectParser extends antlr4.Parser {
	static grammarFileName = 'SQLSelectParser.g4';
	static literalNames = [
		null,
		"'='",
		"':='",
		"'<=>'",
		"'>='",
		"'>'",
		"'<='",
		"'<'",
		null,
		"'+'",
		"'-'",
		"'*'",
		"'/'",
		"'%'",
		"'!'",
		"'~'",
		"'<<'",
		"'>>'",
		"'&&'",
		"'&'",
		"'^'",
		"'||'",
		"'|'",
		"'.'",
		"','",
		"';'",
		"':'",
		"'('",
		"')'",
		"'{'",
		"'}'",
		"'_'",
		"'['",
		"']'",
		"'{{'",
		"'}}'",
		"'->'",
		"'->>'",
		"'@'",
		null,
		"'@@'",
		"'\\N'",
		"'?'",
		"'::'",
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		null,
		"'/*!'",
		null,
		"'*/'",
	];
	static symbolicNames = [
		null,
		'EQUAL_OPERATOR',
		'ASSIGN_OPERATOR',
		'NULL_SAFE_EQUAL_OPERATOR',
		'GREATER_OR_EQUAL_OPERATOR',
		'GREATER_THAN_OPERATOR',
		'LESS_OR_EQUAL_OPERATOR',
		'LESS_THAN_OPERATOR',
		'NOT_EQUAL_OPERATOR',
		'PLUS_OPERATOR',
		'MINUS_OPERATOR',
		'MULT_OPERATOR',
		'DIV_OPERATOR',
		'MOD_OPERATOR',
		'LOGICAL_NOT_OPERATOR',
		'BITWISE_NOT_OPERATOR',
		'SHIFT_LEFT_OPERATOR',
		'SHIFT_RIGHT_OPERATOR',
		'LOGICAL_AND_OPERATOR',
		'BITWISE_AND_OPERATOR',
		'BITWISE_XOR_OPERATOR',
		'LOGICAL_OR_OPERATOR',
		'BITWISE_OR_OPERATOR',
		'DOT_SYMBOL',
		'COMMA_SYMBOL',
		'SEMICOLON_SYMBOL',
		'COLON_SYMBOL',
		'OPEN_PAR_SYMBOL',
		'CLOSE_PAR_SYMBOL',
		'OPEN_CURLY_SYMBOL',
		'CLOSE_CURLY_SYMBOL',
		'UNDERLINE_SYMBOL',
		'OPEN_BRACKET_SYMBOL',
		'CLOSE_BRACKET_SYMBOL',
		'OPEN_DOUBLE_CURLY_SYMBOL',
		'CLOSE_DOUBLE_CURLY_SYMBOL',
		'JSON_SEPARATOR_SYMBOL',
		'JSON_UNQUOTED_SEPARATOR_SYMBOL',
		'AT_SIGN_SYMBOL',
		'AT_TEXT_SUFFIX',
		'AT_AT_SIGN_SYMBOL',
		'NULL2_SYMBOL',
		'PARAM_MARKER',
		'CAST_COLON_SYMBOL',
		'HEX_NUMBER',
		'BIN_NUMBER',
		'INT_NUMBER',
		'DECIMAL_NUMBER',
		'FLOAT_NUMBER',
		'TINYINT_SYMBOL',
		'SMALLINT_SYMBOL',
		'MEDIUMINT_SYMBOL',
		'BYTE_INT_SYMBOL',
		'INT_SYMBOL',
		'BIGINT_SYMBOL',
		'SECOND_SYMBOL',
		'MINUTE_SYMBOL',
		'HOUR_SYMBOL',
		'DAY_SYMBOL',
		'WEEK_SYMBOL',
		'MONTH_SYMBOL',
		'QUARTER_SYMBOL',
		'YEAR_SYMBOL',
		'DEFAULT_SYMBOL',
		'UNION_SYMBOL',
		'SELECT_SYMBOL',
		'ALL_SYMBOL',
		'DISTINCT_SYMBOL',
		'STRAIGHT_JOIN_SYMBOL',
		'HIGH_PRIORITY_SYMBOL',
		'SQL_SMALL_RESULT_SYMBOL',
		'SQL_BIG_RESULT_SYMBOL',
		'SQL_BUFFER_RESULT_SYMBOL',
		'SQL_CALC_FOUND_ROWS_SYMBOL',
		'LIMIT_SYMBOL',
		'OFFSET_SYMBOL',
		'INTO_SYMBOL',
		'OUTFILE_SYMBOL',
		'DUMPFILE_SYMBOL',
		'PROCEDURE_SYMBOL',
		'ANALYSE_SYMBOL',
		'HAVING_SYMBOL',
		'WINDOW_SYMBOL',
		'AS_SYMBOL',
		'PARTITION_SYMBOL',
		'BY_SYMBOL',
		'ROWS_SYMBOL',
		'RANGE_SYMBOL',
		'GROUPS_SYMBOL',
		'UNBOUNDED_SYMBOL',
		'PRECEDING_SYMBOL',
		'INTERVAL_SYMBOL',
		'CURRENT_SYMBOL',
		'ROW_SYMBOL',
		'BETWEEN_SYMBOL',
		'AND_SYMBOL',
		'FOLLOWING_SYMBOL',
		'EXCLUDE_SYMBOL',
		'GROUP_SYMBOL',
		'TIES_SYMBOL',
		'NO_SYMBOL',
		'OTHERS_SYMBOL',
		'WITH_SYMBOL',
		'WITHOUT_SYMBOL',
		'RECURSIVE_SYMBOL',
		'ROLLUP_SYMBOL',
		'CUBE_SYMBOL',
		'ORDER_SYMBOL',
		'ASC_SYMBOL',
		'DESC_SYMBOL',
		'FROM_SYMBOL',
		'DUAL_SYMBOL',
		'VALUES_SYMBOL',
		'TABLE_SYMBOL',
		'SQL_NO_CACHE_SYMBOL',
		'SQL_CACHE_SYMBOL',
		'MAX_STATEMENT_TIME_SYMBOL',
		'FOR_SYMBOL',
		'OF_SYMBOL',
		'LOCK_SYMBOL',
		'IN_SYMBOL',
		'SHARE_SYMBOL',
		'MODE_SYMBOL',
		'UPDATE_SYMBOL',
		'SKIP_SYMBOL',
		'LOCKED_SYMBOL',
		'NOWAIT_SYMBOL',
		'WHERE_SYMBOL',
		'QUALIFY_SYMBOL',
		'OJ_SYMBOL',
		'ON_SYMBOL',
		'USING_SYMBOL',
		'NATURAL_SYMBOL',
		'INNER_SYMBOL',
		'JOIN_SYMBOL',
		'LEFT_SYMBOL',
		'RIGHT_SYMBOL',
		'OUTER_SYMBOL',
		'CROSS_SYMBOL',
		'LATERAL_SYMBOL',
		'JSON_TABLE_SYMBOL',
		'COLUMNS_SYMBOL',
		'ORDINALITY_SYMBOL',
		'EXISTS_SYMBOL',
		'PATH_SYMBOL',
		'NESTED_SYMBOL',
		'EMPTY_SYMBOL',
		'ERROR_SYMBOL',
		'NULL_SYMBOL',
		'USE_SYMBOL',
		'FORCE_SYMBOL',
		'IGNORE_SYMBOL',
		'KEY_SYMBOL',
		'INDEX_SYMBOL',
		'PRIMARY_SYMBOL',
		'IS_SYMBOL',
		'TRUE_SYMBOL',
		'FALSE_SYMBOL',
		'UNKNOWN_SYMBOL',
		'NOT_SYMBOL',
		'XOR_SYMBOL',
		'OR_SYMBOL',
		'ANY_SYMBOL',
		'MEMBER_SYMBOL',
		'SOUNDS_SYMBOL',
		'LIKE_SYMBOL',
		'ESCAPE_SYMBOL',
		'REGEXP_SYMBOL',
		'DIV_SYMBOL',
		'MOD_SYMBOL',
		'MATCH_SYMBOL',
		'AGAINST_SYMBOL',
		'BINARY_SYMBOL',
		'CAST_SYMBOL',
		'ARRAY_SYMBOL',
		'CASE_SYMBOL',
		'END_SYMBOL',
		'CONVERT_SYMBOL',
		'COLLATE_SYMBOL',
		'AVG_SYMBOL',
		'BIT_AND_SYMBOL',
		'BIT_OR_SYMBOL',
		'BIT_XOR_SYMBOL',
		'COUNT_SYMBOL',
		'MIN_SYMBOL',
		'MAX_SYMBOL',
		'STD_SYMBOL',
		'VARIANCE_SYMBOL',
		'STDDEV_SAMP_SYMBOL',
		'VAR_SAMP_SYMBOL',
		'SUM_SYMBOL',
		'GROUP_CONCAT_SYMBOL',
		'SEPARATOR_SYMBOL',
		'GROUPING_SYMBOL',
		'ROW_NUMBER_SYMBOL',
		'RANK_SYMBOL',
		'DENSE_RANK_SYMBOL',
		'CUME_DIST_SYMBOL',
		'PERCENT_RANK_SYMBOL',
		'NTILE_SYMBOL',
		'LEAD_SYMBOL',
		'LAG_SYMBOL',
		'FIRST_VALUE_SYMBOL',
		'LAST_VALUE_SYMBOL',
		'NTH_VALUE_SYMBOL',
		'FIRST_SYMBOL',
		'LAST_SYMBOL',
		'OVER_SYMBOL',
		'RESPECT_SYMBOL',
		'NULLS_SYMBOL',
		'JSON_ARRAYAGG_SYMBOL',
		'JSON_OBJECTAGG_SYMBOL',
		'BOOLEAN_SYMBOL',
		'LANGUAGE_SYMBOL',
		'QUERY_SYMBOL',
		'EXPANSION_SYMBOL',
		'CHAR_SYMBOL',
		'CURRENT_USER_SYMBOL',
		'DATE_SYMBOL',
		'INSERT_SYMBOL',
		'TIME_SYMBOL',
		'TIMESTAMP_SYMBOL',
		'TIMESTAMP_LTZ_SYMBOL',
		'TIMESTAMP_NTZ_SYMBOL',
		'ZONE_SYMBOL',
		'USER_SYMBOL',
		'ADDDATE_SYMBOL',
		'SUBDATE_SYMBOL',
		'CURDATE_SYMBOL',
		'CURTIME_SYMBOL',
		'DATE_ADD_SYMBOL',
		'DATE_SUB_SYMBOL',
		'EXTRACT_SYMBOL',
		'GET_FORMAT_SYMBOL',
		'NOW_SYMBOL',
		'POSITION_SYMBOL',
		'SYSDATE_SYMBOL',
		'TIMESTAMP_ADD_SYMBOL',
		'TIMESTAMP_DIFF_SYMBOL',
		'UTC_DATE_SYMBOL',
		'UTC_TIME_SYMBOL',
		'UTC_TIMESTAMP_SYMBOL',
		'ASCII_SYMBOL',
		'CHARSET_SYMBOL',
		'COALESCE_SYMBOL',
		'COLLATION_SYMBOL',
		'DATABASE_SYMBOL',
		'IF_SYMBOL',
		'FORMAT_SYMBOL',
		'MICROSECOND_SYMBOL',
		'OLD_PASSWORD_SYMBOL',
		'PASSWORD_SYMBOL',
		'REPEAT_SYMBOL',
		'REPLACE_SYMBOL',
		'REVERSE_SYMBOL',
		'ROW_COUNT_SYMBOL',
		'TRUNCATE_SYMBOL',
		'WEIGHT_STRING_SYMBOL',
		'CONTAINS_SYMBOL',
		'GEOMETRYCOLLECTION_SYMBOL',
		'LINESTRING_SYMBOL',
		'MULTILINESTRING_SYMBOL',
		'MULTIPOINT_SYMBOL',
		'MULTIPOLYGON_SYMBOL',
		'POINT_SYMBOL',
		'POLYGON_SYMBOL',
		'LEVEL_SYMBOL',
		'DATETIME_SYMBOL',
		'TRIM_SYMBOL',
		'LEADING_SYMBOL',
		'TRAILING_SYMBOL',
		'BOTH_SYMBOL',
		'STRING_SYMBOL',
		'SUBSTRING_SYMBOL',
		'WHEN_SYMBOL',
		'THEN_SYMBOL',
		'ELSE_SYMBOL',
		'SIGNED_SYMBOL',
		'UNSIGNED_SYMBOL',
		'DECIMAL_SYMBOL',
		'JSON_SYMBOL',
		'FLOAT_SYMBOL',
		'FLOAT_SYMBOL_4',
		'FLOAT_SYMBOL_8',
		'SET_SYMBOL',
		'SECOND_MICROSECOND_SYMBOL',
		'MINUTE_MICROSECOND_SYMBOL',
		'MINUTE_SECOND_SYMBOL',
		'HOUR_MICROSECOND_SYMBOL',
		'HOUR_SECOND_SYMBOL',
		'HOUR_MINUTE_SYMBOL',
		'DAY_MICROSECOND_SYMBOL',
		'DAY_SECOND_SYMBOL',
		'DAY_MINUTE_SYMBOL',
		'DAY_HOUR_SYMBOL',
		'YEAR_MONTH_SYMBOL',
		'BTREE_SYMBOL',
		'RTREE_SYMBOL',
		'HASH_SYMBOL',
		'REAL_SYMBOL',
		'DOUBLE_SYMBOL',
		'PRECISION_SYMBOL',
		'NUMERIC_SYMBOL',
		'NUMBER_SYMBOL',
		'FIXED_SYMBOL',
		'BIT_SYMBOL',
		'BOOL_SYMBOL',
		'VARYING_SYMBOL',
		'VARCHAR_SYMBOL',
		'VARCHAR2_SYMBOL',
		'NATIONAL_SYMBOL',
		'NVARCHAR_SYMBOL',
		'NVARCHAR2_SYMBOL',
		'NCHAR_SYMBOL',
		'VARBINARY_SYMBOL',
		'TINYBLOB_SYMBOL',
		'BLOB_SYMBOL',
		'CLOB_SYMBOL',
		'BFILE_SYMBOL',
		'RAW_SYMBOL',
		'MEDIUMBLOB_SYMBOL',
		'LONGBLOB_SYMBOL',
		'LONG_SYMBOL',
		'TINYTEXT_SYMBOL',
		'TEXT_SYMBOL',
		'MEDIUMTEXT_SYMBOL',
		'LONGTEXT_SYMBOL',
		'ENUM_SYMBOL',
		'SERIAL_SYMBOL',
		'GEOMETRY_SYMBOL',
		'ZEROFILL_SYMBOL',
		'BYTE_SYMBOL',
		'UNICODE_SYMBOL',
		'TERMINATED_SYMBOL',
		'OPTIONALLY_SYMBOL',
		'ENCLOSED_SYMBOL',
		'ESCAPED_SYMBOL',
		'LINES_SYMBOL',
		'STARTING_SYMBOL',
		'GLOBAL_SYMBOL',
		'LOCAL_SYMBOL',
		'SESSION_SYMBOL',
		'VARIANT_SYMBOL',
		'OBJECT_SYMBOL',
		'GEOGRAPHY_SYMBOL',
		'UNPIVOT_SYMBOL',
		'WHITESPACE',
		'INVALID_INPUT',
		'UNDERSCORE_CHARSET',
		'IDENTIFIER',
		'NCHAR_TEXT',
		'BACK_TICK_QUOTED_ID',
		'DOUBLE_QUOTED_TEXT',
		'SINGLE_QUOTED_TEXT',
		'BRACKET_QUOTED_TEXT',
		'BRACKET_QUOTED_NUMBER',
		'CURLY_BRACES_QUOTED_TEXT',
		'VERSION_COMMENT_START',
		'MYSQL_COMMENT_START',
		'SNOWFLAKE_COMMENT',
		'VERSION_COMMENT_END',
		'BLOCK_COMMENT',
		'POUND_COMMENT',
		'DASHDASH_COMMENT',
	];
	static ruleNames = [
		'query',
		'values',
		'selectStatement',
		'selectStatementWithInto',
		'queryExpression',
		'queryExpressionBody',
		'queryExpressionParens',
		'queryPrimary',
		'querySpecification',
		'subquery',
		'querySpecOption',
		'limitClause',
		'limitOptions',
		'limitOption',
		'intoClause',
		'procedureAnalyseClause',
		'havingClause',
		'windowClause',
		'windowDefinition',
		'windowSpec',
		'windowSpecDetails',
		'windowFrameClause',
		'windowFrameUnits',
		'windowFrameExtent',
		'windowFrameStart',
		'windowFrameBetween',
		'windowFrameBound',
		'windowFrameExclusion',
		'withClause',
		'commonTableExpression',
		'groupByClause',
		'olapOption',
		'orderClause',
		'direction',
		'fromClause',
		'tableReferenceList',
		'tableValueConstructor',
		'explicitTable',
		'rowValueExplicit',
		'selectOption',
		'lockingClauseList',
		'lockingClause',
		'lockStrengh',
		'lockedRowAction',
		'selectItemList',
		'selectItem',
		'selectAlias',
		'whereClause',
		'qualifyClause',
		'tableReference',
		'escapedTableReference',
		'joinedTable',
		'naturalJoinType',
		'innerJoinType',
		'outerJoinType',
		'tableFactor',
		'singleTable',
		'singleTableParens',
		'derivedTable',
		'tableReferenceListParens',
		'tableFunction',
		'columnsClause',
		'jtColumn',
		'onEmptyOrError',
		'onEmpty',
		'onError',
		'jtOnResponse',
		'unionOption',
		'tableAlias',
		'indexHintList',
		'indexHint',
		'indexHintType',
		'keyOrIndex',
		'indexHintClause',
		'indexList',
		'indexListElement',
		'expr',
		'boolPri',
		'compOp',
		'predicate',
		'predicateOperations',
		'bitExpr',
		'simpleExpr',
		'jsonOperator',
		'sumExpr',
		'groupingOperation',
		'windowFunctionCall',
		'windowingClause',
		'leadLagInfo',
		'nullTreatment',
		'jsonFunction',
		'inSumExpr',
		'identListArg',
		'identList',
		'fulltextOptions',
		'runtimeFunctionCall',
		'geometryFunction',
		'timeFunctionParameters',
		'fractionalPrecision',
		'weightStringLevels',
		'weightStringLevelListItem',
		'dateTimeTtype',
		'trimFunction',
		'substringFunction',
		'functionCall',
		'udfExprList',
		'udfExpr',
		'unpivotClause',
		'variable',
		'userVariable',
		'systemVariable',
		'whenExpression',
		'thenExpression',
		'elseExpression',
		'exprList',
		'charset',
		'notRule',
		'not2Rule',
		'interval',
		'intervalTimeStamp',
		'exprListWithParentheses',
		'exprWithParentheses',
		'simpleExprWithParentheses',
		'orderList',
		'nullsOrder',
		'orderExpression',
		'indexType',
		'dataType',
		'nchar',
		'fieldLength',
		'fieldOptions',
		'charsetWithOptBinary',
		'ascii',
		'unicode',
		'wsNumCodepoints',
		'typeDatetimePrecision',
		'charsetName',
		'collationName',
		'collate',
		'charsetClause',
		'fieldsClause',
		'fieldTerm',
		'linesClause',
		'lineTerm',
		'usePartition',
		'columnInternalRefList',
		'tableAliasRefList',
		'pureIdentifier',
		'identifier',
		'identifierList',
		'identifierListWithParentheses',
		'qualifiedIdentifier',
		'jsonPathIdentifier',
		'dotIdentifier',
		'ulong_number',
		'real_ulong_number',
		'ulonglong_number',
		'real_ulonglong_number',
		'literal',
		'stringList',
		'textStringLiteral',
		'textString',
		'textLiteral',
		'numLiteral',
		'boolLiteral',
		'nullLiteral',
		'temporalLiteral',
		'floatOptions',
		'precision',
		'textOrIdentifier',
		'parentheses',
		'equal',
		'varIdentType',
		'identifierKeyword',
	];

	constructor(input) {
		super(input);
		this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
		this.ruleNames = SQLSelectParser.ruleNames;
		this.literalNames = SQLSelectParser.literalNames;
		this.symbolicNames = SQLSelectParser.symbolicNames;
	}

	get atn() {
		return atn;
	}

	sempred(localctx, ruleIndex, predIndex) {
		switch (ruleIndex) {
			case 76:
				return this.expr_sempred(localctx, predIndex);
			case 77:
				return this.boolPri_sempred(localctx, predIndex);
			case 81:
				return this.bitExpr_sempred(localctx, predIndex);
			case 82:
				return this.simpleExpr_sempred(localctx, predIndex);
			default:
				throw 'No predicate with index:' + ruleIndex;
		}
	}

	expr_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 0:
				return this.precpred(this._ctx, 3);
			case 1:
				return this.precpred(this._ctx, 2);
			case 2:
				return this.precpred(this._ctx, 1);
			default:
				throw 'No predicate with index:' + predIndex;
		}
	}

	boolPri_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 3:
				return this.precpred(this._ctx, 3);
			case 4:
				return this.precpred(this._ctx, 2);
			case 5:
				return this.precpred(this._ctx, 1);
			default:
				throw 'No predicate with index:' + predIndex;
		}
	}

	bitExpr_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 6:
				return this.precpred(this._ctx, 7);
			case 7:
				return this.precpred(this._ctx, 6);
			case 8:
				return this.precpred(this._ctx, 4);
			case 9:
				return this.precpred(this._ctx, 3);
			case 10:
				return this.precpred(this._ctx, 2);
			case 11:
				return this.precpred(this._ctx, 5);
			default:
				throw 'No predicate with index:' + predIndex;
		}
	}

	simpleExpr_sempred(localctx, predIndex) {
		switch (predIndex) {
			case 12:
				return this.precpred(this._ctx, 17);
			case 13:
				return this.precpred(this._ctx, 23);
			case 14:
				return this.precpred(this._ctx, 8);
			default:
				throw 'No predicate with index:' + predIndex;
		}
	}

	query() {
		let localctx = new QueryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 0, SQLSelectParser.RULE_query);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 349;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
			if (la_ === 1) {
				this.state = 348;
				this.withClause();
			}
			this.state = 351;
			this.selectStatement();
			this.state = 357;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.SEMICOLON_SYMBOL:
					this.state = 352;
					this.match(SQLSelectParser.SEMICOLON_SYMBOL);
					this.state = 354;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
					if (la_ === 1) {
						this.state = 353;
						this.match(SQLSelectParser.EOF);
					}
					break;
				case SQLSelectParser.EOF:
					this.state = 356;
					this.match(SQLSelectParser.EOF);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	values() {
		let localctx = new ValuesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 2, SQLSelectParser.RULE_values);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 361;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 3, this._ctx);
			switch (la_) {
				case 1:
					this.state = 359;
					this.expr(0);
					break;

				case 2:
					this.state = 360;
					this.match(SQLSelectParser.DEFAULT_SYMBOL);
					break;
			}
			this.state = 370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 363;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 366;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 4, this._ctx);
				switch (la_) {
					case 1:
						this.state = 364;
						this.expr(0);
						break;

					case 2:
						this.state = 365;
						this.match(SQLSelectParser.DEFAULT_SYMBOL);
						break;
				}
				this.state = 372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	selectStatement() {
		let localctx = new SelectStatementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 4, SQLSelectParser.RULE_selectStatement);
		var _la = 0; // Token type
		try {
			this.state = 379;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 7, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 373;
					this.queryExpression();
					this.state = 375;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.FOR_SYMBOL || _la === SQLSelectParser.LOCK_SYMBOL) {
						this.state = 374;
						this.lockingClauseList();
					}

					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 377;
					this.queryExpressionParens();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 378;
					this.selectStatementWithInto();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	selectStatementWithInto() {
		let localctx = new SelectStatementWithIntoContext(this, this._ctx, this.state);
		this.enterRule(localctx, 6, SQLSelectParser.RULE_selectStatementWithInto);
		var _la = 0; // Token type
		try {
			this.state = 393;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 9, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 381;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 382;
					this.selectStatementWithInto();
					this.state = 383;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 385;
					this.queryExpression();
					this.state = 386;
					this.intoClause();
					this.state = 388;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.FOR_SYMBOL || _la === SQLSelectParser.LOCK_SYMBOL) {
						this.state = 387;
						this.lockingClauseList();
					}

					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 390;
					this.lockingClauseList();
					this.state = 391;
					this.intoClause();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	queryExpression() {
		let localctx = new QueryExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 8, SQLSelectParser.RULE_queryExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.WITH_SYMBOL) {
				this.state = 395;
				this.withClause();
			}

			this.state = 412;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 15, this._ctx);
			switch (la_) {
				case 1:
					this.state = 398;
					this.queryExpressionBody();
					this.state = 400;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.ORDER_SYMBOL) {
						this.state = 399;
						this.orderClause();
					}

					this.state = 403;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.LIMIT_SYMBOL) {
						this.state = 402;
						this.limitClause();
					}

					break;

				case 2:
					this.state = 405;
					this.queryExpressionParens();
					this.state = 407;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.ORDER_SYMBOL) {
						this.state = 406;
						this.orderClause();
					}

					this.state = 410;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.LIMIT_SYMBOL) {
						this.state = 409;
						this.limitClause();
					}

					break;
			}
			this.state = 415;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.PROCEDURE_SYMBOL) {
				this.state = 414;
				this.procedureAnalyseClause();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	queryExpressionBody() {
		let localctx = new QueryExpressionBodyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 10, SQLSelectParser.RULE_queryExpressionBody);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 427;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.SELECT_SYMBOL:
				case SQLSelectParser.VALUES_SYMBOL:
				case SQLSelectParser.TABLE_SYMBOL:
					this.state = 417;
					this.queryPrimary();
					break;
				case SQLSelectParser.OPEN_PAR_SYMBOL:
					this.state = 418;
					this.queryExpressionParens();
					this.state = 419;
					this.match(SQLSelectParser.UNION_SYMBOL);
					this.state = 421;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.ALL_SYMBOL || _la === SQLSelectParser.DISTINCT_SYMBOL) {
						this.state = 420;
						this.unionOption();
					}

					this.state = 425;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLSelectParser.SELECT_SYMBOL:
						case SQLSelectParser.VALUES_SYMBOL:
						case SQLSelectParser.TABLE_SYMBOL:
							this.state = 423;
							this.queryPrimary();
							break;
						case SQLSelectParser.OPEN_PAR_SYMBOL:
							this.state = 424;
							this.queryExpressionParens();
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 439;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.UNION_SYMBOL) {
				this.state = 429;
				this.match(SQLSelectParser.UNION_SYMBOL);
				this.state = 431;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SQLSelectParser.ALL_SYMBOL || _la === SQLSelectParser.DISTINCT_SYMBOL) {
					this.state = 430;
					this.unionOption();
				}

				this.state = 435;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
					case SQLSelectParser.SELECT_SYMBOL:
					case SQLSelectParser.VALUES_SYMBOL:
					case SQLSelectParser.TABLE_SYMBOL:
						this.state = 433;
						this.queryPrimary();
						break;
					case SQLSelectParser.OPEN_PAR_SYMBOL:
						this.state = 434;
						this.queryExpressionParens();
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 441;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	queryExpressionParens() {
		let localctx = new QueryExpressionParensContext(this, this._ctx, this.state);
		this.enterRule(localctx, 12, SQLSelectParser.RULE_queryExpressionParens);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 442;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 448;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 24, this._ctx);
			switch (la_) {
				case 1:
					this.state = 443;
					this.queryExpressionParens();
					break;

				case 2:
					this.state = 444;
					this.queryExpression();
					this.state = 446;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.FOR_SYMBOL || _la === SQLSelectParser.LOCK_SYMBOL) {
						this.state = 445;
						this.lockingClauseList();
					}

					break;
			}
			this.state = 450;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	queryPrimary() {
		let localctx = new QueryPrimaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 14, SQLSelectParser.RULE_queryPrimary);
		try {
			this.state = 455;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.SELECT_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 452;
					this.querySpecification();
					break;
				case SQLSelectParser.VALUES_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 453;
					this.tableValueConstructor();
					break;
				case SQLSelectParser.TABLE_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 454;
					this.explicitTable();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	querySpecification() {
		let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 16, SQLSelectParser.RULE_querySpecification);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 457;
			this.match(SQLSelectParser.SELECT_SYMBOL);
			this.state = 461;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 458;
					this.selectOption();
				}
				this.state = 463;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 26, this._ctx);
			}

			this.state = 464;
			this.selectItemList();
			this.state = 466;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 27, this._ctx);
			if (la_ === 1) {
				this.state = 465;
				this.intoClause();
			}
			this.state = 469;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.FROM_SYMBOL) {
				this.state = 468;
				this.fromClause();
			}

			this.state = 472;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.WHERE_SYMBOL) {
				this.state = 471;
				this.whereClause();
			}

			this.state = 477;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.UNPIVOT_SYMBOL) {
				this.state = 474;
				this.unpivotClause();
				this.state = 479;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 481;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.QUALIFY_SYMBOL) {
				this.state = 480;
				this.qualifyClause();
			}

			this.state = 484;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.GROUP_SYMBOL) {
				this.state = 483;
				this.groupByClause();
			}

			this.state = 487;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.HAVING_SYMBOL) {
				this.state = 486;
				this.havingClause();
			}

			this.state = 490;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.WINDOW_SYMBOL) {
				this.state = 489;
				this.windowClause();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	subquery() {
		let localctx = new SubqueryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 18, SQLSelectParser.RULE_subquery);
		try {
			this.state = 494;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 492;
					this.query();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 493;
					this.queryExpressionParens();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	querySpecOption() {
		let localctx = new QuerySpecOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 20, SQLSelectParser.RULE_querySpecOption);
		try {
			this.state = 510;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 36, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 496;
					this.match(SQLSelectParser.ALL_SYMBOL);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 497;
					this.match(SQLSelectParser.DISTINCT_SYMBOL);
					this.state = 498;
					this.match(SQLSelectParser.ON_SYMBOL);
					this.state = 499;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 500;
					this.qualifiedIdentifier();
					this.state = 501;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 503;
					this.match(SQLSelectParser.DISTINCT_SYMBOL);
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 504;
					this.match(SQLSelectParser.STRAIGHT_JOIN_SYMBOL);
					break;

				case 5:
					this.enterOuterAlt(localctx, 5);
					this.state = 505;
					this.match(SQLSelectParser.HIGH_PRIORITY_SYMBOL);
					break;

				case 6:
					this.enterOuterAlt(localctx, 6);
					this.state = 506;
					this.match(SQLSelectParser.SQL_SMALL_RESULT_SYMBOL);
					break;

				case 7:
					this.enterOuterAlt(localctx, 7);
					this.state = 507;
					this.match(SQLSelectParser.SQL_BIG_RESULT_SYMBOL);
					break;

				case 8:
					this.enterOuterAlt(localctx, 8);
					this.state = 508;
					this.match(SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL);
					break;

				case 9:
					this.enterOuterAlt(localctx, 9);
					this.state = 509;
					this.match(SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	limitClause() {
		let localctx = new LimitClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 22, SQLSelectParser.RULE_limitClause);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 512;
			this.match(SQLSelectParser.LIMIT_SYMBOL);
			this.state = 513;
			this.limitOptions();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	limitOptions() {
		let localctx = new LimitOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 24, SQLSelectParser.RULE_limitOptions);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 515;
			this.limitOption();
			this.state = 518;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.COMMA_SYMBOL || _la === SQLSelectParser.OFFSET_SYMBOL) {
				this.state = 516;
				_la = this._input.LA(1);
				if (!(_la === SQLSelectParser.COMMA_SYMBOL || _la === SQLSelectParser.OFFSET_SYMBOL)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 517;
				this.limitOption();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	limitOption() {
		let localctx = new LimitOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 26, SQLSelectParser.RULE_limitOption);
		var _la = 0; // Token type
		try {
			this.state = 522;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.TINYINT_SYMBOL:
				case SQLSelectParser.SMALLINT_SYMBOL:
				case SQLSelectParser.MEDIUMINT_SYMBOL:
				case SQLSelectParser.BYTE_INT_SYMBOL:
				case SQLSelectParser.INT_SYMBOL:
				case SQLSelectParser.BIGINT_SYMBOL:
				case SQLSelectParser.SECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SYMBOL:
				case SQLSelectParser.HOUR_SYMBOL:
				case SQLSelectParser.DAY_SYMBOL:
				case SQLSelectParser.WEEK_SYMBOL:
				case SQLSelectParser.MONTH_SYMBOL:
				case SQLSelectParser.QUARTER_SYMBOL:
				case SQLSelectParser.YEAR_SYMBOL:
				case SQLSelectParser.DEFAULT_SYMBOL:
				case SQLSelectParser.UNION_SYMBOL:
				case SQLSelectParser.SELECT_SYMBOL:
				case SQLSelectParser.ALL_SYMBOL:
				case SQLSelectParser.DISTINCT_SYMBOL:
				case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
				case SQLSelectParser.HIGH_PRIORITY_SYMBOL:
				case SQLSelectParser.SQL_SMALL_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BIG_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL:
				case SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL:
				case SQLSelectParser.LIMIT_SYMBOL:
				case SQLSelectParser.OFFSET_SYMBOL:
				case SQLSelectParser.INTO_SYMBOL:
				case SQLSelectParser.OUTFILE_SYMBOL:
				case SQLSelectParser.DUMPFILE_SYMBOL:
				case SQLSelectParser.PROCEDURE_SYMBOL:
				case SQLSelectParser.ANALYSE_SYMBOL:
				case SQLSelectParser.HAVING_SYMBOL:
				case SQLSelectParser.WINDOW_SYMBOL:
				case SQLSelectParser.AS_SYMBOL:
				case SQLSelectParser.PARTITION_SYMBOL:
				case SQLSelectParser.BY_SYMBOL:
				case SQLSelectParser.ROWS_SYMBOL:
				case SQLSelectParser.RANGE_SYMBOL:
				case SQLSelectParser.GROUPS_SYMBOL:
				case SQLSelectParser.UNBOUNDED_SYMBOL:
				case SQLSelectParser.PRECEDING_SYMBOL:
				case SQLSelectParser.INTERVAL_SYMBOL:
				case SQLSelectParser.CURRENT_SYMBOL:
				case SQLSelectParser.ROW_SYMBOL:
				case SQLSelectParser.BETWEEN_SYMBOL:
				case SQLSelectParser.AND_SYMBOL:
				case SQLSelectParser.FOLLOWING_SYMBOL:
				case SQLSelectParser.EXCLUDE_SYMBOL:
				case SQLSelectParser.GROUP_SYMBOL:
				case SQLSelectParser.TIES_SYMBOL:
				case SQLSelectParser.NO_SYMBOL:
				case SQLSelectParser.OTHERS_SYMBOL:
				case SQLSelectParser.WITH_SYMBOL:
				case SQLSelectParser.WITHOUT_SYMBOL:
				case SQLSelectParser.RECURSIVE_SYMBOL:
				case SQLSelectParser.ROLLUP_SYMBOL:
				case SQLSelectParser.CUBE_SYMBOL:
				case SQLSelectParser.ORDER_SYMBOL:
				case SQLSelectParser.ASC_SYMBOL:
				case SQLSelectParser.DESC_SYMBOL:
				case SQLSelectParser.FROM_SYMBOL:
				case SQLSelectParser.DUAL_SYMBOL:
				case SQLSelectParser.VALUES_SYMBOL:
				case SQLSelectParser.TABLE_SYMBOL:
				case SQLSelectParser.SQL_NO_CACHE_SYMBOL:
				case SQLSelectParser.SQL_CACHE_SYMBOL:
				case SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL:
				case SQLSelectParser.FOR_SYMBOL:
				case SQLSelectParser.OF_SYMBOL:
				case SQLSelectParser.LOCK_SYMBOL:
				case SQLSelectParser.IN_SYMBOL:
				case SQLSelectParser.SHARE_SYMBOL:
				case SQLSelectParser.MODE_SYMBOL:
				case SQLSelectParser.UPDATE_SYMBOL:
				case SQLSelectParser.SKIP_SYMBOL:
				case SQLSelectParser.LOCKED_SYMBOL:
				case SQLSelectParser.NOWAIT_SYMBOL:
				case SQLSelectParser.WHERE_SYMBOL:
				case SQLSelectParser.OJ_SYMBOL:
				case SQLSelectParser.ON_SYMBOL:
				case SQLSelectParser.USING_SYMBOL:
				case SQLSelectParser.NATURAL_SYMBOL:
				case SQLSelectParser.INNER_SYMBOL:
				case SQLSelectParser.JOIN_SYMBOL:
				case SQLSelectParser.LEFT_SYMBOL:
				case SQLSelectParser.RIGHT_SYMBOL:
				case SQLSelectParser.OUTER_SYMBOL:
				case SQLSelectParser.CROSS_SYMBOL:
				case SQLSelectParser.LATERAL_SYMBOL:
				case SQLSelectParser.JSON_TABLE_SYMBOL:
				case SQLSelectParser.COLUMNS_SYMBOL:
				case SQLSelectParser.ORDINALITY_SYMBOL:
				case SQLSelectParser.EXISTS_SYMBOL:
				case SQLSelectParser.PATH_SYMBOL:
				case SQLSelectParser.NESTED_SYMBOL:
				case SQLSelectParser.EMPTY_SYMBOL:
				case SQLSelectParser.ERROR_SYMBOL:
				case SQLSelectParser.NULL_SYMBOL:
				case SQLSelectParser.USE_SYMBOL:
				case SQLSelectParser.FORCE_SYMBOL:
				case SQLSelectParser.IGNORE_SYMBOL:
				case SQLSelectParser.KEY_SYMBOL:
				case SQLSelectParser.INDEX_SYMBOL:
				case SQLSelectParser.PRIMARY_SYMBOL:
				case SQLSelectParser.IS_SYMBOL:
				case SQLSelectParser.TRUE_SYMBOL:
				case SQLSelectParser.FALSE_SYMBOL:
				case SQLSelectParser.UNKNOWN_SYMBOL:
				case SQLSelectParser.NOT_SYMBOL:
				case SQLSelectParser.XOR_SYMBOL:
				case SQLSelectParser.OR_SYMBOL:
				case SQLSelectParser.ANY_SYMBOL:
				case SQLSelectParser.MEMBER_SYMBOL:
				case SQLSelectParser.SOUNDS_SYMBOL:
				case SQLSelectParser.LIKE_SYMBOL:
				case SQLSelectParser.ESCAPE_SYMBOL:
				case SQLSelectParser.REGEXP_SYMBOL:
				case SQLSelectParser.DIV_SYMBOL:
				case SQLSelectParser.MOD_SYMBOL:
				case SQLSelectParser.MATCH_SYMBOL:
				case SQLSelectParser.AGAINST_SYMBOL:
				case SQLSelectParser.BINARY_SYMBOL:
				case SQLSelectParser.CAST_SYMBOL:
				case SQLSelectParser.ARRAY_SYMBOL:
				case SQLSelectParser.CASE_SYMBOL:
				case SQLSelectParser.END_SYMBOL:
				case SQLSelectParser.CONVERT_SYMBOL:
				case SQLSelectParser.COLLATE_SYMBOL:
				case SQLSelectParser.AVG_SYMBOL:
				case SQLSelectParser.BIT_AND_SYMBOL:
				case SQLSelectParser.BIT_OR_SYMBOL:
				case SQLSelectParser.BIT_XOR_SYMBOL:
				case SQLSelectParser.COUNT_SYMBOL:
				case SQLSelectParser.MIN_SYMBOL:
				case SQLSelectParser.MAX_SYMBOL:
				case SQLSelectParser.STD_SYMBOL:
				case SQLSelectParser.VARIANCE_SYMBOL:
				case SQLSelectParser.STDDEV_SAMP_SYMBOL:
				case SQLSelectParser.VAR_SAMP_SYMBOL:
				case SQLSelectParser.SUM_SYMBOL:
				case SQLSelectParser.GROUP_CONCAT_SYMBOL:
				case SQLSelectParser.SEPARATOR_SYMBOL:
				case SQLSelectParser.GROUPING_SYMBOL:
				case SQLSelectParser.ROW_NUMBER_SYMBOL:
				case SQLSelectParser.RANK_SYMBOL:
				case SQLSelectParser.DENSE_RANK_SYMBOL:
				case SQLSelectParser.CUME_DIST_SYMBOL:
				case SQLSelectParser.PERCENT_RANK_SYMBOL:
				case SQLSelectParser.NTILE_SYMBOL:
				case SQLSelectParser.LEAD_SYMBOL:
				case SQLSelectParser.LAG_SYMBOL:
				case SQLSelectParser.FIRST_VALUE_SYMBOL:
				case SQLSelectParser.LAST_VALUE_SYMBOL:
				case SQLSelectParser.NTH_VALUE_SYMBOL:
				case SQLSelectParser.FIRST_SYMBOL:
				case SQLSelectParser.LAST_SYMBOL:
				case SQLSelectParser.OVER_SYMBOL:
				case SQLSelectParser.RESPECT_SYMBOL:
				case SQLSelectParser.NULLS_SYMBOL:
				case SQLSelectParser.JSON_ARRAYAGG_SYMBOL:
				case SQLSelectParser.JSON_OBJECTAGG_SYMBOL:
				case SQLSelectParser.BOOLEAN_SYMBOL:
				case SQLSelectParser.LANGUAGE_SYMBOL:
				case SQLSelectParser.QUERY_SYMBOL:
				case SQLSelectParser.EXPANSION_SYMBOL:
				case SQLSelectParser.CHAR_SYMBOL:
				case SQLSelectParser.CURRENT_USER_SYMBOL:
				case SQLSelectParser.DATE_SYMBOL:
				case SQLSelectParser.INSERT_SYMBOL:
				case SQLSelectParser.TIME_SYMBOL:
				case SQLSelectParser.TIMESTAMP_SYMBOL:
				case SQLSelectParser.TIMESTAMP_LTZ_SYMBOL:
				case SQLSelectParser.TIMESTAMP_NTZ_SYMBOL:
				case SQLSelectParser.ZONE_SYMBOL:
				case SQLSelectParser.USER_SYMBOL:
				case SQLSelectParser.ADDDATE_SYMBOL:
				case SQLSelectParser.SUBDATE_SYMBOL:
				case SQLSelectParser.CURDATE_SYMBOL:
				case SQLSelectParser.CURTIME_SYMBOL:
				case SQLSelectParser.DATE_ADD_SYMBOL:
				case SQLSelectParser.DATE_SUB_SYMBOL:
				case SQLSelectParser.EXTRACT_SYMBOL:
				case SQLSelectParser.GET_FORMAT_SYMBOL:
				case SQLSelectParser.NOW_SYMBOL:
				case SQLSelectParser.POSITION_SYMBOL:
				case SQLSelectParser.SYSDATE_SYMBOL:
				case SQLSelectParser.TIMESTAMP_ADD_SYMBOL:
				case SQLSelectParser.TIMESTAMP_DIFF_SYMBOL:
				case SQLSelectParser.UTC_DATE_SYMBOL:
				case SQLSelectParser.UTC_TIME_SYMBOL:
				case SQLSelectParser.UTC_TIMESTAMP_SYMBOL:
				case SQLSelectParser.ASCII_SYMBOL:
				case SQLSelectParser.CHARSET_SYMBOL:
				case SQLSelectParser.COALESCE_SYMBOL:
				case SQLSelectParser.COLLATION_SYMBOL:
				case SQLSelectParser.DATABASE_SYMBOL:
				case SQLSelectParser.IF_SYMBOL:
				case SQLSelectParser.FORMAT_SYMBOL:
				case SQLSelectParser.MICROSECOND_SYMBOL:
				case SQLSelectParser.OLD_PASSWORD_SYMBOL:
				case SQLSelectParser.PASSWORD_SYMBOL:
				case SQLSelectParser.REPEAT_SYMBOL:
				case SQLSelectParser.REPLACE_SYMBOL:
				case SQLSelectParser.REVERSE_SYMBOL:
				case SQLSelectParser.ROW_COUNT_SYMBOL:
				case SQLSelectParser.TRUNCATE_SYMBOL:
				case SQLSelectParser.WEIGHT_STRING_SYMBOL:
				case SQLSelectParser.CONTAINS_SYMBOL:
				case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
				case SQLSelectParser.LINESTRING_SYMBOL:
				case SQLSelectParser.MULTILINESTRING_SYMBOL:
				case SQLSelectParser.MULTIPOINT_SYMBOL:
				case SQLSelectParser.MULTIPOLYGON_SYMBOL:
				case SQLSelectParser.POINT_SYMBOL:
				case SQLSelectParser.POLYGON_SYMBOL:
				case SQLSelectParser.LEVEL_SYMBOL:
				case SQLSelectParser.DATETIME_SYMBOL:
				case SQLSelectParser.TRIM_SYMBOL:
				case SQLSelectParser.LEADING_SYMBOL:
				case SQLSelectParser.TRAILING_SYMBOL:
				case SQLSelectParser.BOTH_SYMBOL:
				case SQLSelectParser.STRING_SYMBOL:
				case SQLSelectParser.SUBSTRING_SYMBOL:
				case SQLSelectParser.WHEN_SYMBOL:
				case SQLSelectParser.THEN_SYMBOL:
				case SQLSelectParser.ELSE_SYMBOL:
				case SQLSelectParser.SIGNED_SYMBOL:
				case SQLSelectParser.UNSIGNED_SYMBOL:
				case SQLSelectParser.DECIMAL_SYMBOL:
				case SQLSelectParser.JSON_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL_4:
				case SQLSelectParser.FLOAT_SYMBOL_8:
				case SQLSelectParser.SET_SYMBOL:
				case SQLSelectParser.SECOND_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MICROSECOND_SYMBOL:
				case SQLSelectParser.HOUR_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_MICROSECOND_SYMBOL:
				case SQLSelectParser.DAY_SECOND_SYMBOL:
				case SQLSelectParser.DAY_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_HOUR_SYMBOL:
				case SQLSelectParser.YEAR_MONTH_SYMBOL:
				case SQLSelectParser.BTREE_SYMBOL:
				case SQLSelectParser.RTREE_SYMBOL:
				case SQLSelectParser.HASH_SYMBOL:
				case SQLSelectParser.REAL_SYMBOL:
				case SQLSelectParser.DOUBLE_SYMBOL:
				case SQLSelectParser.PRECISION_SYMBOL:
				case SQLSelectParser.NUMERIC_SYMBOL:
				case SQLSelectParser.NUMBER_SYMBOL:
				case SQLSelectParser.FIXED_SYMBOL:
				case SQLSelectParser.BIT_SYMBOL:
				case SQLSelectParser.BOOL_SYMBOL:
				case SQLSelectParser.VARYING_SYMBOL:
				case SQLSelectParser.VARCHAR_SYMBOL:
				case SQLSelectParser.VARCHAR2_SYMBOL:
				case SQLSelectParser.NATIONAL_SYMBOL:
				case SQLSelectParser.NVARCHAR_SYMBOL:
				case SQLSelectParser.NVARCHAR2_SYMBOL:
				case SQLSelectParser.NCHAR_SYMBOL:
				case SQLSelectParser.VARBINARY_SYMBOL:
				case SQLSelectParser.TINYBLOB_SYMBOL:
				case SQLSelectParser.BLOB_SYMBOL:
				case SQLSelectParser.CLOB_SYMBOL:
				case SQLSelectParser.BFILE_SYMBOL:
				case SQLSelectParser.RAW_SYMBOL:
				case SQLSelectParser.MEDIUMBLOB_SYMBOL:
				case SQLSelectParser.LONGBLOB_SYMBOL:
				case SQLSelectParser.LONG_SYMBOL:
				case SQLSelectParser.TINYTEXT_SYMBOL:
				case SQLSelectParser.TEXT_SYMBOL:
				case SQLSelectParser.MEDIUMTEXT_SYMBOL:
				case SQLSelectParser.LONGTEXT_SYMBOL:
				case SQLSelectParser.ENUM_SYMBOL:
				case SQLSelectParser.SERIAL_SYMBOL:
				case SQLSelectParser.GEOMETRY_SYMBOL:
				case SQLSelectParser.ZEROFILL_SYMBOL:
				case SQLSelectParser.BYTE_SYMBOL:
				case SQLSelectParser.UNICODE_SYMBOL:
				case SQLSelectParser.TERMINATED_SYMBOL:
				case SQLSelectParser.OPTIONALLY_SYMBOL:
				case SQLSelectParser.ENCLOSED_SYMBOL:
				case SQLSelectParser.ESCAPED_SYMBOL:
				case SQLSelectParser.LINES_SYMBOL:
				case SQLSelectParser.STARTING_SYMBOL:
				case SQLSelectParser.GLOBAL_SYMBOL:
				case SQLSelectParser.LOCAL_SYMBOL:
				case SQLSelectParser.SESSION_SYMBOL:
				case SQLSelectParser.VARIANT_SYMBOL:
				case SQLSelectParser.OBJECT_SYMBOL:
				case SQLSelectParser.GEOGRAPHY_SYMBOL:
				case SQLSelectParser.UNDERSCORE_CHARSET:
				case SQLSelectParser.IDENTIFIER:
				case SQLSelectParser.BACK_TICK_QUOTED_ID:
				case SQLSelectParser.DOUBLE_QUOTED_TEXT:
				case SQLSelectParser.SINGLE_QUOTED_TEXT:
				case SQLSelectParser.BRACKET_QUOTED_TEXT:
				case SQLSelectParser.CURLY_BRACES_QUOTED_TEXT:
					this.enterOuterAlt(localctx, 1);
					this.state = 520;
					this.identifier();
					break;
				case SQLSelectParser.PARAM_MARKER:
				case SQLSelectParser.INT_NUMBER:
					this.enterOuterAlt(localctx, 2);
					this.state = 521;
					_la = this._input.LA(1);
					if (!(_la === SQLSelectParser.PARAM_MARKER || _la === SQLSelectParser.INT_NUMBER)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	intoClause() {
		let localctx = new IntoClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 28, SQLSelectParser.RULE_intoClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 524;
			this.match(SQLSelectParser.INTO_SYMBOL);
			this.state = 552;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);
			switch (la_) {
				case 1:
					this.state = 525;
					this.match(SQLSelectParser.OUTFILE_SYMBOL);
					this.state = 526;
					this.textStringLiteral();
					this.state = 528;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.CHAR_SYMBOL || _la === SQLSelectParser.CHARSET_SYMBOL) {
						this.state = 527;
						this.charsetClause();
					}

					this.state = 531;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.COLUMNS_SYMBOL) {
						this.state = 530;
						this.fieldsClause();
					}

					this.state = 534;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.LINES_SYMBOL) {
						this.state = 533;
						this.linesClause();
					}

					break;

				case 2:
					this.state = 536;
					this.match(SQLSelectParser.DUMPFILE_SYMBOL);
					this.state = 537;
					this.textStringLiteral();
					break;

				case 3:
					this.state = 540;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLSelectParser.TINYINT_SYMBOL:
						case SQLSelectParser.SMALLINT_SYMBOL:
						case SQLSelectParser.MEDIUMINT_SYMBOL:
						case SQLSelectParser.BYTE_INT_SYMBOL:
						case SQLSelectParser.INT_SYMBOL:
						case SQLSelectParser.BIGINT_SYMBOL:
						case SQLSelectParser.SECOND_SYMBOL:
						case SQLSelectParser.MINUTE_SYMBOL:
						case SQLSelectParser.HOUR_SYMBOL:
						case SQLSelectParser.DAY_SYMBOL:
						case SQLSelectParser.WEEK_SYMBOL:
						case SQLSelectParser.MONTH_SYMBOL:
						case SQLSelectParser.QUARTER_SYMBOL:
						case SQLSelectParser.YEAR_SYMBOL:
						case SQLSelectParser.DEFAULT_SYMBOL:
						case SQLSelectParser.UNION_SYMBOL:
						case SQLSelectParser.SELECT_SYMBOL:
						case SQLSelectParser.ALL_SYMBOL:
						case SQLSelectParser.DISTINCT_SYMBOL:
						case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
						case SQLSelectParser.HIGH_PRIORITY_SYMBOL:
						case SQLSelectParser.SQL_SMALL_RESULT_SYMBOL:
						case SQLSelectParser.SQL_BIG_RESULT_SYMBOL:
						case SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL:
						case SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL:
						case SQLSelectParser.LIMIT_SYMBOL:
						case SQLSelectParser.OFFSET_SYMBOL:
						case SQLSelectParser.INTO_SYMBOL:
						case SQLSelectParser.OUTFILE_SYMBOL:
						case SQLSelectParser.DUMPFILE_SYMBOL:
						case SQLSelectParser.PROCEDURE_SYMBOL:
						case SQLSelectParser.ANALYSE_SYMBOL:
						case SQLSelectParser.HAVING_SYMBOL:
						case SQLSelectParser.WINDOW_SYMBOL:
						case SQLSelectParser.AS_SYMBOL:
						case SQLSelectParser.PARTITION_SYMBOL:
						case SQLSelectParser.BY_SYMBOL:
						case SQLSelectParser.ROWS_SYMBOL:
						case SQLSelectParser.RANGE_SYMBOL:
						case SQLSelectParser.GROUPS_SYMBOL:
						case SQLSelectParser.UNBOUNDED_SYMBOL:
						case SQLSelectParser.PRECEDING_SYMBOL:
						case SQLSelectParser.INTERVAL_SYMBOL:
						case SQLSelectParser.CURRENT_SYMBOL:
						case SQLSelectParser.ROW_SYMBOL:
						case SQLSelectParser.BETWEEN_SYMBOL:
						case SQLSelectParser.AND_SYMBOL:
						case SQLSelectParser.FOLLOWING_SYMBOL:
						case SQLSelectParser.EXCLUDE_SYMBOL:
						case SQLSelectParser.GROUP_SYMBOL:
						case SQLSelectParser.TIES_SYMBOL:
						case SQLSelectParser.NO_SYMBOL:
						case SQLSelectParser.OTHERS_SYMBOL:
						case SQLSelectParser.WITH_SYMBOL:
						case SQLSelectParser.WITHOUT_SYMBOL:
						case SQLSelectParser.RECURSIVE_SYMBOL:
						case SQLSelectParser.ROLLUP_SYMBOL:
						case SQLSelectParser.CUBE_SYMBOL:
						case SQLSelectParser.ORDER_SYMBOL:
						case SQLSelectParser.ASC_SYMBOL:
						case SQLSelectParser.DESC_SYMBOL:
						case SQLSelectParser.FROM_SYMBOL:
						case SQLSelectParser.DUAL_SYMBOL:
						case SQLSelectParser.VALUES_SYMBOL:
						case SQLSelectParser.TABLE_SYMBOL:
						case SQLSelectParser.SQL_NO_CACHE_SYMBOL:
						case SQLSelectParser.SQL_CACHE_SYMBOL:
						case SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL:
						case SQLSelectParser.FOR_SYMBOL:
						case SQLSelectParser.OF_SYMBOL:
						case SQLSelectParser.LOCK_SYMBOL:
						case SQLSelectParser.IN_SYMBOL:
						case SQLSelectParser.SHARE_SYMBOL:
						case SQLSelectParser.MODE_SYMBOL:
						case SQLSelectParser.UPDATE_SYMBOL:
						case SQLSelectParser.SKIP_SYMBOL:
						case SQLSelectParser.LOCKED_SYMBOL:
						case SQLSelectParser.NOWAIT_SYMBOL:
						case SQLSelectParser.WHERE_SYMBOL:
						case SQLSelectParser.OJ_SYMBOL:
						case SQLSelectParser.ON_SYMBOL:
						case SQLSelectParser.USING_SYMBOL:
						case SQLSelectParser.NATURAL_SYMBOL:
						case SQLSelectParser.INNER_SYMBOL:
						case SQLSelectParser.JOIN_SYMBOL:
						case SQLSelectParser.LEFT_SYMBOL:
						case SQLSelectParser.RIGHT_SYMBOL:
						case SQLSelectParser.OUTER_SYMBOL:
						case SQLSelectParser.CROSS_SYMBOL:
						case SQLSelectParser.LATERAL_SYMBOL:
						case SQLSelectParser.JSON_TABLE_SYMBOL:
						case SQLSelectParser.COLUMNS_SYMBOL:
						case SQLSelectParser.ORDINALITY_SYMBOL:
						case SQLSelectParser.EXISTS_SYMBOL:
						case SQLSelectParser.PATH_SYMBOL:
						case SQLSelectParser.NESTED_SYMBOL:
						case SQLSelectParser.EMPTY_SYMBOL:
						case SQLSelectParser.ERROR_SYMBOL:
						case SQLSelectParser.NULL_SYMBOL:
						case SQLSelectParser.USE_SYMBOL:
						case SQLSelectParser.FORCE_SYMBOL:
						case SQLSelectParser.IGNORE_SYMBOL:
						case SQLSelectParser.KEY_SYMBOL:
						case SQLSelectParser.INDEX_SYMBOL:
						case SQLSelectParser.PRIMARY_SYMBOL:
						case SQLSelectParser.IS_SYMBOL:
						case SQLSelectParser.TRUE_SYMBOL:
						case SQLSelectParser.FALSE_SYMBOL:
						case SQLSelectParser.UNKNOWN_SYMBOL:
						case SQLSelectParser.NOT_SYMBOL:
						case SQLSelectParser.XOR_SYMBOL:
						case SQLSelectParser.OR_SYMBOL:
						case SQLSelectParser.ANY_SYMBOL:
						case SQLSelectParser.MEMBER_SYMBOL:
						case SQLSelectParser.SOUNDS_SYMBOL:
						case SQLSelectParser.LIKE_SYMBOL:
						case SQLSelectParser.ESCAPE_SYMBOL:
						case SQLSelectParser.REGEXP_SYMBOL:
						case SQLSelectParser.DIV_SYMBOL:
						case SQLSelectParser.MOD_SYMBOL:
						case SQLSelectParser.MATCH_SYMBOL:
						case SQLSelectParser.AGAINST_SYMBOL:
						case SQLSelectParser.BINARY_SYMBOL:
						case SQLSelectParser.CAST_SYMBOL:
						case SQLSelectParser.ARRAY_SYMBOL:
						case SQLSelectParser.CASE_SYMBOL:
						case SQLSelectParser.END_SYMBOL:
						case SQLSelectParser.CONVERT_SYMBOL:
						case SQLSelectParser.COLLATE_SYMBOL:
						case SQLSelectParser.AVG_SYMBOL:
						case SQLSelectParser.BIT_AND_SYMBOL:
						case SQLSelectParser.BIT_OR_SYMBOL:
						case SQLSelectParser.BIT_XOR_SYMBOL:
						case SQLSelectParser.COUNT_SYMBOL:
						case SQLSelectParser.MIN_SYMBOL:
						case SQLSelectParser.MAX_SYMBOL:
						case SQLSelectParser.STD_SYMBOL:
						case SQLSelectParser.VARIANCE_SYMBOL:
						case SQLSelectParser.STDDEV_SAMP_SYMBOL:
						case SQLSelectParser.VAR_SAMP_SYMBOL:
						case SQLSelectParser.SUM_SYMBOL:
						case SQLSelectParser.GROUP_CONCAT_SYMBOL:
						case SQLSelectParser.SEPARATOR_SYMBOL:
						case SQLSelectParser.GROUPING_SYMBOL:
						case SQLSelectParser.ROW_NUMBER_SYMBOL:
						case SQLSelectParser.RANK_SYMBOL:
						case SQLSelectParser.DENSE_RANK_SYMBOL:
						case SQLSelectParser.CUME_DIST_SYMBOL:
						case SQLSelectParser.PERCENT_RANK_SYMBOL:
						case SQLSelectParser.NTILE_SYMBOL:
						case SQLSelectParser.LEAD_SYMBOL:
						case SQLSelectParser.LAG_SYMBOL:
						case SQLSelectParser.FIRST_VALUE_SYMBOL:
						case SQLSelectParser.LAST_VALUE_SYMBOL:
						case SQLSelectParser.NTH_VALUE_SYMBOL:
						case SQLSelectParser.FIRST_SYMBOL:
						case SQLSelectParser.LAST_SYMBOL:
						case SQLSelectParser.OVER_SYMBOL:
						case SQLSelectParser.RESPECT_SYMBOL:
						case SQLSelectParser.NULLS_SYMBOL:
						case SQLSelectParser.JSON_ARRAYAGG_SYMBOL:
						case SQLSelectParser.JSON_OBJECTAGG_SYMBOL:
						case SQLSelectParser.BOOLEAN_SYMBOL:
						case SQLSelectParser.LANGUAGE_SYMBOL:
						case SQLSelectParser.QUERY_SYMBOL:
						case SQLSelectParser.EXPANSION_SYMBOL:
						case SQLSelectParser.CHAR_SYMBOL:
						case SQLSelectParser.CURRENT_USER_SYMBOL:
						case SQLSelectParser.DATE_SYMBOL:
						case SQLSelectParser.INSERT_SYMBOL:
						case SQLSelectParser.TIME_SYMBOL:
						case SQLSelectParser.TIMESTAMP_SYMBOL:
						case SQLSelectParser.TIMESTAMP_LTZ_SYMBOL:
						case SQLSelectParser.TIMESTAMP_NTZ_SYMBOL:
						case SQLSelectParser.ZONE_SYMBOL:
						case SQLSelectParser.USER_SYMBOL:
						case SQLSelectParser.ADDDATE_SYMBOL:
						case SQLSelectParser.SUBDATE_SYMBOL:
						case SQLSelectParser.CURDATE_SYMBOL:
						case SQLSelectParser.CURTIME_SYMBOL:
						case SQLSelectParser.DATE_ADD_SYMBOL:
						case SQLSelectParser.DATE_SUB_SYMBOL:
						case SQLSelectParser.EXTRACT_SYMBOL:
						case SQLSelectParser.GET_FORMAT_SYMBOL:
						case SQLSelectParser.NOW_SYMBOL:
						case SQLSelectParser.POSITION_SYMBOL:
						case SQLSelectParser.SYSDATE_SYMBOL:
						case SQLSelectParser.TIMESTAMP_ADD_SYMBOL:
						case SQLSelectParser.TIMESTAMP_DIFF_SYMBOL:
						case SQLSelectParser.UTC_DATE_SYMBOL:
						case SQLSelectParser.UTC_TIME_SYMBOL:
						case SQLSelectParser.UTC_TIMESTAMP_SYMBOL:
						case SQLSelectParser.ASCII_SYMBOL:
						case SQLSelectParser.CHARSET_SYMBOL:
						case SQLSelectParser.COALESCE_SYMBOL:
						case SQLSelectParser.COLLATION_SYMBOL:
						case SQLSelectParser.DATABASE_SYMBOL:
						case SQLSelectParser.IF_SYMBOL:
						case SQLSelectParser.FORMAT_SYMBOL:
						case SQLSelectParser.MICROSECOND_SYMBOL:
						case SQLSelectParser.OLD_PASSWORD_SYMBOL:
						case SQLSelectParser.PASSWORD_SYMBOL:
						case SQLSelectParser.REPEAT_SYMBOL:
						case SQLSelectParser.REPLACE_SYMBOL:
						case SQLSelectParser.REVERSE_SYMBOL:
						case SQLSelectParser.ROW_COUNT_SYMBOL:
						case SQLSelectParser.TRUNCATE_SYMBOL:
						case SQLSelectParser.WEIGHT_STRING_SYMBOL:
						case SQLSelectParser.CONTAINS_SYMBOL:
						case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
						case SQLSelectParser.LINESTRING_SYMBOL:
						case SQLSelectParser.MULTILINESTRING_SYMBOL:
						case SQLSelectParser.MULTIPOINT_SYMBOL:
						case SQLSelectParser.MULTIPOLYGON_SYMBOL:
						case SQLSelectParser.POINT_SYMBOL:
						case SQLSelectParser.POLYGON_SYMBOL:
						case SQLSelectParser.LEVEL_SYMBOL:
						case SQLSelectParser.DATETIME_SYMBOL:
						case SQLSelectParser.TRIM_SYMBOL:
						case SQLSelectParser.LEADING_SYMBOL:
						case SQLSelectParser.TRAILING_SYMBOL:
						case SQLSelectParser.BOTH_SYMBOL:
						case SQLSelectParser.STRING_SYMBOL:
						case SQLSelectParser.SUBSTRING_SYMBOL:
						case SQLSelectParser.WHEN_SYMBOL:
						case SQLSelectParser.THEN_SYMBOL:
						case SQLSelectParser.ELSE_SYMBOL:
						case SQLSelectParser.SIGNED_SYMBOL:
						case SQLSelectParser.UNSIGNED_SYMBOL:
						case SQLSelectParser.DECIMAL_SYMBOL:
						case SQLSelectParser.JSON_SYMBOL:
						case SQLSelectParser.FLOAT_SYMBOL:
						case SQLSelectParser.FLOAT_SYMBOL_4:
						case SQLSelectParser.FLOAT_SYMBOL_8:
						case SQLSelectParser.SET_SYMBOL:
						case SQLSelectParser.SECOND_MICROSECOND_SYMBOL:
						case SQLSelectParser.MINUTE_MICROSECOND_SYMBOL:
						case SQLSelectParser.MINUTE_SECOND_SYMBOL:
						case SQLSelectParser.HOUR_MICROSECOND_SYMBOL:
						case SQLSelectParser.HOUR_SECOND_SYMBOL:
						case SQLSelectParser.HOUR_MINUTE_SYMBOL:
						case SQLSelectParser.DAY_MICROSECOND_SYMBOL:
						case SQLSelectParser.DAY_SECOND_SYMBOL:
						case SQLSelectParser.DAY_MINUTE_SYMBOL:
						case SQLSelectParser.DAY_HOUR_SYMBOL:
						case SQLSelectParser.YEAR_MONTH_SYMBOL:
						case SQLSelectParser.BTREE_SYMBOL:
						case SQLSelectParser.RTREE_SYMBOL:
						case SQLSelectParser.HASH_SYMBOL:
						case SQLSelectParser.REAL_SYMBOL:
						case SQLSelectParser.DOUBLE_SYMBOL:
						case SQLSelectParser.PRECISION_SYMBOL:
						case SQLSelectParser.NUMERIC_SYMBOL:
						case SQLSelectParser.NUMBER_SYMBOL:
						case SQLSelectParser.FIXED_SYMBOL:
						case SQLSelectParser.BIT_SYMBOL:
						case SQLSelectParser.BOOL_SYMBOL:
						case SQLSelectParser.VARYING_SYMBOL:
						case SQLSelectParser.VARCHAR_SYMBOL:
						case SQLSelectParser.VARCHAR2_SYMBOL:
						case SQLSelectParser.NATIONAL_SYMBOL:
						case SQLSelectParser.NVARCHAR_SYMBOL:
						case SQLSelectParser.NVARCHAR2_SYMBOL:
						case SQLSelectParser.NCHAR_SYMBOL:
						case SQLSelectParser.VARBINARY_SYMBOL:
						case SQLSelectParser.TINYBLOB_SYMBOL:
						case SQLSelectParser.BLOB_SYMBOL:
						case SQLSelectParser.CLOB_SYMBOL:
						case SQLSelectParser.BFILE_SYMBOL:
						case SQLSelectParser.RAW_SYMBOL:
						case SQLSelectParser.MEDIUMBLOB_SYMBOL:
						case SQLSelectParser.LONGBLOB_SYMBOL:
						case SQLSelectParser.LONG_SYMBOL:
						case SQLSelectParser.TINYTEXT_SYMBOL:
						case SQLSelectParser.TEXT_SYMBOL:
						case SQLSelectParser.MEDIUMTEXT_SYMBOL:
						case SQLSelectParser.LONGTEXT_SYMBOL:
						case SQLSelectParser.ENUM_SYMBOL:
						case SQLSelectParser.SERIAL_SYMBOL:
						case SQLSelectParser.GEOMETRY_SYMBOL:
						case SQLSelectParser.ZEROFILL_SYMBOL:
						case SQLSelectParser.BYTE_SYMBOL:
						case SQLSelectParser.UNICODE_SYMBOL:
						case SQLSelectParser.TERMINATED_SYMBOL:
						case SQLSelectParser.OPTIONALLY_SYMBOL:
						case SQLSelectParser.ENCLOSED_SYMBOL:
						case SQLSelectParser.ESCAPED_SYMBOL:
						case SQLSelectParser.LINES_SYMBOL:
						case SQLSelectParser.STARTING_SYMBOL:
						case SQLSelectParser.GLOBAL_SYMBOL:
						case SQLSelectParser.LOCAL_SYMBOL:
						case SQLSelectParser.SESSION_SYMBOL:
						case SQLSelectParser.VARIANT_SYMBOL:
						case SQLSelectParser.OBJECT_SYMBOL:
						case SQLSelectParser.GEOGRAPHY_SYMBOL:
						case SQLSelectParser.UNDERSCORE_CHARSET:
						case SQLSelectParser.IDENTIFIER:
						case SQLSelectParser.BACK_TICK_QUOTED_ID:
						case SQLSelectParser.DOUBLE_QUOTED_TEXT:
						case SQLSelectParser.SINGLE_QUOTED_TEXT:
						case SQLSelectParser.BRACKET_QUOTED_TEXT:
						case SQLSelectParser.CURLY_BRACES_QUOTED_TEXT:
							this.state = 538;
							this.textOrIdentifier();
							break;
						case SQLSelectParser.AT_SIGN_SYMBOL:
						case SQLSelectParser.AT_TEXT_SUFFIX:
							this.state = 539;
							this.userVariable();
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					this.state = 549;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLSelectParser.COMMA_SYMBOL) {
						this.state = 542;
						this.match(SQLSelectParser.COMMA_SYMBOL);
						this.state = 545;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
							case SQLSelectParser.TINYINT_SYMBOL:
							case SQLSelectParser.SMALLINT_SYMBOL:
							case SQLSelectParser.MEDIUMINT_SYMBOL:
							case SQLSelectParser.BYTE_INT_SYMBOL:
							case SQLSelectParser.INT_SYMBOL:
							case SQLSelectParser.BIGINT_SYMBOL:
							case SQLSelectParser.SECOND_SYMBOL:
							case SQLSelectParser.MINUTE_SYMBOL:
							case SQLSelectParser.HOUR_SYMBOL:
							case SQLSelectParser.DAY_SYMBOL:
							case SQLSelectParser.WEEK_SYMBOL:
							case SQLSelectParser.MONTH_SYMBOL:
							case SQLSelectParser.QUARTER_SYMBOL:
							case SQLSelectParser.YEAR_SYMBOL:
							case SQLSelectParser.DEFAULT_SYMBOL:
							case SQLSelectParser.UNION_SYMBOL:
							case SQLSelectParser.SELECT_SYMBOL:
							case SQLSelectParser.ALL_SYMBOL:
							case SQLSelectParser.DISTINCT_SYMBOL:
							case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
							case SQLSelectParser.HIGH_PRIORITY_SYMBOL:
							case SQLSelectParser.SQL_SMALL_RESULT_SYMBOL:
							case SQLSelectParser.SQL_BIG_RESULT_SYMBOL:
							case SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL:
							case SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL:
							case SQLSelectParser.LIMIT_SYMBOL:
							case SQLSelectParser.OFFSET_SYMBOL:
							case SQLSelectParser.INTO_SYMBOL:
							case SQLSelectParser.OUTFILE_SYMBOL:
							case SQLSelectParser.DUMPFILE_SYMBOL:
							case SQLSelectParser.PROCEDURE_SYMBOL:
							case SQLSelectParser.ANALYSE_SYMBOL:
							case SQLSelectParser.HAVING_SYMBOL:
							case SQLSelectParser.WINDOW_SYMBOL:
							case SQLSelectParser.AS_SYMBOL:
							case SQLSelectParser.PARTITION_SYMBOL:
							case SQLSelectParser.BY_SYMBOL:
							case SQLSelectParser.ROWS_SYMBOL:
							case SQLSelectParser.RANGE_SYMBOL:
							case SQLSelectParser.GROUPS_SYMBOL:
							case SQLSelectParser.UNBOUNDED_SYMBOL:
							case SQLSelectParser.PRECEDING_SYMBOL:
							case SQLSelectParser.INTERVAL_SYMBOL:
							case SQLSelectParser.CURRENT_SYMBOL:
							case SQLSelectParser.ROW_SYMBOL:
							case SQLSelectParser.BETWEEN_SYMBOL:
							case SQLSelectParser.AND_SYMBOL:
							case SQLSelectParser.FOLLOWING_SYMBOL:
							case SQLSelectParser.EXCLUDE_SYMBOL:
							case SQLSelectParser.GROUP_SYMBOL:
							case SQLSelectParser.TIES_SYMBOL:
							case SQLSelectParser.NO_SYMBOL:
							case SQLSelectParser.OTHERS_SYMBOL:
							case SQLSelectParser.WITH_SYMBOL:
							case SQLSelectParser.WITHOUT_SYMBOL:
							case SQLSelectParser.RECURSIVE_SYMBOL:
							case SQLSelectParser.ROLLUP_SYMBOL:
							case SQLSelectParser.CUBE_SYMBOL:
							case SQLSelectParser.ORDER_SYMBOL:
							case SQLSelectParser.ASC_SYMBOL:
							case SQLSelectParser.DESC_SYMBOL:
							case SQLSelectParser.FROM_SYMBOL:
							case SQLSelectParser.DUAL_SYMBOL:
							case SQLSelectParser.VALUES_SYMBOL:
							case SQLSelectParser.TABLE_SYMBOL:
							case SQLSelectParser.SQL_NO_CACHE_SYMBOL:
							case SQLSelectParser.SQL_CACHE_SYMBOL:
							case SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL:
							case SQLSelectParser.FOR_SYMBOL:
							case SQLSelectParser.OF_SYMBOL:
							case SQLSelectParser.LOCK_SYMBOL:
							case SQLSelectParser.IN_SYMBOL:
							case SQLSelectParser.SHARE_SYMBOL:
							case SQLSelectParser.MODE_SYMBOL:
							case SQLSelectParser.UPDATE_SYMBOL:
							case SQLSelectParser.SKIP_SYMBOL:
							case SQLSelectParser.LOCKED_SYMBOL:
							case SQLSelectParser.NOWAIT_SYMBOL:
							case SQLSelectParser.WHERE_SYMBOL:
							case SQLSelectParser.OJ_SYMBOL:
							case SQLSelectParser.ON_SYMBOL:
							case SQLSelectParser.USING_SYMBOL:
							case SQLSelectParser.NATURAL_SYMBOL:
							case SQLSelectParser.INNER_SYMBOL:
							case SQLSelectParser.JOIN_SYMBOL:
							case SQLSelectParser.LEFT_SYMBOL:
							case SQLSelectParser.RIGHT_SYMBOL:
							case SQLSelectParser.OUTER_SYMBOL:
							case SQLSelectParser.CROSS_SYMBOL:
							case SQLSelectParser.LATERAL_SYMBOL:
							case SQLSelectParser.JSON_TABLE_SYMBOL:
							case SQLSelectParser.COLUMNS_SYMBOL:
							case SQLSelectParser.ORDINALITY_SYMBOL:
							case SQLSelectParser.EXISTS_SYMBOL:
							case SQLSelectParser.PATH_SYMBOL:
							case SQLSelectParser.NESTED_SYMBOL:
							case SQLSelectParser.EMPTY_SYMBOL:
							case SQLSelectParser.ERROR_SYMBOL:
							case SQLSelectParser.NULL_SYMBOL:
							case SQLSelectParser.USE_SYMBOL:
							case SQLSelectParser.FORCE_SYMBOL:
							case SQLSelectParser.IGNORE_SYMBOL:
							case SQLSelectParser.KEY_SYMBOL:
							case SQLSelectParser.INDEX_SYMBOL:
							case SQLSelectParser.PRIMARY_SYMBOL:
							case SQLSelectParser.IS_SYMBOL:
							case SQLSelectParser.TRUE_SYMBOL:
							case SQLSelectParser.FALSE_SYMBOL:
							case SQLSelectParser.UNKNOWN_SYMBOL:
							case SQLSelectParser.NOT_SYMBOL:
							case SQLSelectParser.XOR_SYMBOL:
							case SQLSelectParser.OR_SYMBOL:
							case SQLSelectParser.ANY_SYMBOL:
							case SQLSelectParser.MEMBER_SYMBOL:
							case SQLSelectParser.SOUNDS_SYMBOL:
							case SQLSelectParser.LIKE_SYMBOL:
							case SQLSelectParser.ESCAPE_SYMBOL:
							case SQLSelectParser.REGEXP_SYMBOL:
							case SQLSelectParser.DIV_SYMBOL:
							case SQLSelectParser.MOD_SYMBOL:
							case SQLSelectParser.MATCH_SYMBOL:
							case SQLSelectParser.AGAINST_SYMBOL:
							case SQLSelectParser.BINARY_SYMBOL:
							case SQLSelectParser.CAST_SYMBOL:
							case SQLSelectParser.ARRAY_SYMBOL:
							case SQLSelectParser.CASE_SYMBOL:
							case SQLSelectParser.END_SYMBOL:
							case SQLSelectParser.CONVERT_SYMBOL:
							case SQLSelectParser.COLLATE_SYMBOL:
							case SQLSelectParser.AVG_SYMBOL:
							case SQLSelectParser.BIT_AND_SYMBOL:
							case SQLSelectParser.BIT_OR_SYMBOL:
							case SQLSelectParser.BIT_XOR_SYMBOL:
							case SQLSelectParser.COUNT_SYMBOL:
							case SQLSelectParser.MIN_SYMBOL:
							case SQLSelectParser.MAX_SYMBOL:
							case SQLSelectParser.STD_SYMBOL:
							case SQLSelectParser.VARIANCE_SYMBOL:
							case SQLSelectParser.STDDEV_SAMP_SYMBOL:
							case SQLSelectParser.VAR_SAMP_SYMBOL:
							case SQLSelectParser.SUM_SYMBOL:
							case SQLSelectParser.GROUP_CONCAT_SYMBOL:
							case SQLSelectParser.SEPARATOR_SYMBOL:
							case SQLSelectParser.GROUPING_SYMBOL:
							case SQLSelectParser.ROW_NUMBER_SYMBOL:
							case SQLSelectParser.RANK_SYMBOL:
							case SQLSelectParser.DENSE_RANK_SYMBOL:
							case SQLSelectParser.CUME_DIST_SYMBOL:
							case SQLSelectParser.PERCENT_RANK_SYMBOL:
							case SQLSelectParser.NTILE_SYMBOL:
							case SQLSelectParser.LEAD_SYMBOL:
							case SQLSelectParser.LAG_SYMBOL:
							case SQLSelectParser.FIRST_VALUE_SYMBOL:
							case SQLSelectParser.LAST_VALUE_SYMBOL:
							case SQLSelectParser.NTH_VALUE_SYMBOL:
							case SQLSelectParser.FIRST_SYMBOL:
							case SQLSelectParser.LAST_SYMBOL:
							case SQLSelectParser.OVER_SYMBOL:
							case SQLSelectParser.RESPECT_SYMBOL:
							case SQLSelectParser.NULLS_SYMBOL:
							case SQLSelectParser.JSON_ARRAYAGG_SYMBOL:
							case SQLSelectParser.JSON_OBJECTAGG_SYMBOL:
							case SQLSelectParser.BOOLEAN_SYMBOL:
							case SQLSelectParser.LANGUAGE_SYMBOL:
							case SQLSelectParser.QUERY_SYMBOL:
							case SQLSelectParser.EXPANSION_SYMBOL:
							case SQLSelectParser.CHAR_SYMBOL:
							case SQLSelectParser.CURRENT_USER_SYMBOL:
							case SQLSelectParser.DATE_SYMBOL:
							case SQLSelectParser.INSERT_SYMBOL:
							case SQLSelectParser.TIME_SYMBOL:
							case SQLSelectParser.TIMESTAMP_SYMBOL:
							case SQLSelectParser.TIMESTAMP_LTZ_SYMBOL:
							case SQLSelectParser.TIMESTAMP_NTZ_SYMBOL:
							case SQLSelectParser.ZONE_SYMBOL:
							case SQLSelectParser.USER_SYMBOL:
							case SQLSelectParser.ADDDATE_SYMBOL:
							case SQLSelectParser.SUBDATE_SYMBOL:
							case SQLSelectParser.CURDATE_SYMBOL:
							case SQLSelectParser.CURTIME_SYMBOL:
							case SQLSelectParser.DATE_ADD_SYMBOL:
							case SQLSelectParser.DATE_SUB_SYMBOL:
							case SQLSelectParser.EXTRACT_SYMBOL:
							case SQLSelectParser.GET_FORMAT_SYMBOL:
							case SQLSelectParser.NOW_SYMBOL:
							case SQLSelectParser.POSITION_SYMBOL:
							case SQLSelectParser.SYSDATE_SYMBOL:
							case SQLSelectParser.TIMESTAMP_ADD_SYMBOL:
							case SQLSelectParser.TIMESTAMP_DIFF_SYMBOL:
							case SQLSelectParser.UTC_DATE_SYMBOL:
							case SQLSelectParser.UTC_TIME_SYMBOL:
							case SQLSelectParser.UTC_TIMESTAMP_SYMBOL:
							case SQLSelectParser.ASCII_SYMBOL:
							case SQLSelectParser.CHARSET_SYMBOL:
							case SQLSelectParser.COALESCE_SYMBOL:
							case SQLSelectParser.COLLATION_SYMBOL:
							case SQLSelectParser.DATABASE_SYMBOL:
							case SQLSelectParser.IF_SYMBOL:
							case SQLSelectParser.FORMAT_SYMBOL:
							case SQLSelectParser.MICROSECOND_SYMBOL:
							case SQLSelectParser.OLD_PASSWORD_SYMBOL:
							case SQLSelectParser.PASSWORD_SYMBOL:
							case SQLSelectParser.REPEAT_SYMBOL:
							case SQLSelectParser.REPLACE_SYMBOL:
							case SQLSelectParser.REVERSE_SYMBOL:
							case SQLSelectParser.ROW_COUNT_SYMBOL:
							case SQLSelectParser.TRUNCATE_SYMBOL:
							case SQLSelectParser.WEIGHT_STRING_SYMBOL:
							case SQLSelectParser.CONTAINS_SYMBOL:
							case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
							case SQLSelectParser.LINESTRING_SYMBOL:
							case SQLSelectParser.MULTILINESTRING_SYMBOL:
							case SQLSelectParser.MULTIPOINT_SYMBOL:
							case SQLSelectParser.MULTIPOLYGON_SYMBOL:
							case SQLSelectParser.POINT_SYMBOL:
							case SQLSelectParser.POLYGON_SYMBOL:
							case SQLSelectParser.LEVEL_SYMBOL:
							case SQLSelectParser.DATETIME_SYMBOL:
							case SQLSelectParser.TRIM_SYMBOL:
							case SQLSelectParser.LEADING_SYMBOL:
							case SQLSelectParser.TRAILING_SYMBOL:
							case SQLSelectParser.BOTH_SYMBOL:
							case SQLSelectParser.STRING_SYMBOL:
							case SQLSelectParser.SUBSTRING_SYMBOL:
							case SQLSelectParser.WHEN_SYMBOL:
							case SQLSelectParser.THEN_SYMBOL:
							case SQLSelectParser.ELSE_SYMBOL:
							case SQLSelectParser.SIGNED_SYMBOL:
							case SQLSelectParser.UNSIGNED_SYMBOL:
							case SQLSelectParser.DECIMAL_SYMBOL:
							case SQLSelectParser.JSON_SYMBOL:
							case SQLSelectParser.FLOAT_SYMBOL:
							case SQLSelectParser.FLOAT_SYMBOL_4:
							case SQLSelectParser.FLOAT_SYMBOL_8:
							case SQLSelectParser.SET_SYMBOL:
							case SQLSelectParser.SECOND_MICROSECOND_SYMBOL:
							case SQLSelectParser.MINUTE_MICROSECOND_SYMBOL:
							case SQLSelectParser.MINUTE_SECOND_SYMBOL:
							case SQLSelectParser.HOUR_MICROSECOND_SYMBOL:
							case SQLSelectParser.HOUR_SECOND_SYMBOL:
							case SQLSelectParser.HOUR_MINUTE_SYMBOL:
							case SQLSelectParser.DAY_MICROSECOND_SYMBOL:
							case SQLSelectParser.DAY_SECOND_SYMBOL:
							case SQLSelectParser.DAY_MINUTE_SYMBOL:
							case SQLSelectParser.DAY_HOUR_SYMBOL:
							case SQLSelectParser.YEAR_MONTH_SYMBOL:
							case SQLSelectParser.BTREE_SYMBOL:
							case SQLSelectParser.RTREE_SYMBOL:
							case SQLSelectParser.HASH_SYMBOL:
							case SQLSelectParser.REAL_SYMBOL:
							case SQLSelectParser.DOUBLE_SYMBOL:
							case SQLSelectParser.PRECISION_SYMBOL:
							case SQLSelectParser.NUMERIC_SYMBOL:
							case SQLSelectParser.NUMBER_SYMBOL:
							case SQLSelectParser.FIXED_SYMBOL:
							case SQLSelectParser.BIT_SYMBOL:
							case SQLSelectParser.BOOL_SYMBOL:
							case SQLSelectParser.VARYING_SYMBOL:
							case SQLSelectParser.VARCHAR_SYMBOL:
							case SQLSelectParser.VARCHAR2_SYMBOL:
							case SQLSelectParser.NATIONAL_SYMBOL:
							case SQLSelectParser.NVARCHAR_SYMBOL:
							case SQLSelectParser.NVARCHAR2_SYMBOL:
							case SQLSelectParser.NCHAR_SYMBOL:
							case SQLSelectParser.VARBINARY_SYMBOL:
							case SQLSelectParser.TINYBLOB_SYMBOL:
							case SQLSelectParser.BLOB_SYMBOL:
							case SQLSelectParser.CLOB_SYMBOL:
							case SQLSelectParser.BFILE_SYMBOL:
							case SQLSelectParser.RAW_SYMBOL:
							case SQLSelectParser.MEDIUMBLOB_SYMBOL:
							case SQLSelectParser.LONGBLOB_SYMBOL:
							case SQLSelectParser.LONG_SYMBOL:
							case SQLSelectParser.TINYTEXT_SYMBOL:
							case SQLSelectParser.TEXT_SYMBOL:
							case SQLSelectParser.MEDIUMTEXT_SYMBOL:
							case SQLSelectParser.LONGTEXT_SYMBOL:
							case SQLSelectParser.ENUM_SYMBOL:
							case SQLSelectParser.SERIAL_SYMBOL:
							case SQLSelectParser.GEOMETRY_SYMBOL:
							case SQLSelectParser.ZEROFILL_SYMBOL:
							case SQLSelectParser.BYTE_SYMBOL:
							case SQLSelectParser.UNICODE_SYMBOL:
							case SQLSelectParser.TERMINATED_SYMBOL:
							case SQLSelectParser.OPTIONALLY_SYMBOL:
							case SQLSelectParser.ENCLOSED_SYMBOL:
							case SQLSelectParser.ESCAPED_SYMBOL:
							case SQLSelectParser.LINES_SYMBOL:
							case SQLSelectParser.STARTING_SYMBOL:
							case SQLSelectParser.GLOBAL_SYMBOL:
							case SQLSelectParser.LOCAL_SYMBOL:
							case SQLSelectParser.SESSION_SYMBOL:
							case SQLSelectParser.VARIANT_SYMBOL:
							case SQLSelectParser.OBJECT_SYMBOL:
							case SQLSelectParser.GEOGRAPHY_SYMBOL:
							case SQLSelectParser.UNDERSCORE_CHARSET:
							case SQLSelectParser.IDENTIFIER:
							case SQLSelectParser.BACK_TICK_QUOTED_ID:
							case SQLSelectParser.DOUBLE_QUOTED_TEXT:
							case SQLSelectParser.SINGLE_QUOTED_TEXT:
							case SQLSelectParser.BRACKET_QUOTED_TEXT:
							case SQLSelectParser.CURLY_BRACES_QUOTED_TEXT:
								this.state = 543;
								this.textOrIdentifier();
								break;
							case SQLSelectParser.AT_SIGN_SYMBOL:
							case SQLSelectParser.AT_TEXT_SUFFIX:
								this.state = 544;
								this.userVariable();
								break;
							default:
								throw new antlr4.error.NoViableAltException(this);
						}
						this.state = 551;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	procedureAnalyseClause() {
		let localctx = new ProcedureAnalyseClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 30, SQLSelectParser.RULE_procedureAnalyseClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 554;
			this.match(SQLSelectParser.PROCEDURE_SYMBOL);
			this.state = 555;
			this.match(SQLSelectParser.ANALYSE_SYMBOL);
			this.state = 556;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.INT_NUMBER) {
				this.state = 557;
				this.match(SQLSelectParser.INT_NUMBER);
				this.state = 560;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SQLSelectParser.COMMA_SYMBOL) {
					this.state = 558;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 559;
					this.match(SQLSelectParser.INT_NUMBER);
				}
			}

			this.state = 564;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	havingClause() {
		let localctx = new HavingClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 32, SQLSelectParser.RULE_havingClause);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 566;
			this.match(SQLSelectParser.HAVING_SYMBOL);
			this.state = 567;
			this.expr(0);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowClause() {
		let localctx = new WindowClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 34, SQLSelectParser.RULE_windowClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 569;
			this.match(SQLSelectParser.WINDOW_SYMBOL);
			this.state = 570;
			this.windowDefinition();
			this.state = 575;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 571;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 572;
				this.windowDefinition();
				this.state = 577;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowDefinition() {
		let localctx = new WindowDefinitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 36, SQLSelectParser.RULE_windowDefinition);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 578;
			this.identifier();
			this.state = 579;
			this.match(SQLSelectParser.AS_SYMBOL);
			this.state = 580;
			this.windowSpec();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowSpec() {
		let localctx = new WindowSpecContext(this, this._ctx, this.state);
		this.enterRule(localctx, 38, SQLSelectParser.RULE_windowSpec);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 582;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 583;
			this.windowSpecDetails();
			this.state = 584;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowSpecDetails() {
		let localctx = new WindowSpecDetailsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 40, SQLSelectParser.RULE_windowSpecDetails);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 587;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 49, this._ctx);
			if (la_ === 1) {
				this.state = 586;
				this.identifier();
			}
			this.state = 592;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.PARTITION_SYMBOL) {
				this.state = 589;
				this.match(SQLSelectParser.PARTITION_SYMBOL);
				this.state = 590;
				this.match(SQLSelectParser.BY_SYMBOL);
				this.state = 591;
				this.orderList();
			}

			this.state = 595;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.ORDER_SYMBOL) {
				this.state = 594;
				this.orderClause();
			}

			this.state = 598;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (
				((_la - 86) & ~0x1f) == 0 &&
				((1 << (_la - 86)) &
					((1 << (SQLSelectParser.ROWS_SYMBOL - 86)) |
						(1 << (SQLSelectParser.RANGE_SYMBOL - 86)) |
						(1 << (SQLSelectParser.GROUPS_SYMBOL - 86)))) !==
					0
			) {
				this.state = 597;
				this.windowFrameClause();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowFrameClause() {
		let localctx = new WindowFrameClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 42, SQLSelectParser.RULE_windowFrameClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 600;
			this.windowFrameUnits();
			this.state = 601;
			this.windowFrameExtent();
			this.state = 603;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.EXCLUDE_SYMBOL) {
				this.state = 602;
				this.windowFrameExclusion();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowFrameUnits() {
		let localctx = new WindowFrameUnitsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 44, SQLSelectParser.RULE_windowFrameUnits);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 605;
			_la = this._input.LA(1);
			if (
				!(
					((_la - 86) & ~0x1f) == 0 &&
					((1 << (_la - 86)) &
						((1 << (SQLSelectParser.ROWS_SYMBOL - 86)) |
							(1 << (SQLSelectParser.RANGE_SYMBOL - 86)) |
							(1 << (SQLSelectParser.GROUPS_SYMBOL - 86)))) !==
						0
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowFrameExtent() {
		let localctx = new WindowFrameExtentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 46, SQLSelectParser.RULE_windowFrameExtent);
		try {
			this.state = 609;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.PARAM_MARKER:
				case SQLSelectParser.INT_NUMBER:
				case SQLSelectParser.DECIMAL_NUMBER:
				case SQLSelectParser.FLOAT_NUMBER:
				case SQLSelectParser.UNBOUNDED_SYMBOL:
				case SQLSelectParser.INTERVAL_SYMBOL:
				case SQLSelectParser.CURRENT_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 607;
					this.windowFrameStart();
					break;
				case SQLSelectParser.BETWEEN_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 608;
					this.windowFrameBetween();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowFrameStart() {
		let localctx = new WindowFrameStartContext(this, this._ctx, this.state);
		this.enterRule(localctx, 48, SQLSelectParser.RULE_windowFrameStart);
		try {
			this.state = 625;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.UNBOUNDED_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 611;
					this.match(SQLSelectParser.UNBOUNDED_SYMBOL);
					this.state = 612;
					this.match(SQLSelectParser.PRECEDING_SYMBOL);
					break;
				case SQLSelectParser.INT_NUMBER:
				case SQLSelectParser.DECIMAL_NUMBER:
				case SQLSelectParser.FLOAT_NUMBER:
					this.enterOuterAlt(localctx, 2);
					this.state = 613;
					this.ulonglong_number();
					this.state = 614;
					this.match(SQLSelectParser.PRECEDING_SYMBOL);
					break;
				case SQLSelectParser.PARAM_MARKER:
					this.enterOuterAlt(localctx, 3);
					this.state = 616;
					this.match(SQLSelectParser.PARAM_MARKER);
					this.state = 617;
					this.match(SQLSelectParser.PRECEDING_SYMBOL);
					break;
				case SQLSelectParser.INTERVAL_SYMBOL:
					this.enterOuterAlt(localctx, 4);
					this.state = 618;
					this.match(SQLSelectParser.INTERVAL_SYMBOL);
					this.state = 619;
					this.expr(0);
					this.state = 620;
					this.interval();
					this.state = 621;
					this.match(SQLSelectParser.PRECEDING_SYMBOL);
					break;
				case SQLSelectParser.CURRENT_SYMBOL:
					this.enterOuterAlt(localctx, 5);
					this.state = 623;
					this.match(SQLSelectParser.CURRENT_SYMBOL);
					this.state = 624;
					this.match(SQLSelectParser.ROW_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowFrameBetween() {
		let localctx = new WindowFrameBetweenContext(this, this._ctx, this.state);
		this.enterRule(localctx, 50, SQLSelectParser.RULE_windowFrameBetween);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 627;
			this.match(SQLSelectParser.BETWEEN_SYMBOL);
			this.state = 628;
			this.windowFrameBound();
			this.state = 629;
			this.match(SQLSelectParser.AND_SYMBOL);
			this.state = 630;
			this.windowFrameBound();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowFrameBound() {
		let localctx = new WindowFrameBoundContext(this, this._ctx, this.state);
		this.enterRule(localctx, 52, SQLSelectParser.RULE_windowFrameBound);
		try {
			this.state = 645;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 56, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 632;
					this.windowFrameStart();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 633;
					this.match(SQLSelectParser.UNBOUNDED_SYMBOL);
					this.state = 634;
					this.match(SQLSelectParser.FOLLOWING_SYMBOL);
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 635;
					this.ulonglong_number();
					this.state = 636;
					this.match(SQLSelectParser.FOLLOWING_SYMBOL);
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 638;
					this.match(SQLSelectParser.PARAM_MARKER);
					this.state = 639;
					this.match(SQLSelectParser.FOLLOWING_SYMBOL);
					break;

				case 5:
					this.enterOuterAlt(localctx, 5);
					this.state = 640;
					this.match(SQLSelectParser.INTERVAL_SYMBOL);
					this.state = 641;
					this.expr(0);
					this.state = 642;
					this.interval();
					this.state = 643;
					this.match(SQLSelectParser.FOLLOWING_SYMBOL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowFrameExclusion() {
		let localctx = new WindowFrameExclusionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 54, SQLSelectParser.RULE_windowFrameExclusion);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 647;
			this.match(SQLSelectParser.EXCLUDE_SYMBOL);
			this.state = 654;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.CURRENT_SYMBOL:
					this.state = 648;
					this.match(SQLSelectParser.CURRENT_SYMBOL);
					this.state = 649;
					this.match(SQLSelectParser.ROW_SYMBOL);
					break;
				case SQLSelectParser.GROUP_SYMBOL:
					this.state = 650;
					this.match(SQLSelectParser.GROUP_SYMBOL);
					break;
				case SQLSelectParser.TIES_SYMBOL:
					this.state = 651;
					this.match(SQLSelectParser.TIES_SYMBOL);
					break;
				case SQLSelectParser.NO_SYMBOL:
					this.state = 652;
					this.match(SQLSelectParser.NO_SYMBOL);
					this.state = 653;
					this.match(SQLSelectParser.OTHERS_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	withClause() {
		let localctx = new WithClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 56, SQLSelectParser.RULE_withClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 656;
			this.match(SQLSelectParser.WITH_SYMBOL);
			this.state = 658;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 58, this._ctx);
			if (la_ === 1) {
				this.state = 657;
				this.match(SQLSelectParser.RECURSIVE_SYMBOL);
			}
			this.state = 660;
			this.commonTableExpression();
			this.state = 665;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 661;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 662;
				this.commonTableExpression();
				this.state = 667;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	commonTableExpression() {
		let localctx = new CommonTableExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 58, SQLSelectParser.RULE_commonTableExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 668;
			this.identifier();
			this.state = 670;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.OPEN_PAR_SYMBOL) {
				this.state = 669;
				this.columnInternalRefList();
			}

			this.state = 672;
			this.match(SQLSelectParser.AS_SYMBOL);
			this.state = 673;
			this.subquery();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	groupByClause() {
		let localctx = new GroupByClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 60, SQLSelectParser.RULE_groupByClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 675;
			this.match(SQLSelectParser.GROUP_SYMBOL);
			this.state = 676;
			this.match(SQLSelectParser.BY_SYMBOL);
			this.state = 677;
			this.orderList();
			this.state = 679;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.WITH_SYMBOL) {
				this.state = 678;
				this.olapOption();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	olapOption() {
		let localctx = new OlapOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 62, SQLSelectParser.RULE_olapOption);
		try {
			this.state = 685;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 62, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 681;
					this.match(SQLSelectParser.WITH_SYMBOL);
					this.state = 682;
					this.match(SQLSelectParser.ROLLUP_SYMBOL);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 683;
					this.match(SQLSelectParser.WITH_SYMBOL);
					this.state = 684;
					this.match(SQLSelectParser.CUBE_SYMBOL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	orderClause() {
		let localctx = new OrderClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 64, SQLSelectParser.RULE_orderClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 687;
			this.match(SQLSelectParser.ORDER_SYMBOL);
			this.state = 688;
			this.match(SQLSelectParser.BY_SYMBOL);
			this.state = 689;
			this.orderList();
			this.state = 691;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.NULLS_SYMBOL) {
				this.state = 690;
				this.nullsOrder();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	direction() {
		let localctx = new DirectionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 66, SQLSelectParser.RULE_direction);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 693;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.ASC_SYMBOL || _la === SQLSelectParser.DESC_SYMBOL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	fromClause() {
		let localctx = new FromClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 68, SQLSelectParser.RULE_fromClause);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 695;
			this.match(SQLSelectParser.FROM_SYMBOL);
			this.state = 698;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 64, this._ctx);
			switch (la_) {
				case 1:
					this.state = 696;
					this.match(SQLSelectParser.DUAL_SYMBOL);
					break;

				case 2:
					this.state = 697;
					this.tableReferenceList();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	tableReferenceList() {
		let localctx = new TableReferenceListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 70, SQLSelectParser.RULE_tableReferenceList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 700;
			this.tableReference();
			this.state = 705;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 701;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 702;
				this.tableReference();
				this.state = 707;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	tableValueConstructor() {
		let localctx = new TableValueConstructorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 72, SQLSelectParser.RULE_tableValueConstructor);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 708;
			this.match(SQLSelectParser.VALUES_SYMBOL);
			this.state = 709;
			this.rowValueExplicit();
			this.state = 714;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 710;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 711;
				this.rowValueExplicit();
				this.state = 716;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	explicitTable() {
		let localctx = new ExplicitTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 74, SQLSelectParser.RULE_explicitTable);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 717;
			this.match(SQLSelectParser.TABLE_SYMBOL);
			this.state = 718;
			this.qualifiedIdentifier();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	rowValueExplicit() {
		let localctx = new RowValueExplicitContext(this, this._ctx, this.state);
		this.enterRule(localctx, 76, SQLSelectParser.RULE_rowValueExplicit);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 720;
			this.match(SQLSelectParser.ROW_SYMBOL);
			this.state = 721;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 723;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (
				((_la & ~0x1f) == 0 &&
					((1 << _la) &
						((1 << SQLSelectParser.PLUS_OPERATOR) |
							(1 << SQLSelectParser.MINUS_OPERATOR) |
							(1 << SQLSelectParser.LOGICAL_NOT_OPERATOR) |
							(1 << SQLSelectParser.BITWISE_NOT_OPERATOR) |
							(1 << SQLSelectParser.OPEN_PAR_SYMBOL) |
							(1 << SQLSelectParser.OPEN_CURLY_SYMBOL))) !==
						0) ||
				(((_la - 38) & ~0x1f) == 0 &&
					((1 << (_la - 38)) &
						((1 << (SQLSelectParser.AT_SIGN_SYMBOL - 38)) |
							(1 << (SQLSelectParser.AT_TEXT_SUFFIX - 38)) |
							(1 << (SQLSelectParser.AT_AT_SIGN_SYMBOL - 38)) |
							(1 << (SQLSelectParser.NULL2_SYMBOL - 38)) |
							(1 << (SQLSelectParser.PARAM_MARKER - 38)) |
							(1 << (SQLSelectParser.HEX_NUMBER - 38)) |
							(1 << (SQLSelectParser.BIN_NUMBER - 38)) |
							(1 << (SQLSelectParser.INT_NUMBER - 38)) |
							(1 << (SQLSelectParser.DECIMAL_NUMBER - 38)) |
							(1 << (SQLSelectParser.FLOAT_NUMBER - 38)) |
							(1 << (SQLSelectParser.TINYINT_SYMBOL - 38)) |
							(1 << (SQLSelectParser.SMALLINT_SYMBOL - 38)) |
							(1 << (SQLSelectParser.MEDIUMINT_SYMBOL - 38)) |
							(1 << (SQLSelectParser.BYTE_INT_SYMBOL - 38)) |
							(1 << (SQLSelectParser.INT_SYMBOL - 38)) |
							(1 << (SQLSelectParser.BIGINT_SYMBOL - 38)) |
							(1 << (SQLSelectParser.SECOND_SYMBOL - 38)) |
							(1 << (SQLSelectParser.MINUTE_SYMBOL - 38)) |
							(1 << (SQLSelectParser.HOUR_SYMBOL - 38)) |
							(1 << (SQLSelectParser.DAY_SYMBOL - 38)) |
							(1 << (SQLSelectParser.WEEK_SYMBOL - 38)) |
							(1 << (SQLSelectParser.MONTH_SYMBOL - 38)) |
							(1 << (SQLSelectParser.QUARTER_SYMBOL - 38)) |
							(1 << (SQLSelectParser.YEAR_SYMBOL - 38)) |
							(1 << (SQLSelectParser.DEFAULT_SYMBOL - 38)) |
							(1 << (SQLSelectParser.UNION_SYMBOL - 38)) |
							(1 << (SQLSelectParser.SELECT_SYMBOL - 38)) |
							(1 << (SQLSelectParser.ALL_SYMBOL - 38)) |
							(1 << (SQLSelectParser.DISTINCT_SYMBOL - 38)) |
							(1 << (SQLSelectParser.STRAIGHT_JOIN_SYMBOL - 38)) |
							(1 << (SQLSelectParser.HIGH_PRIORITY_SYMBOL - 38)))) !==
						0) ||
				(((_la - 70) & ~0x1f) == 0 &&
					((1 << (_la - 70)) &
						((1 << (SQLSelectParser.SQL_SMALL_RESULT_SYMBOL - 70)) |
							(1 << (SQLSelectParser.SQL_BIG_RESULT_SYMBOL - 70)) |
							(1 << (SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL - 70)) |
							(1 << (SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL - 70)) |
							(1 << (SQLSelectParser.LIMIT_SYMBOL - 70)) |
							(1 << (SQLSelectParser.OFFSET_SYMBOL - 70)) |
							(1 << (SQLSelectParser.INTO_SYMBOL - 70)) |
							(1 << (SQLSelectParser.OUTFILE_SYMBOL - 70)) |
							(1 << (SQLSelectParser.DUMPFILE_SYMBOL - 70)) |
							(1 << (SQLSelectParser.PROCEDURE_SYMBOL - 70)) |
							(1 << (SQLSelectParser.ANALYSE_SYMBOL - 70)) |
							(1 << (SQLSelectParser.HAVING_SYMBOL - 70)) |
							(1 << (SQLSelectParser.WINDOW_SYMBOL - 70)) |
							(1 << (SQLSelectParser.AS_SYMBOL - 70)) |
							(1 << (SQLSelectParser.PARTITION_SYMBOL - 70)) |
							(1 << (SQLSelectParser.BY_SYMBOL - 70)) |
							(1 << (SQLSelectParser.ROWS_SYMBOL - 70)) |
							(1 << (SQLSelectParser.RANGE_SYMBOL - 70)) |
							(1 << (SQLSelectParser.GROUPS_SYMBOL - 70)) |
							(1 << (SQLSelectParser.UNBOUNDED_SYMBOL - 70)) |
							(1 << (SQLSelectParser.PRECEDING_SYMBOL - 70)) |
							(1 << (SQLSelectParser.INTERVAL_SYMBOL - 70)) |
							(1 << (SQLSelectParser.CURRENT_SYMBOL - 70)) |
							(1 << (SQLSelectParser.ROW_SYMBOL - 70)) |
							(1 << (SQLSelectParser.BETWEEN_SYMBOL - 70)) |
							(1 << (SQLSelectParser.AND_SYMBOL - 70)) |
							(1 << (SQLSelectParser.FOLLOWING_SYMBOL - 70)) |
							(1 << (SQLSelectParser.EXCLUDE_SYMBOL - 70)) |
							(1 << (SQLSelectParser.GROUP_SYMBOL - 70)) |
							(1 << (SQLSelectParser.TIES_SYMBOL - 70)) |
							(1 << (SQLSelectParser.NO_SYMBOL - 70)) |
							(1 << (SQLSelectParser.OTHERS_SYMBOL - 70)))) !==
						0) ||
				(((_la - 102) & ~0x1f) == 0 &&
					((1 << (_la - 102)) &
						((1 << (SQLSelectParser.WITH_SYMBOL - 102)) |
							(1 << (SQLSelectParser.WITHOUT_SYMBOL - 102)) |
							(1 << (SQLSelectParser.RECURSIVE_SYMBOL - 102)) |
							(1 << (SQLSelectParser.ROLLUP_SYMBOL - 102)) |
							(1 << (SQLSelectParser.CUBE_SYMBOL - 102)) |
							(1 << (SQLSelectParser.ORDER_SYMBOL - 102)) |
							(1 << (SQLSelectParser.ASC_SYMBOL - 102)) |
							(1 << (SQLSelectParser.DESC_SYMBOL - 102)) |
							(1 << (SQLSelectParser.FROM_SYMBOL - 102)) |
							(1 << (SQLSelectParser.DUAL_SYMBOL - 102)) |
							(1 << (SQLSelectParser.VALUES_SYMBOL - 102)) |
							(1 << (SQLSelectParser.TABLE_SYMBOL - 102)) |
							(1 << (SQLSelectParser.SQL_NO_CACHE_SYMBOL - 102)) |
							(1 << (SQLSelectParser.SQL_CACHE_SYMBOL - 102)) |
							(1 << (SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL - 102)) |
							(1 << (SQLSelectParser.FOR_SYMBOL - 102)) |
							(1 << (SQLSelectParser.OF_SYMBOL - 102)) |
							(1 << (SQLSelectParser.LOCK_SYMBOL - 102)) |
							(1 << (SQLSelectParser.IN_SYMBOL - 102)) |
							(1 << (SQLSelectParser.SHARE_SYMBOL - 102)) |
							(1 << (SQLSelectParser.MODE_SYMBOL - 102)) |
							(1 << (SQLSelectParser.UPDATE_SYMBOL - 102)) |
							(1 << (SQLSelectParser.SKIP_SYMBOL - 102)) |
							(1 << (SQLSelectParser.LOCKED_SYMBOL - 102)) |
							(1 << (SQLSelectParser.NOWAIT_SYMBOL - 102)) |
							(1 << (SQLSelectParser.WHERE_SYMBOL - 102)) |
							(1 << (SQLSelectParser.OJ_SYMBOL - 102)) |
							(1 << (SQLSelectParser.ON_SYMBOL - 102)) |
							(1 << (SQLSelectParser.USING_SYMBOL - 102)) |
							(1 << (SQLSelectParser.NATURAL_SYMBOL - 102)) |
							(1 << (SQLSelectParser.INNER_SYMBOL - 102)))) !==
						0) ||
				(((_la - 134) & ~0x1f) == 0 &&
					((1 << (_la - 134)) &
						((1 << (SQLSelectParser.JOIN_SYMBOL - 134)) |
							(1 << (SQLSelectParser.LEFT_SYMBOL - 134)) |
							(1 << (SQLSelectParser.RIGHT_SYMBOL - 134)) |
							(1 << (SQLSelectParser.OUTER_SYMBOL - 134)) |
							(1 << (SQLSelectParser.CROSS_SYMBOL - 134)) |
							(1 << (SQLSelectParser.LATERAL_SYMBOL - 134)) |
							(1 << (SQLSelectParser.JSON_TABLE_SYMBOL - 134)) |
							(1 << (SQLSelectParser.COLUMNS_SYMBOL - 134)) |
							(1 << (SQLSelectParser.ORDINALITY_SYMBOL - 134)) |
							(1 << (SQLSelectParser.EXISTS_SYMBOL - 134)) |
							(1 << (SQLSelectParser.PATH_SYMBOL - 134)) |
							(1 << (SQLSelectParser.NESTED_SYMBOL - 134)) |
							(1 << (SQLSelectParser.EMPTY_SYMBOL - 134)) |
							(1 << (SQLSelectParser.ERROR_SYMBOL - 134)) |
							(1 << (SQLSelectParser.NULL_SYMBOL - 134)) |
							(1 << (SQLSelectParser.USE_SYMBOL - 134)) |
							(1 << (SQLSelectParser.FORCE_SYMBOL - 134)) |
							(1 << (SQLSelectParser.IGNORE_SYMBOL - 134)) |
							(1 << (SQLSelectParser.KEY_SYMBOL - 134)) |
							(1 << (SQLSelectParser.INDEX_SYMBOL - 134)) |
							(1 << (SQLSelectParser.PRIMARY_SYMBOL - 134)) |
							(1 << (SQLSelectParser.IS_SYMBOL - 134)) |
							(1 << (SQLSelectParser.TRUE_SYMBOL - 134)) |
							(1 << (SQLSelectParser.FALSE_SYMBOL - 134)) |
							(1 << (SQLSelectParser.UNKNOWN_SYMBOL - 134)) |
							(1 << (SQLSelectParser.NOT_SYMBOL - 134)) |
							(1 << (SQLSelectParser.XOR_SYMBOL - 134)) |
							(1 << (SQLSelectParser.OR_SYMBOL - 134)) |
							(1 << (SQLSelectParser.ANY_SYMBOL - 134)) |
							(1 << (SQLSelectParser.MEMBER_SYMBOL - 134)) |
							(1 << (SQLSelectParser.SOUNDS_SYMBOL - 134)) |
							(1 << (SQLSelectParser.LIKE_SYMBOL - 134)))) !==
						0) ||
				(((_la - 166) & ~0x1f) == 0 &&
					((1 << (_la - 166)) &
						((1 << (SQLSelectParser.ESCAPE_SYMBOL - 166)) |
							(1 << (SQLSelectParser.REGEXP_SYMBOL - 166)) |
							(1 << (SQLSelectParser.DIV_SYMBOL - 166)) |
							(1 << (SQLSelectParser.MOD_SYMBOL - 166)) |
							(1 << (SQLSelectParser.MATCH_SYMBOL - 166)) |
							(1 << (SQLSelectParser.AGAINST_SYMBOL - 166)) |
							(1 << (SQLSelectParser.BINARY_SYMBOL - 166)) |
							(1 << (SQLSelectParser.CAST_SYMBOL - 166)) |
							(1 << (SQLSelectParser.ARRAY_SYMBOL - 166)) |
							(1 << (SQLSelectParser.CASE_SYMBOL - 166)) |
							(1 << (SQLSelectParser.END_SYMBOL - 166)) |
							(1 << (SQLSelectParser.CONVERT_SYMBOL - 166)) |
							(1 << (SQLSelectParser.COLLATE_SYMBOL - 166)) |
							(1 << (SQLSelectParser.AVG_SYMBOL - 166)) |
							(1 << (SQLSelectParser.BIT_AND_SYMBOL - 166)) |
							(1 << (SQLSelectParser.BIT_OR_SYMBOL - 166)) |
							(1 << (SQLSelectParser.BIT_XOR_SYMBOL - 166)) |
							(1 << (SQLSelectParser.COUNT_SYMBOL - 166)) |
							(1 << (SQLSelectParser.MIN_SYMBOL - 166)) |
							(1 << (SQLSelectParser.MAX_SYMBOL - 166)) |
							(1 << (SQLSelectParser.STD_SYMBOL - 166)) |
							(1 << (SQLSelectParser.VARIANCE_SYMBOL - 166)) |
							(1 << (SQLSelectParser.STDDEV_SAMP_SYMBOL - 166)) |
							(1 << (SQLSelectParser.VAR_SAMP_SYMBOL - 166)) |
							(1 << (SQLSelectParser.SUM_SYMBOL - 166)) |
							(1 << (SQLSelectParser.GROUP_CONCAT_SYMBOL - 166)) |
							(1 << (SQLSelectParser.SEPARATOR_SYMBOL - 166)) |
							(1 << (SQLSelectParser.GROUPING_SYMBOL - 166)) |
							(1 << (SQLSelectParser.ROW_NUMBER_SYMBOL - 166)) |
							(1 << (SQLSelectParser.RANK_SYMBOL - 166)) |
							(1 << (SQLSelectParser.DENSE_RANK_SYMBOL - 166)) |
							(1 << (SQLSelectParser.CUME_DIST_SYMBOL - 166)))) !==
						0) ||
				(((_la - 198) & ~0x1f) == 0 &&
					((1 << (_la - 198)) &
						((1 << (SQLSelectParser.PERCENT_RANK_SYMBOL - 198)) |
							(1 << (SQLSelectParser.NTILE_SYMBOL - 198)) |
							(1 << (SQLSelectParser.LEAD_SYMBOL - 198)) |
							(1 << (SQLSelectParser.LAG_SYMBOL - 198)) |
							(1 << (SQLSelectParser.FIRST_VALUE_SYMBOL - 198)) |
							(1 << (SQLSelectParser.LAST_VALUE_SYMBOL - 198)) |
							(1 << (SQLSelectParser.NTH_VALUE_SYMBOL - 198)) |
							(1 << (SQLSelectParser.FIRST_SYMBOL - 198)) |
							(1 << (SQLSelectParser.LAST_SYMBOL - 198)) |
							(1 << (SQLSelectParser.OVER_SYMBOL - 198)) |
							(1 << (SQLSelectParser.RESPECT_SYMBOL - 198)) |
							(1 << (SQLSelectParser.NULLS_SYMBOL - 198)) |
							(1 << (SQLSelectParser.JSON_ARRAYAGG_SYMBOL - 198)) |
							(1 << (SQLSelectParser.JSON_OBJECTAGG_SYMBOL - 198)) |
							(1 << (SQLSelectParser.BOOLEAN_SYMBOL - 198)) |
							(1 << (SQLSelectParser.LANGUAGE_SYMBOL - 198)) |
							(1 << (SQLSelectParser.QUERY_SYMBOL - 198)) |
							(1 << (SQLSelectParser.EXPANSION_SYMBOL - 198)) |
							(1 << (SQLSelectParser.CHAR_SYMBOL - 198)) |
							(1 << (SQLSelectParser.CURRENT_USER_SYMBOL - 198)) |
							(1 << (SQLSelectParser.DATE_SYMBOL - 198)) |
							(1 << (SQLSelectParser.INSERT_SYMBOL - 198)) |
							(1 << (SQLSelectParser.TIME_SYMBOL - 198)) |
							(1 << (SQLSelectParser.TIMESTAMP_SYMBOL - 198)) |
							(1 << (SQLSelectParser.TIMESTAMP_LTZ_SYMBOL - 198)) |
							(1 << (SQLSelectParser.TIMESTAMP_NTZ_SYMBOL - 198)) |
							(1 << (SQLSelectParser.ZONE_SYMBOL - 198)) |
							(1 << (SQLSelectParser.USER_SYMBOL - 198)) |
							(1 << (SQLSelectParser.ADDDATE_SYMBOL - 198)) |
							(1 << (SQLSelectParser.SUBDATE_SYMBOL - 198)) |
							(1 << (SQLSelectParser.CURDATE_SYMBOL - 198)) |
							(1 << (SQLSelectParser.CURTIME_SYMBOL - 198)))) !==
						0) ||
				(((_la - 230) & ~0x1f) == 0 &&
					((1 << (_la - 230)) &
						((1 << (SQLSelectParser.DATE_ADD_SYMBOL - 230)) |
							(1 << (SQLSelectParser.DATE_SUB_SYMBOL - 230)) |
							(1 << (SQLSelectParser.EXTRACT_SYMBOL - 230)) |
							(1 << (SQLSelectParser.GET_FORMAT_SYMBOL - 230)) |
							(1 << (SQLSelectParser.NOW_SYMBOL - 230)) |
							(1 << (SQLSelectParser.POSITION_SYMBOL - 230)) |
							(1 << (SQLSelectParser.SYSDATE_SYMBOL - 230)) |
							(1 << (SQLSelectParser.TIMESTAMP_ADD_SYMBOL - 230)) |
							(1 << (SQLSelectParser.TIMESTAMP_DIFF_SYMBOL - 230)) |
							(1 << (SQLSelectParser.UTC_DATE_SYMBOL - 230)) |
							(1 << (SQLSelectParser.UTC_TIME_SYMBOL - 230)) |
							(1 << (SQLSelectParser.UTC_TIMESTAMP_SYMBOL - 230)) |
							(1 << (SQLSelectParser.ASCII_SYMBOL - 230)) |
							(1 << (SQLSelectParser.CHARSET_SYMBOL - 230)) |
							(1 << (SQLSelectParser.COALESCE_SYMBOL - 230)) |
							(1 << (SQLSelectParser.COLLATION_SYMBOL - 230)) |
							(1 << (SQLSelectParser.DATABASE_SYMBOL - 230)) |
							(1 << (SQLSelectParser.IF_SYMBOL - 230)) |
							(1 << (SQLSelectParser.FORMAT_SYMBOL - 230)) |
							(1 << (SQLSelectParser.MICROSECOND_SYMBOL - 230)) |
							(1 << (SQLSelectParser.OLD_PASSWORD_SYMBOL - 230)) |
							(1 << (SQLSelectParser.PASSWORD_SYMBOL - 230)) |
							(1 << (SQLSelectParser.REPEAT_SYMBOL - 230)) |
							(1 << (SQLSelectParser.REPLACE_SYMBOL - 230)) |
							(1 << (SQLSelectParser.REVERSE_SYMBOL - 230)) |
							(1 << (SQLSelectParser.ROW_COUNT_SYMBOL - 230)) |
							(1 << (SQLSelectParser.TRUNCATE_SYMBOL - 230)) |
							(1 << (SQLSelectParser.WEIGHT_STRING_SYMBOL - 230)) |
							(1 << (SQLSelectParser.CONTAINS_SYMBOL - 230)) |
							(1 << (SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL - 230)) |
							(1 << (SQLSelectParser.LINESTRING_SYMBOL - 230)) |
							(1 << (SQLSelectParser.MULTILINESTRING_SYMBOL - 230)))) !==
						0) ||
				(((_la - 262) & ~0x1f) == 0 &&
					((1 << (_la - 262)) &
						((1 << (SQLSelectParser.MULTIPOINT_SYMBOL - 262)) |
							(1 << (SQLSelectParser.MULTIPOLYGON_SYMBOL - 262)) |
							(1 << (SQLSelectParser.POINT_SYMBOL - 262)) |
							(1 << (SQLSelectParser.POLYGON_SYMBOL - 262)) |
							(1 << (SQLSelectParser.LEVEL_SYMBOL - 262)) |
							(1 << (SQLSelectParser.DATETIME_SYMBOL - 262)) |
							(1 << (SQLSelectParser.TRIM_SYMBOL - 262)) |
							(1 << (SQLSelectParser.LEADING_SYMBOL - 262)) |
							(1 << (SQLSelectParser.TRAILING_SYMBOL - 262)) |
							(1 << (SQLSelectParser.BOTH_SYMBOL - 262)) |
							(1 << (SQLSelectParser.STRING_SYMBOL - 262)) |
							(1 << (SQLSelectParser.SUBSTRING_SYMBOL - 262)) |
							(1 << (SQLSelectParser.WHEN_SYMBOL - 262)) |
							(1 << (SQLSelectParser.THEN_SYMBOL - 262)) |
							(1 << (SQLSelectParser.ELSE_SYMBOL - 262)) |
							(1 << (SQLSelectParser.SIGNED_SYMBOL - 262)) |
							(1 << (SQLSelectParser.UNSIGNED_SYMBOL - 262)) |
							(1 << (SQLSelectParser.DECIMAL_SYMBOL - 262)) |
							(1 << (SQLSelectParser.JSON_SYMBOL - 262)) |
							(1 << (SQLSelectParser.FLOAT_SYMBOL - 262)) |
							(1 << (SQLSelectParser.FLOAT_SYMBOL_4 - 262)) |
							(1 << (SQLSelectParser.FLOAT_SYMBOL_8 - 262)) |
							(1 << (SQLSelectParser.SET_SYMBOL - 262)) |
							(1 << (SQLSelectParser.SECOND_MICROSECOND_SYMBOL - 262)) |
							(1 << (SQLSelectParser.MINUTE_MICROSECOND_SYMBOL - 262)) |
							(1 << (SQLSelectParser.MINUTE_SECOND_SYMBOL - 262)) |
							(1 << (SQLSelectParser.HOUR_MICROSECOND_SYMBOL - 262)) |
							(1 << (SQLSelectParser.HOUR_SECOND_SYMBOL - 262)) |
							(1 << (SQLSelectParser.HOUR_MINUTE_SYMBOL - 262)) |
							(1 << (SQLSelectParser.DAY_MICROSECOND_SYMBOL - 262)) |
							(1 << (SQLSelectParser.DAY_SECOND_SYMBOL - 262)) |
							(1 << (SQLSelectParser.DAY_MINUTE_SYMBOL - 262)))) !==
						0) ||
				(((_la - 294) & ~0x1f) == 0 &&
					((1 << (_la - 294)) &
						((1 << (SQLSelectParser.DAY_HOUR_SYMBOL - 294)) |
							(1 << (SQLSelectParser.YEAR_MONTH_SYMBOL - 294)) |
							(1 << (SQLSelectParser.BTREE_SYMBOL - 294)) |
							(1 << (SQLSelectParser.RTREE_SYMBOL - 294)) |
							(1 << (SQLSelectParser.HASH_SYMBOL - 294)) |
							(1 << (SQLSelectParser.REAL_SYMBOL - 294)) |
							(1 << (SQLSelectParser.DOUBLE_SYMBOL - 294)) |
							(1 << (SQLSelectParser.PRECISION_SYMBOL - 294)) |
							(1 << (SQLSelectParser.NUMERIC_SYMBOL - 294)) |
							(1 << (SQLSelectParser.NUMBER_SYMBOL - 294)) |
							(1 << (SQLSelectParser.FIXED_SYMBOL - 294)) |
							(1 << (SQLSelectParser.BIT_SYMBOL - 294)) |
							(1 << (SQLSelectParser.BOOL_SYMBOL - 294)) |
							(1 << (SQLSelectParser.VARYING_SYMBOL - 294)) |
							(1 << (SQLSelectParser.VARCHAR_SYMBOL - 294)) |
							(1 << (SQLSelectParser.VARCHAR2_SYMBOL - 294)) |
							(1 << (SQLSelectParser.NATIONAL_SYMBOL - 294)) |
							(1 << (SQLSelectParser.NVARCHAR_SYMBOL - 294)) |
							(1 << (SQLSelectParser.NVARCHAR2_SYMBOL - 294)) |
							(1 << (SQLSelectParser.NCHAR_SYMBOL - 294)) |
							(1 << (SQLSelectParser.VARBINARY_SYMBOL - 294)) |
							(1 << (SQLSelectParser.TINYBLOB_SYMBOL - 294)) |
							(1 << (SQLSelectParser.BLOB_SYMBOL - 294)) |
							(1 << (SQLSelectParser.CLOB_SYMBOL - 294)) |
							(1 << (SQLSelectParser.BFILE_SYMBOL - 294)) |
							(1 << (SQLSelectParser.RAW_SYMBOL - 294)) |
							(1 << (SQLSelectParser.MEDIUMBLOB_SYMBOL - 294)) |
							(1 << (SQLSelectParser.LONGBLOB_SYMBOL - 294)) |
							(1 << (SQLSelectParser.LONG_SYMBOL - 294)) |
							(1 << (SQLSelectParser.TINYTEXT_SYMBOL - 294)) |
							(1 << (SQLSelectParser.TEXT_SYMBOL - 294)) |
							(1 << (SQLSelectParser.MEDIUMTEXT_SYMBOL - 294)))) !==
						0) ||
				(((_la - 326) & ~0x1f) == 0 &&
					((1 << (_la - 326)) &
						((1 << (SQLSelectParser.LONGTEXT_SYMBOL - 326)) |
							(1 << (SQLSelectParser.ENUM_SYMBOL - 326)) |
							(1 << (SQLSelectParser.SERIAL_SYMBOL - 326)) |
							(1 << (SQLSelectParser.GEOMETRY_SYMBOL - 326)) |
							(1 << (SQLSelectParser.ZEROFILL_SYMBOL - 326)) |
							(1 << (SQLSelectParser.BYTE_SYMBOL - 326)) |
							(1 << (SQLSelectParser.UNICODE_SYMBOL - 326)) |
							(1 << (SQLSelectParser.TERMINATED_SYMBOL - 326)) |
							(1 << (SQLSelectParser.OPTIONALLY_SYMBOL - 326)) |
							(1 << (SQLSelectParser.ENCLOSED_SYMBOL - 326)) |
							(1 << (SQLSelectParser.ESCAPED_SYMBOL - 326)) |
							(1 << (SQLSelectParser.LINES_SYMBOL - 326)) |
							(1 << (SQLSelectParser.STARTING_SYMBOL - 326)) |
							(1 << (SQLSelectParser.GLOBAL_SYMBOL - 326)) |
							(1 << (SQLSelectParser.LOCAL_SYMBOL - 326)) |
							(1 << (SQLSelectParser.SESSION_SYMBOL - 326)) |
							(1 << (SQLSelectParser.VARIANT_SYMBOL - 326)) |
							(1 << (SQLSelectParser.OBJECT_SYMBOL - 326)) |
							(1 << (SQLSelectParser.GEOGRAPHY_SYMBOL - 326)) |
							(1 << (SQLSelectParser.UNDERSCORE_CHARSET - 326)) |
							(1 << (SQLSelectParser.IDENTIFIER - 326)) |
							(1 << (SQLSelectParser.NCHAR_TEXT - 326)) |
							(1 << (SQLSelectParser.BACK_TICK_QUOTED_ID - 326)) |
							(1 << (SQLSelectParser.DOUBLE_QUOTED_TEXT - 326)) |
							(1 << (SQLSelectParser.SINGLE_QUOTED_TEXT - 326)) |
							(1 << (SQLSelectParser.BRACKET_QUOTED_TEXT - 326)) |
							(1 << (SQLSelectParser.CURLY_BRACES_QUOTED_TEXT - 326)))) !==
						0)
			) {
				this.state = 722;
				this.values();
			}

			this.state = 725;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	selectOption() {
		let localctx = new SelectOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 78, SQLSelectParser.RULE_selectOption);
		try {
			this.state = 733;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.ALL_SYMBOL:
				case SQLSelectParser.DISTINCT_SYMBOL:
				case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
				case SQLSelectParser.HIGH_PRIORITY_SYMBOL:
				case SQLSelectParser.SQL_SMALL_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BIG_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL:
				case SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 727;
					this.querySpecOption();
					break;
				case SQLSelectParser.SQL_NO_CACHE_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 728;
					this.match(SQLSelectParser.SQL_NO_CACHE_SYMBOL);
					break;
				case SQLSelectParser.SQL_CACHE_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 729;
					this.match(SQLSelectParser.SQL_CACHE_SYMBOL);
					break;
				case SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL:
					this.enterOuterAlt(localctx, 4);
					this.state = 730;
					this.match(SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL);
					this.state = 731;
					this.match(SQLSelectParser.EQUAL_OPERATOR);
					this.state = 732;
					this.real_ulong_number();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	lockingClauseList() {
		let localctx = new LockingClauseListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 80, SQLSelectParser.RULE_lockingClauseList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 736;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				this.state = 735;
				this.lockingClause();
				this.state = 738;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === SQLSelectParser.FOR_SYMBOL || _la === SQLSelectParser.LOCK_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	lockingClause() {
		let localctx = new LockingClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 82, SQLSelectParser.RULE_lockingClause);
		var _la = 0; // Token type
		try {
			this.state = 753;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.FOR_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 740;
					this.match(SQLSelectParser.FOR_SYMBOL);
					this.state = 741;
					this.lockStrengh();
					this.state = 744;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.OF_SYMBOL) {
						this.state = 742;
						this.match(SQLSelectParser.OF_SYMBOL);
						this.state = 743;
						this.tableAliasRefList();
					}

					this.state = 747;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.SKIP_SYMBOL || _la === SQLSelectParser.NOWAIT_SYMBOL) {
						this.state = 746;
						this.lockedRowAction();
					}

					break;
				case SQLSelectParser.LOCK_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 749;
					this.match(SQLSelectParser.LOCK_SYMBOL);
					this.state = 750;
					this.match(SQLSelectParser.IN_SYMBOL);
					this.state = 751;
					this.match(SQLSelectParser.SHARE_SYMBOL);
					this.state = 752;
					this.match(SQLSelectParser.MODE_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	lockStrengh() {
		let localctx = new LockStrenghContext(this, this._ctx, this.state);
		this.enterRule(localctx, 84, SQLSelectParser.RULE_lockStrengh);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 755;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.SHARE_SYMBOL || _la === SQLSelectParser.UPDATE_SYMBOL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	lockedRowAction() {
		let localctx = new LockedRowActionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 86, SQLSelectParser.RULE_lockedRowAction);
		try {
			this.state = 760;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.SKIP_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 757;
					this.match(SQLSelectParser.SKIP_SYMBOL);
					this.state = 758;
					this.match(SQLSelectParser.LOCKED_SYMBOL);
					break;
				case SQLSelectParser.NOWAIT_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 759;
					this.match(SQLSelectParser.NOWAIT_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	selectItemList() {
		let localctx = new SelectItemListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 88, SQLSelectParser.RULE_selectItemList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 764;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.PLUS_OPERATOR:
				case SQLSelectParser.MINUS_OPERATOR:
				case SQLSelectParser.LOGICAL_NOT_OPERATOR:
				case SQLSelectParser.BITWISE_NOT_OPERATOR:
				case SQLSelectParser.OPEN_PAR_SYMBOL:
				case SQLSelectParser.OPEN_CURLY_SYMBOL:
				case SQLSelectParser.AT_SIGN_SYMBOL:
				case SQLSelectParser.AT_TEXT_SUFFIX:
				case SQLSelectParser.AT_AT_SIGN_SYMBOL:
				case SQLSelectParser.NULL2_SYMBOL:
				case SQLSelectParser.PARAM_MARKER:
				case SQLSelectParser.HEX_NUMBER:
				case SQLSelectParser.BIN_NUMBER:
				case SQLSelectParser.INT_NUMBER:
				case SQLSelectParser.DECIMAL_NUMBER:
				case SQLSelectParser.FLOAT_NUMBER:
				case SQLSelectParser.TINYINT_SYMBOL:
				case SQLSelectParser.SMALLINT_SYMBOL:
				case SQLSelectParser.MEDIUMINT_SYMBOL:
				case SQLSelectParser.BYTE_INT_SYMBOL:
				case SQLSelectParser.INT_SYMBOL:
				case SQLSelectParser.BIGINT_SYMBOL:
				case SQLSelectParser.SECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SYMBOL:
				case SQLSelectParser.HOUR_SYMBOL:
				case SQLSelectParser.DAY_SYMBOL:
				case SQLSelectParser.WEEK_SYMBOL:
				case SQLSelectParser.MONTH_SYMBOL:
				case SQLSelectParser.QUARTER_SYMBOL:
				case SQLSelectParser.YEAR_SYMBOL:
				case SQLSelectParser.DEFAULT_SYMBOL:
				case SQLSelectParser.UNION_SYMBOL:
				case SQLSelectParser.SELECT_SYMBOL:
				case SQLSelectParser.ALL_SYMBOL:
				case SQLSelectParser.DISTINCT_SYMBOL:
				case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
				case SQLSelectParser.HIGH_PRIORITY_SYMBOL:
				case SQLSelectParser.SQL_SMALL_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BIG_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL:
				case SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL:
				case SQLSelectParser.LIMIT_SYMBOL:
				case SQLSelectParser.OFFSET_SYMBOL:
				case SQLSelectParser.INTO_SYMBOL:
				case SQLSelectParser.OUTFILE_SYMBOL:
				case SQLSelectParser.DUMPFILE_SYMBOL:
				case SQLSelectParser.PROCEDURE_SYMBOL:
				case SQLSelectParser.ANALYSE_SYMBOL:
				case SQLSelectParser.HAVING_SYMBOL:
				case SQLSelectParser.WINDOW_SYMBOL:
				case SQLSelectParser.AS_SYMBOL:
				case SQLSelectParser.PARTITION_SYMBOL:
				case SQLSelectParser.BY_SYMBOL:
				case SQLSelectParser.ROWS_SYMBOL:
				case SQLSelectParser.RANGE_SYMBOL:
				case SQLSelectParser.GROUPS_SYMBOL:
				case SQLSelectParser.UNBOUNDED_SYMBOL:
				case SQLSelectParser.PRECEDING_SYMBOL:
				case SQLSelectParser.INTERVAL_SYMBOL:
				case SQLSelectParser.CURRENT_SYMBOL:
				case SQLSelectParser.ROW_SYMBOL:
				case SQLSelectParser.BETWEEN_SYMBOL:
				case SQLSelectParser.AND_SYMBOL:
				case SQLSelectParser.FOLLOWING_SYMBOL:
				case SQLSelectParser.EXCLUDE_SYMBOL:
				case SQLSelectParser.GROUP_SYMBOL:
				case SQLSelectParser.TIES_SYMBOL:
				case SQLSelectParser.NO_SYMBOL:
				case SQLSelectParser.OTHERS_SYMBOL:
				case SQLSelectParser.WITH_SYMBOL:
				case SQLSelectParser.WITHOUT_SYMBOL:
				case SQLSelectParser.RECURSIVE_SYMBOL:
				case SQLSelectParser.ROLLUP_SYMBOL:
				case SQLSelectParser.CUBE_SYMBOL:
				case SQLSelectParser.ORDER_SYMBOL:
				case SQLSelectParser.ASC_SYMBOL:
				case SQLSelectParser.DESC_SYMBOL:
				case SQLSelectParser.FROM_SYMBOL:
				case SQLSelectParser.DUAL_SYMBOL:
				case SQLSelectParser.VALUES_SYMBOL:
				case SQLSelectParser.TABLE_SYMBOL:
				case SQLSelectParser.SQL_NO_CACHE_SYMBOL:
				case SQLSelectParser.SQL_CACHE_SYMBOL:
				case SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL:
				case SQLSelectParser.FOR_SYMBOL:
				case SQLSelectParser.OF_SYMBOL:
				case SQLSelectParser.LOCK_SYMBOL:
				case SQLSelectParser.IN_SYMBOL:
				case SQLSelectParser.SHARE_SYMBOL:
				case SQLSelectParser.MODE_SYMBOL:
				case SQLSelectParser.UPDATE_SYMBOL:
				case SQLSelectParser.SKIP_SYMBOL:
				case SQLSelectParser.LOCKED_SYMBOL:
				case SQLSelectParser.NOWAIT_SYMBOL:
				case SQLSelectParser.WHERE_SYMBOL:
				case SQLSelectParser.OJ_SYMBOL:
				case SQLSelectParser.ON_SYMBOL:
				case SQLSelectParser.USING_SYMBOL:
				case SQLSelectParser.NATURAL_SYMBOL:
				case SQLSelectParser.INNER_SYMBOL:
				case SQLSelectParser.JOIN_SYMBOL:
				case SQLSelectParser.LEFT_SYMBOL:
				case SQLSelectParser.RIGHT_SYMBOL:
				case SQLSelectParser.OUTER_SYMBOL:
				case SQLSelectParser.CROSS_SYMBOL:
				case SQLSelectParser.LATERAL_SYMBOL:
				case SQLSelectParser.JSON_TABLE_SYMBOL:
				case SQLSelectParser.COLUMNS_SYMBOL:
				case SQLSelectParser.ORDINALITY_SYMBOL:
				case SQLSelectParser.EXISTS_SYMBOL:
				case SQLSelectParser.PATH_SYMBOL:
				case SQLSelectParser.NESTED_SYMBOL:
				case SQLSelectParser.EMPTY_SYMBOL:
				case SQLSelectParser.ERROR_SYMBOL:
				case SQLSelectParser.NULL_SYMBOL:
				case SQLSelectParser.USE_SYMBOL:
				case SQLSelectParser.FORCE_SYMBOL:
				case SQLSelectParser.IGNORE_SYMBOL:
				case SQLSelectParser.KEY_SYMBOL:
				case SQLSelectParser.INDEX_SYMBOL:
				case SQLSelectParser.PRIMARY_SYMBOL:
				case SQLSelectParser.IS_SYMBOL:
				case SQLSelectParser.TRUE_SYMBOL:
				case SQLSelectParser.FALSE_SYMBOL:
				case SQLSelectParser.UNKNOWN_SYMBOL:
				case SQLSelectParser.NOT_SYMBOL:
				case SQLSelectParser.XOR_SYMBOL:
				case SQLSelectParser.OR_SYMBOL:
				case SQLSelectParser.ANY_SYMBOL:
				case SQLSelectParser.MEMBER_SYMBOL:
				case SQLSelectParser.SOUNDS_SYMBOL:
				case SQLSelectParser.LIKE_SYMBOL:
				case SQLSelectParser.ESCAPE_SYMBOL:
				case SQLSelectParser.REGEXP_SYMBOL:
				case SQLSelectParser.DIV_SYMBOL:
				case SQLSelectParser.MOD_SYMBOL:
				case SQLSelectParser.MATCH_SYMBOL:
				case SQLSelectParser.AGAINST_SYMBOL:
				case SQLSelectParser.BINARY_SYMBOL:
				case SQLSelectParser.CAST_SYMBOL:
				case SQLSelectParser.ARRAY_SYMBOL:
				case SQLSelectParser.CASE_SYMBOL:
				case SQLSelectParser.END_SYMBOL:
				case SQLSelectParser.CONVERT_SYMBOL:
				case SQLSelectParser.COLLATE_SYMBOL:
				case SQLSelectParser.AVG_SYMBOL:
				case SQLSelectParser.BIT_AND_SYMBOL:
				case SQLSelectParser.BIT_OR_SYMBOL:
				case SQLSelectParser.BIT_XOR_SYMBOL:
				case SQLSelectParser.COUNT_SYMBOL:
				case SQLSelectParser.MIN_SYMBOL:
				case SQLSelectParser.MAX_SYMBOL:
				case SQLSelectParser.STD_SYMBOL:
				case SQLSelectParser.VARIANCE_SYMBOL:
				case SQLSelectParser.STDDEV_SAMP_SYMBOL:
				case SQLSelectParser.VAR_SAMP_SYMBOL:
				case SQLSelectParser.SUM_SYMBOL:
				case SQLSelectParser.GROUP_CONCAT_SYMBOL:
				case SQLSelectParser.SEPARATOR_SYMBOL:
				case SQLSelectParser.GROUPING_SYMBOL:
				case SQLSelectParser.ROW_NUMBER_SYMBOL:
				case SQLSelectParser.RANK_SYMBOL:
				case SQLSelectParser.DENSE_RANK_SYMBOL:
				case SQLSelectParser.CUME_DIST_SYMBOL:
				case SQLSelectParser.PERCENT_RANK_SYMBOL:
				case SQLSelectParser.NTILE_SYMBOL:
				case SQLSelectParser.LEAD_SYMBOL:
				case SQLSelectParser.LAG_SYMBOL:
				case SQLSelectParser.FIRST_VALUE_SYMBOL:
				case SQLSelectParser.LAST_VALUE_SYMBOL:
				case SQLSelectParser.NTH_VALUE_SYMBOL:
				case SQLSelectParser.FIRST_SYMBOL:
				case SQLSelectParser.LAST_SYMBOL:
				case SQLSelectParser.OVER_SYMBOL:
				case SQLSelectParser.RESPECT_SYMBOL:
				case SQLSelectParser.NULLS_SYMBOL:
				case SQLSelectParser.JSON_ARRAYAGG_SYMBOL:
				case SQLSelectParser.JSON_OBJECTAGG_SYMBOL:
				case SQLSelectParser.BOOLEAN_SYMBOL:
				case SQLSelectParser.LANGUAGE_SYMBOL:
				case SQLSelectParser.QUERY_SYMBOL:
				case SQLSelectParser.EXPANSION_SYMBOL:
				case SQLSelectParser.CHAR_SYMBOL:
				case SQLSelectParser.CURRENT_USER_SYMBOL:
				case SQLSelectParser.DATE_SYMBOL:
				case SQLSelectParser.INSERT_SYMBOL:
				case SQLSelectParser.TIME_SYMBOL:
				case SQLSelectParser.TIMESTAMP_SYMBOL:
				case SQLSelectParser.TIMESTAMP_LTZ_SYMBOL:
				case SQLSelectParser.TIMESTAMP_NTZ_SYMBOL:
				case SQLSelectParser.ZONE_SYMBOL:
				case SQLSelectParser.USER_SYMBOL:
				case SQLSelectParser.ADDDATE_SYMBOL:
				case SQLSelectParser.SUBDATE_SYMBOL:
				case SQLSelectParser.CURDATE_SYMBOL:
				case SQLSelectParser.CURTIME_SYMBOL:
				case SQLSelectParser.DATE_ADD_SYMBOL:
				case SQLSelectParser.DATE_SUB_SYMBOL:
				case SQLSelectParser.EXTRACT_SYMBOL:
				case SQLSelectParser.GET_FORMAT_SYMBOL:
				case SQLSelectParser.NOW_SYMBOL:
				case SQLSelectParser.POSITION_SYMBOL:
				case SQLSelectParser.SYSDATE_SYMBOL:
				case SQLSelectParser.TIMESTAMP_ADD_SYMBOL:
				case SQLSelectParser.TIMESTAMP_DIFF_SYMBOL:
				case SQLSelectParser.UTC_DATE_SYMBOL:
				case SQLSelectParser.UTC_TIME_SYMBOL:
				case SQLSelectParser.UTC_TIMESTAMP_SYMBOL:
				case SQLSelectParser.ASCII_SYMBOL:
				case SQLSelectParser.CHARSET_SYMBOL:
				case SQLSelectParser.COALESCE_SYMBOL:
				case SQLSelectParser.COLLATION_SYMBOL:
				case SQLSelectParser.DATABASE_SYMBOL:
				case SQLSelectParser.IF_SYMBOL:
				case SQLSelectParser.FORMAT_SYMBOL:
				case SQLSelectParser.MICROSECOND_SYMBOL:
				case SQLSelectParser.OLD_PASSWORD_SYMBOL:
				case SQLSelectParser.PASSWORD_SYMBOL:
				case SQLSelectParser.REPEAT_SYMBOL:
				case SQLSelectParser.REPLACE_SYMBOL:
				case SQLSelectParser.REVERSE_SYMBOL:
				case SQLSelectParser.ROW_COUNT_SYMBOL:
				case SQLSelectParser.TRUNCATE_SYMBOL:
				case SQLSelectParser.WEIGHT_STRING_SYMBOL:
				case SQLSelectParser.CONTAINS_SYMBOL:
				case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
				case SQLSelectParser.LINESTRING_SYMBOL:
				case SQLSelectParser.MULTILINESTRING_SYMBOL:
				case SQLSelectParser.MULTIPOINT_SYMBOL:
				case SQLSelectParser.MULTIPOLYGON_SYMBOL:
				case SQLSelectParser.POINT_SYMBOL:
				case SQLSelectParser.POLYGON_SYMBOL:
				case SQLSelectParser.LEVEL_SYMBOL:
				case SQLSelectParser.DATETIME_SYMBOL:
				case SQLSelectParser.TRIM_SYMBOL:
				case SQLSelectParser.LEADING_SYMBOL:
				case SQLSelectParser.TRAILING_SYMBOL:
				case SQLSelectParser.BOTH_SYMBOL:
				case SQLSelectParser.STRING_SYMBOL:
				case SQLSelectParser.SUBSTRING_SYMBOL:
				case SQLSelectParser.WHEN_SYMBOL:
				case SQLSelectParser.THEN_SYMBOL:
				case SQLSelectParser.ELSE_SYMBOL:
				case SQLSelectParser.SIGNED_SYMBOL:
				case SQLSelectParser.UNSIGNED_SYMBOL:
				case SQLSelectParser.DECIMAL_SYMBOL:
				case SQLSelectParser.JSON_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL_4:
				case SQLSelectParser.FLOAT_SYMBOL_8:
				case SQLSelectParser.SET_SYMBOL:
				case SQLSelectParser.SECOND_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MICROSECOND_SYMBOL:
				case SQLSelectParser.HOUR_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_MICROSECOND_SYMBOL:
				case SQLSelectParser.DAY_SECOND_SYMBOL:
				case SQLSelectParser.DAY_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_HOUR_SYMBOL:
				case SQLSelectParser.YEAR_MONTH_SYMBOL:
				case SQLSelectParser.BTREE_SYMBOL:
				case SQLSelectParser.RTREE_SYMBOL:
				case SQLSelectParser.HASH_SYMBOL:
				case SQLSelectParser.REAL_SYMBOL:
				case SQLSelectParser.DOUBLE_SYMBOL:
				case SQLSelectParser.PRECISION_SYMBOL:
				case SQLSelectParser.NUMERIC_SYMBOL:
				case SQLSelectParser.NUMBER_SYMBOL:
				case SQLSelectParser.FIXED_SYMBOL:
				case SQLSelectParser.BIT_SYMBOL:
				case SQLSelectParser.BOOL_SYMBOL:
				case SQLSelectParser.VARYING_SYMBOL:
				case SQLSelectParser.VARCHAR_SYMBOL:
				case SQLSelectParser.VARCHAR2_SYMBOL:
				case SQLSelectParser.NATIONAL_SYMBOL:
				case SQLSelectParser.NVARCHAR_SYMBOL:
				case SQLSelectParser.NVARCHAR2_SYMBOL:
				case SQLSelectParser.NCHAR_SYMBOL:
				case SQLSelectParser.VARBINARY_SYMBOL:
				case SQLSelectParser.TINYBLOB_SYMBOL:
				case SQLSelectParser.BLOB_SYMBOL:
				case SQLSelectParser.CLOB_SYMBOL:
				case SQLSelectParser.BFILE_SYMBOL:
				case SQLSelectParser.RAW_SYMBOL:
				case SQLSelectParser.MEDIUMBLOB_SYMBOL:
				case SQLSelectParser.LONGBLOB_SYMBOL:
				case SQLSelectParser.LONG_SYMBOL:
				case SQLSelectParser.TINYTEXT_SYMBOL:
				case SQLSelectParser.TEXT_SYMBOL:
				case SQLSelectParser.MEDIUMTEXT_SYMBOL:
				case SQLSelectParser.LONGTEXT_SYMBOL:
				case SQLSelectParser.ENUM_SYMBOL:
				case SQLSelectParser.SERIAL_SYMBOL:
				case SQLSelectParser.GEOMETRY_SYMBOL:
				case SQLSelectParser.ZEROFILL_SYMBOL:
				case SQLSelectParser.BYTE_SYMBOL:
				case SQLSelectParser.UNICODE_SYMBOL:
				case SQLSelectParser.TERMINATED_SYMBOL:
				case SQLSelectParser.OPTIONALLY_SYMBOL:
				case SQLSelectParser.ENCLOSED_SYMBOL:
				case SQLSelectParser.ESCAPED_SYMBOL:
				case SQLSelectParser.LINES_SYMBOL:
				case SQLSelectParser.STARTING_SYMBOL:
				case SQLSelectParser.GLOBAL_SYMBOL:
				case SQLSelectParser.LOCAL_SYMBOL:
				case SQLSelectParser.SESSION_SYMBOL:
				case SQLSelectParser.VARIANT_SYMBOL:
				case SQLSelectParser.OBJECT_SYMBOL:
				case SQLSelectParser.GEOGRAPHY_SYMBOL:
				case SQLSelectParser.UNDERSCORE_CHARSET:
				case SQLSelectParser.IDENTIFIER:
				case SQLSelectParser.NCHAR_TEXT:
				case SQLSelectParser.BACK_TICK_QUOTED_ID:
				case SQLSelectParser.DOUBLE_QUOTED_TEXT:
				case SQLSelectParser.SINGLE_QUOTED_TEXT:
				case SQLSelectParser.BRACKET_QUOTED_TEXT:
				case SQLSelectParser.CURLY_BRACES_QUOTED_TEXT:
					this.state = 762;
					this.selectItem();
					break;
				case SQLSelectParser.MULT_OPERATOR:
					this.state = 763;
					this.match(SQLSelectParser.MULT_OPERATOR);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 770;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 766;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 767;
				this.selectItem();
				this.state = 772;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	selectItem() {
		let localctx = new SelectItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 90, SQLSelectParser.RULE_selectItem);
		try {
			this.state = 784;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 79, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 775;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 76, this._ctx);
					switch (la_) {
						case 1:
							this.state = 773;
							this.qualifiedIdentifier();
							break;

						case 2:
							this.state = 774;
							this.jsonPathIdentifier();
							break;
					}
					this.state = 778;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 77, this._ctx);
					if (la_ === 1) {
						this.state = 777;
						this.selectAlias();
					}
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 780;
					this.expr(0);
					this.state = 782;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 78, this._ctx);
					if (la_ === 1) {
						this.state = 781;
						this.selectAlias();
					}
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	selectAlias() {
		let localctx = new SelectAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 92, SQLSelectParser.RULE_selectAlias);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 787;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 80, this._ctx);
			if (la_ === 1) {
				this.state = 786;
				this.match(SQLSelectParser.AS_SYMBOL);
			}
			this.state = 791;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 81, this._ctx);
			switch (la_) {
				case 1:
					this.state = 789;
					this.identifier();
					break;

				case 2:
					this.state = 790;
					this.textStringLiteral();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	whereClause() {
		let localctx = new WhereClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 94, SQLSelectParser.RULE_whereClause);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 793;
			this.match(SQLSelectParser.WHERE_SYMBOL);
			this.state = 794;
			this.expr(0);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	qualifyClause() {
		let localctx = new QualifyClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 96, SQLSelectParser.RULE_qualifyClause);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 796;
			this.match(SQLSelectParser.QUALIFY_SYMBOL);
			this.state = 797;
			this.expr(0);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	tableReference() {
		let localctx = new TableReferenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 98, SQLSelectParser.RULE_tableReference);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 808;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.OPEN_PAR_SYMBOL:
				case SQLSelectParser.TINYINT_SYMBOL:
				case SQLSelectParser.SMALLINT_SYMBOL:
				case SQLSelectParser.MEDIUMINT_SYMBOL:
				case SQLSelectParser.BYTE_INT_SYMBOL:
				case SQLSelectParser.INT_SYMBOL:
				case SQLSelectParser.BIGINT_SYMBOL:
				case SQLSelectParser.SECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SYMBOL:
				case SQLSelectParser.HOUR_SYMBOL:
				case SQLSelectParser.DAY_SYMBOL:
				case SQLSelectParser.WEEK_SYMBOL:
				case SQLSelectParser.MONTH_SYMBOL:
				case SQLSelectParser.QUARTER_SYMBOL:
				case SQLSelectParser.YEAR_SYMBOL:
				case SQLSelectParser.DEFAULT_SYMBOL:
				case SQLSelectParser.UNION_SYMBOL:
				case SQLSelectParser.SELECT_SYMBOL:
				case SQLSelectParser.ALL_SYMBOL:
				case SQLSelectParser.DISTINCT_SYMBOL:
				case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
				case SQLSelectParser.HIGH_PRIORITY_SYMBOL:
				case SQLSelectParser.SQL_SMALL_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BIG_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL:
				case SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL:
				case SQLSelectParser.LIMIT_SYMBOL:
				case SQLSelectParser.OFFSET_SYMBOL:
				case SQLSelectParser.INTO_SYMBOL:
				case SQLSelectParser.OUTFILE_SYMBOL:
				case SQLSelectParser.DUMPFILE_SYMBOL:
				case SQLSelectParser.PROCEDURE_SYMBOL:
				case SQLSelectParser.ANALYSE_SYMBOL:
				case SQLSelectParser.HAVING_SYMBOL:
				case SQLSelectParser.WINDOW_SYMBOL:
				case SQLSelectParser.AS_SYMBOL:
				case SQLSelectParser.PARTITION_SYMBOL:
				case SQLSelectParser.BY_SYMBOL:
				case SQLSelectParser.ROWS_SYMBOL:
				case SQLSelectParser.RANGE_SYMBOL:
				case SQLSelectParser.GROUPS_SYMBOL:
				case SQLSelectParser.UNBOUNDED_SYMBOL:
				case SQLSelectParser.PRECEDING_SYMBOL:
				case SQLSelectParser.INTERVAL_SYMBOL:
				case SQLSelectParser.CURRENT_SYMBOL:
				case SQLSelectParser.ROW_SYMBOL:
				case SQLSelectParser.BETWEEN_SYMBOL:
				case SQLSelectParser.AND_SYMBOL:
				case SQLSelectParser.FOLLOWING_SYMBOL:
				case SQLSelectParser.EXCLUDE_SYMBOL:
				case SQLSelectParser.GROUP_SYMBOL:
				case SQLSelectParser.TIES_SYMBOL:
				case SQLSelectParser.NO_SYMBOL:
				case SQLSelectParser.OTHERS_SYMBOL:
				case SQLSelectParser.WITH_SYMBOL:
				case SQLSelectParser.WITHOUT_SYMBOL:
				case SQLSelectParser.RECURSIVE_SYMBOL:
				case SQLSelectParser.ROLLUP_SYMBOL:
				case SQLSelectParser.CUBE_SYMBOL:
				case SQLSelectParser.ORDER_SYMBOL:
				case SQLSelectParser.ASC_SYMBOL:
				case SQLSelectParser.DESC_SYMBOL:
				case SQLSelectParser.FROM_SYMBOL:
				case SQLSelectParser.DUAL_SYMBOL:
				case SQLSelectParser.VALUES_SYMBOL:
				case SQLSelectParser.TABLE_SYMBOL:
				case SQLSelectParser.SQL_NO_CACHE_SYMBOL:
				case SQLSelectParser.SQL_CACHE_SYMBOL:
				case SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL:
				case SQLSelectParser.FOR_SYMBOL:
				case SQLSelectParser.OF_SYMBOL:
				case SQLSelectParser.LOCK_SYMBOL:
				case SQLSelectParser.IN_SYMBOL:
				case SQLSelectParser.SHARE_SYMBOL:
				case SQLSelectParser.MODE_SYMBOL:
				case SQLSelectParser.UPDATE_SYMBOL:
				case SQLSelectParser.SKIP_SYMBOL:
				case SQLSelectParser.LOCKED_SYMBOL:
				case SQLSelectParser.NOWAIT_SYMBOL:
				case SQLSelectParser.WHERE_SYMBOL:
				case SQLSelectParser.OJ_SYMBOL:
				case SQLSelectParser.ON_SYMBOL:
				case SQLSelectParser.USING_SYMBOL:
				case SQLSelectParser.NATURAL_SYMBOL:
				case SQLSelectParser.INNER_SYMBOL:
				case SQLSelectParser.JOIN_SYMBOL:
				case SQLSelectParser.LEFT_SYMBOL:
				case SQLSelectParser.RIGHT_SYMBOL:
				case SQLSelectParser.OUTER_SYMBOL:
				case SQLSelectParser.CROSS_SYMBOL:
				case SQLSelectParser.LATERAL_SYMBOL:
				case SQLSelectParser.JSON_TABLE_SYMBOL:
				case SQLSelectParser.COLUMNS_SYMBOL:
				case SQLSelectParser.ORDINALITY_SYMBOL:
				case SQLSelectParser.EXISTS_SYMBOL:
				case SQLSelectParser.PATH_SYMBOL:
				case SQLSelectParser.NESTED_SYMBOL:
				case SQLSelectParser.EMPTY_SYMBOL:
				case SQLSelectParser.ERROR_SYMBOL:
				case SQLSelectParser.NULL_SYMBOL:
				case SQLSelectParser.USE_SYMBOL:
				case SQLSelectParser.FORCE_SYMBOL:
				case SQLSelectParser.IGNORE_SYMBOL:
				case SQLSelectParser.KEY_SYMBOL:
				case SQLSelectParser.INDEX_SYMBOL:
				case SQLSelectParser.PRIMARY_SYMBOL:
				case SQLSelectParser.IS_SYMBOL:
				case SQLSelectParser.TRUE_SYMBOL:
				case SQLSelectParser.FALSE_SYMBOL:
				case SQLSelectParser.UNKNOWN_SYMBOL:
				case SQLSelectParser.NOT_SYMBOL:
				case SQLSelectParser.XOR_SYMBOL:
				case SQLSelectParser.OR_SYMBOL:
				case SQLSelectParser.ANY_SYMBOL:
				case SQLSelectParser.MEMBER_SYMBOL:
				case SQLSelectParser.SOUNDS_SYMBOL:
				case SQLSelectParser.LIKE_SYMBOL:
				case SQLSelectParser.ESCAPE_SYMBOL:
				case SQLSelectParser.REGEXP_SYMBOL:
				case SQLSelectParser.DIV_SYMBOL:
				case SQLSelectParser.MOD_SYMBOL:
				case SQLSelectParser.MATCH_SYMBOL:
				case SQLSelectParser.AGAINST_SYMBOL:
				case SQLSelectParser.BINARY_SYMBOL:
				case SQLSelectParser.CAST_SYMBOL:
				case SQLSelectParser.ARRAY_SYMBOL:
				case SQLSelectParser.CASE_SYMBOL:
				case SQLSelectParser.END_SYMBOL:
				case SQLSelectParser.CONVERT_SYMBOL:
				case SQLSelectParser.COLLATE_SYMBOL:
				case SQLSelectParser.AVG_SYMBOL:
				case SQLSelectParser.BIT_AND_SYMBOL:
				case SQLSelectParser.BIT_OR_SYMBOL:
				case SQLSelectParser.BIT_XOR_SYMBOL:
				case SQLSelectParser.COUNT_SYMBOL:
				case SQLSelectParser.MIN_SYMBOL:
				case SQLSelectParser.MAX_SYMBOL:
				case SQLSelectParser.STD_SYMBOL:
				case SQLSelectParser.VARIANCE_SYMBOL:
				case SQLSelectParser.STDDEV_SAMP_SYMBOL:
				case SQLSelectParser.VAR_SAMP_SYMBOL:
				case SQLSelectParser.SUM_SYMBOL:
				case SQLSelectParser.GROUP_CONCAT_SYMBOL:
				case SQLSelectParser.SEPARATOR_SYMBOL:
				case SQLSelectParser.GROUPING_SYMBOL:
				case SQLSelectParser.ROW_NUMBER_SYMBOL:
				case SQLSelectParser.RANK_SYMBOL:
				case SQLSelectParser.DENSE_RANK_SYMBOL:
				case SQLSelectParser.CUME_DIST_SYMBOL:
				case SQLSelectParser.PERCENT_RANK_SYMBOL:
				case SQLSelectParser.NTILE_SYMBOL:
				case SQLSelectParser.LEAD_SYMBOL:
				case SQLSelectParser.LAG_SYMBOL:
				case SQLSelectParser.FIRST_VALUE_SYMBOL:
				case SQLSelectParser.LAST_VALUE_SYMBOL:
				case SQLSelectParser.NTH_VALUE_SYMBOL:
				case SQLSelectParser.FIRST_SYMBOL:
				case SQLSelectParser.LAST_SYMBOL:
				case SQLSelectParser.OVER_SYMBOL:
				case SQLSelectParser.RESPECT_SYMBOL:
				case SQLSelectParser.NULLS_SYMBOL:
				case SQLSelectParser.JSON_ARRAYAGG_SYMBOL:
				case SQLSelectParser.JSON_OBJECTAGG_SYMBOL:
				case SQLSelectParser.BOOLEAN_SYMBOL:
				case SQLSelectParser.LANGUAGE_SYMBOL:
				case SQLSelectParser.QUERY_SYMBOL:
				case SQLSelectParser.EXPANSION_SYMBOL:
				case SQLSelectParser.CHAR_SYMBOL:
				case SQLSelectParser.CURRENT_USER_SYMBOL:
				case SQLSelectParser.DATE_SYMBOL:
				case SQLSelectParser.INSERT_SYMBOL:
				case SQLSelectParser.TIME_SYMBOL:
				case SQLSelectParser.TIMESTAMP_SYMBOL:
				case SQLSelectParser.TIMESTAMP_LTZ_SYMBOL:
				case SQLSelectParser.TIMESTAMP_NTZ_SYMBOL:
				case SQLSelectParser.ZONE_SYMBOL:
				case SQLSelectParser.USER_SYMBOL:
				case SQLSelectParser.ADDDATE_SYMBOL:
				case SQLSelectParser.SUBDATE_SYMBOL:
				case SQLSelectParser.CURDATE_SYMBOL:
				case SQLSelectParser.CURTIME_SYMBOL:
				case SQLSelectParser.DATE_ADD_SYMBOL:
				case SQLSelectParser.DATE_SUB_SYMBOL:
				case SQLSelectParser.EXTRACT_SYMBOL:
				case SQLSelectParser.GET_FORMAT_SYMBOL:
				case SQLSelectParser.NOW_SYMBOL:
				case SQLSelectParser.POSITION_SYMBOL:
				case SQLSelectParser.SYSDATE_SYMBOL:
				case SQLSelectParser.TIMESTAMP_ADD_SYMBOL:
				case SQLSelectParser.TIMESTAMP_DIFF_SYMBOL:
				case SQLSelectParser.UTC_DATE_SYMBOL:
				case SQLSelectParser.UTC_TIME_SYMBOL:
				case SQLSelectParser.UTC_TIMESTAMP_SYMBOL:
				case SQLSelectParser.ASCII_SYMBOL:
				case SQLSelectParser.CHARSET_SYMBOL:
				case SQLSelectParser.COALESCE_SYMBOL:
				case SQLSelectParser.COLLATION_SYMBOL:
				case SQLSelectParser.DATABASE_SYMBOL:
				case SQLSelectParser.IF_SYMBOL:
				case SQLSelectParser.FORMAT_SYMBOL:
				case SQLSelectParser.MICROSECOND_SYMBOL:
				case SQLSelectParser.OLD_PASSWORD_SYMBOL:
				case SQLSelectParser.PASSWORD_SYMBOL:
				case SQLSelectParser.REPEAT_SYMBOL:
				case SQLSelectParser.REPLACE_SYMBOL:
				case SQLSelectParser.REVERSE_SYMBOL:
				case SQLSelectParser.ROW_COUNT_SYMBOL:
				case SQLSelectParser.TRUNCATE_SYMBOL:
				case SQLSelectParser.WEIGHT_STRING_SYMBOL:
				case SQLSelectParser.CONTAINS_SYMBOL:
				case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
				case SQLSelectParser.LINESTRING_SYMBOL:
				case SQLSelectParser.MULTILINESTRING_SYMBOL:
				case SQLSelectParser.MULTIPOINT_SYMBOL:
				case SQLSelectParser.MULTIPOLYGON_SYMBOL:
				case SQLSelectParser.POINT_SYMBOL:
				case SQLSelectParser.POLYGON_SYMBOL:
				case SQLSelectParser.LEVEL_SYMBOL:
				case SQLSelectParser.DATETIME_SYMBOL:
				case SQLSelectParser.TRIM_SYMBOL:
				case SQLSelectParser.LEADING_SYMBOL:
				case SQLSelectParser.TRAILING_SYMBOL:
				case SQLSelectParser.BOTH_SYMBOL:
				case SQLSelectParser.STRING_SYMBOL:
				case SQLSelectParser.SUBSTRING_SYMBOL:
				case SQLSelectParser.WHEN_SYMBOL:
				case SQLSelectParser.THEN_SYMBOL:
				case SQLSelectParser.ELSE_SYMBOL:
				case SQLSelectParser.SIGNED_SYMBOL:
				case SQLSelectParser.UNSIGNED_SYMBOL:
				case SQLSelectParser.DECIMAL_SYMBOL:
				case SQLSelectParser.JSON_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL_4:
				case SQLSelectParser.FLOAT_SYMBOL_8:
				case SQLSelectParser.SET_SYMBOL:
				case SQLSelectParser.SECOND_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MICROSECOND_SYMBOL:
				case SQLSelectParser.HOUR_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_MICROSECOND_SYMBOL:
				case SQLSelectParser.DAY_SECOND_SYMBOL:
				case SQLSelectParser.DAY_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_HOUR_SYMBOL:
				case SQLSelectParser.YEAR_MONTH_SYMBOL:
				case SQLSelectParser.BTREE_SYMBOL:
				case SQLSelectParser.RTREE_SYMBOL:
				case SQLSelectParser.HASH_SYMBOL:
				case SQLSelectParser.REAL_SYMBOL:
				case SQLSelectParser.DOUBLE_SYMBOL:
				case SQLSelectParser.PRECISION_SYMBOL:
				case SQLSelectParser.NUMERIC_SYMBOL:
				case SQLSelectParser.NUMBER_SYMBOL:
				case SQLSelectParser.FIXED_SYMBOL:
				case SQLSelectParser.BIT_SYMBOL:
				case SQLSelectParser.BOOL_SYMBOL:
				case SQLSelectParser.VARYING_SYMBOL:
				case SQLSelectParser.VARCHAR_SYMBOL:
				case SQLSelectParser.VARCHAR2_SYMBOL:
				case SQLSelectParser.NATIONAL_SYMBOL:
				case SQLSelectParser.NVARCHAR_SYMBOL:
				case SQLSelectParser.NVARCHAR2_SYMBOL:
				case SQLSelectParser.NCHAR_SYMBOL:
				case SQLSelectParser.VARBINARY_SYMBOL:
				case SQLSelectParser.TINYBLOB_SYMBOL:
				case SQLSelectParser.BLOB_SYMBOL:
				case SQLSelectParser.CLOB_SYMBOL:
				case SQLSelectParser.BFILE_SYMBOL:
				case SQLSelectParser.RAW_SYMBOL:
				case SQLSelectParser.MEDIUMBLOB_SYMBOL:
				case SQLSelectParser.LONGBLOB_SYMBOL:
				case SQLSelectParser.LONG_SYMBOL:
				case SQLSelectParser.TINYTEXT_SYMBOL:
				case SQLSelectParser.TEXT_SYMBOL:
				case SQLSelectParser.MEDIUMTEXT_SYMBOL:
				case SQLSelectParser.LONGTEXT_SYMBOL:
				case SQLSelectParser.ENUM_SYMBOL:
				case SQLSelectParser.SERIAL_SYMBOL:
				case SQLSelectParser.GEOMETRY_SYMBOL:
				case SQLSelectParser.ZEROFILL_SYMBOL:
				case SQLSelectParser.BYTE_SYMBOL:
				case SQLSelectParser.UNICODE_SYMBOL:
				case SQLSelectParser.TERMINATED_SYMBOL:
				case SQLSelectParser.OPTIONALLY_SYMBOL:
				case SQLSelectParser.ENCLOSED_SYMBOL:
				case SQLSelectParser.ESCAPED_SYMBOL:
				case SQLSelectParser.LINES_SYMBOL:
				case SQLSelectParser.STARTING_SYMBOL:
				case SQLSelectParser.GLOBAL_SYMBOL:
				case SQLSelectParser.LOCAL_SYMBOL:
				case SQLSelectParser.SESSION_SYMBOL:
				case SQLSelectParser.VARIANT_SYMBOL:
				case SQLSelectParser.OBJECT_SYMBOL:
				case SQLSelectParser.GEOGRAPHY_SYMBOL:
				case SQLSelectParser.UNDERSCORE_CHARSET:
				case SQLSelectParser.IDENTIFIER:
				case SQLSelectParser.BACK_TICK_QUOTED_ID:
				case SQLSelectParser.DOUBLE_QUOTED_TEXT:
				case SQLSelectParser.SINGLE_QUOTED_TEXT:
				case SQLSelectParser.BRACKET_QUOTED_TEXT:
				case SQLSelectParser.CURLY_BRACES_QUOTED_TEXT:
					this.state = 799;
					this.tableFactor();
					break;
				case SQLSelectParser.OPEN_CURLY_SYMBOL:
					this.state = 800;
					this.match(SQLSelectParser.OPEN_CURLY_SYMBOL);
					this.state = 803;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 82, this._ctx);
					switch (la_) {
						case 1:
							this.state = 801;
							this.identifier();
							break;

						case 2:
							this.state = 802;
							this.match(SQLSelectParser.OJ_SYMBOL);
							break;
					}
					this.state = 805;
					this.escapedTableReference();
					this.state = 806;
					this.match(SQLSelectParser.CLOSE_CURLY_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 813;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 84, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 810;
					this.joinedTable();
				}
				this.state = 815;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 84, this._ctx);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	escapedTableReference() {
		let localctx = new EscapedTableReferenceContext(this, this._ctx, this.state);
		this.enterRule(localctx, 100, SQLSelectParser.RULE_escapedTableReference);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 816;
			this.tableFactor();
			this.state = 820;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (
				_la === SQLSelectParser.STRAIGHT_JOIN_SYMBOL ||
				(((_la - 132) & ~0x1f) == 0 &&
					((1 << (_la - 132)) &
						((1 << (SQLSelectParser.NATURAL_SYMBOL - 132)) |
							(1 << (SQLSelectParser.INNER_SYMBOL - 132)) |
							(1 << (SQLSelectParser.JOIN_SYMBOL - 132)) |
							(1 << (SQLSelectParser.LEFT_SYMBOL - 132)) |
							(1 << (SQLSelectParser.RIGHT_SYMBOL - 132)) |
							(1 << (SQLSelectParser.CROSS_SYMBOL - 132)))) !==
						0)
			) {
				this.state = 817;
				this.joinedTable();
				this.state = 822;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	joinedTable() {
		let localctx = new JoinedTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 102, SQLSelectParser.RULE_joinedTable);
		try {
			this.state = 842;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
				case SQLSelectParser.INNER_SYMBOL:
				case SQLSelectParser.JOIN_SYMBOL:
				case SQLSelectParser.CROSS_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 823;
					this.innerJoinType();
					this.state = 824;
					this.tableReference();
					this.state = 829;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 86, this._ctx);
					if (la_ === 1) {
						this.state = 825;
						this.match(SQLSelectParser.ON_SYMBOL);
						this.state = 826;
						this.expr(0);
					} else if (la_ === 2) {
						this.state = 827;
						this.match(SQLSelectParser.USING_SYMBOL);
						this.state = 828;
						this.identifierListWithParentheses();
					}
					break;
				case SQLSelectParser.LEFT_SYMBOL:
				case SQLSelectParser.RIGHT_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 831;
					this.outerJoinType();
					this.state = 832;
					this.tableReference();
					this.state = 837;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLSelectParser.ON_SYMBOL:
							this.state = 833;
							this.match(SQLSelectParser.ON_SYMBOL);
							this.state = 834;
							this.expr(0);
							break;
						case SQLSelectParser.USING_SYMBOL:
							this.state = 835;
							this.match(SQLSelectParser.USING_SYMBOL);
							this.state = 836;
							this.identifierListWithParentheses();
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					break;
				case SQLSelectParser.NATURAL_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 839;
					this.naturalJoinType();
					this.state = 840;
					this.tableFactor();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	naturalJoinType() {
		let localctx = new NaturalJoinTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 104, SQLSelectParser.RULE_naturalJoinType);
		var _la = 0; // Token type
		try {
			this.state = 855;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 91, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 844;
					this.match(SQLSelectParser.NATURAL_SYMBOL);
					this.state = 846;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.INNER_SYMBOL) {
						this.state = 845;
						this.match(SQLSelectParser.INNER_SYMBOL);
					}

					this.state = 848;
					this.match(SQLSelectParser.JOIN_SYMBOL);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 849;
					this.match(SQLSelectParser.NATURAL_SYMBOL);
					this.state = 850;
					_la = this._input.LA(1);
					if (!(_la === SQLSelectParser.LEFT_SYMBOL || _la === SQLSelectParser.RIGHT_SYMBOL)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 852;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.OUTER_SYMBOL) {
						this.state = 851;
						this.match(SQLSelectParser.OUTER_SYMBOL);
					}

					this.state = 854;
					this.match(SQLSelectParser.JOIN_SYMBOL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	innerJoinType() {
		let localctx = new InnerJoinTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 106, SQLSelectParser.RULE_innerJoinType);
		var _la = 0; // Token type
		try {
			this.state = 862;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.INNER_SYMBOL:
				case SQLSelectParser.JOIN_SYMBOL:
				case SQLSelectParser.CROSS_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 858;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.INNER_SYMBOL || _la === SQLSelectParser.CROSS_SYMBOL) {
						this.state = 857;
						_la = this._input.LA(1);
						if (!(_la === SQLSelectParser.INNER_SYMBOL || _la === SQLSelectParser.CROSS_SYMBOL)) {
							this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
					}

					this.state = 860;
					this.match(SQLSelectParser.JOIN_SYMBOL);
					break;
				case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 861;
					this.match(SQLSelectParser.STRAIGHT_JOIN_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	outerJoinType() {
		let localctx = new OuterJoinTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 108, SQLSelectParser.RULE_outerJoinType);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 864;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.LEFT_SYMBOL || _la === SQLSelectParser.RIGHT_SYMBOL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 866;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.OUTER_SYMBOL) {
				this.state = 865;
				this.match(SQLSelectParser.OUTER_SYMBOL);
			}

			this.state = 868;
			this.match(SQLSelectParser.JOIN_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	tableFactor() {
		let localctx = new TableFactorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 110, SQLSelectParser.RULE_tableFactor);
		try {
			this.state = 875;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 870;
					this.singleTable();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 871;
					this.singleTableParens();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 872;
					this.derivedTable();
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 873;
					this.tableReferenceListParens();
					break;

				case 5:
					this.enterOuterAlt(localctx, 5);
					this.state = 874;
					this.tableFunction();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	singleTable() {
		let localctx = new SingleTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 112, SQLSelectParser.RULE_singleTable);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 877;
			this.qualifiedIdentifier();
			this.state = 879;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 96, this._ctx);
			if (la_ === 1) {
				this.state = 878;
				this.usePartition();
			}
			this.state = 882;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 97, this._ctx);
			if (la_ === 1) {
				this.state = 881;
				this.tableAlias();
			}
			this.state = 885;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (
				((_la - 149) & ~0x1f) == 0 &&
				((1 << (_la - 149)) &
					((1 << (SQLSelectParser.USE_SYMBOL - 149)) |
						(1 << (SQLSelectParser.FORCE_SYMBOL - 149)) |
						(1 << (SQLSelectParser.IGNORE_SYMBOL - 149)))) !==
					0
			) {
				this.state = 884;
				this.indexHintList();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	singleTableParens() {
		let localctx = new SingleTableParensContext(this, this._ctx, this.state);
		this.enterRule(localctx, 114, SQLSelectParser.RULE_singleTableParens);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 887;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 890;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.TINYINT_SYMBOL:
				case SQLSelectParser.SMALLINT_SYMBOL:
				case SQLSelectParser.MEDIUMINT_SYMBOL:
				case SQLSelectParser.BYTE_INT_SYMBOL:
				case SQLSelectParser.INT_SYMBOL:
				case SQLSelectParser.BIGINT_SYMBOL:
				case SQLSelectParser.SECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SYMBOL:
				case SQLSelectParser.HOUR_SYMBOL:
				case SQLSelectParser.DAY_SYMBOL:
				case SQLSelectParser.WEEK_SYMBOL:
				case SQLSelectParser.MONTH_SYMBOL:
				case SQLSelectParser.QUARTER_SYMBOL:
				case SQLSelectParser.YEAR_SYMBOL:
				case SQLSelectParser.DEFAULT_SYMBOL:
				case SQLSelectParser.UNION_SYMBOL:
				case SQLSelectParser.SELECT_SYMBOL:
				case SQLSelectParser.ALL_SYMBOL:
				case SQLSelectParser.DISTINCT_SYMBOL:
				case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
				case SQLSelectParser.HIGH_PRIORITY_SYMBOL:
				case SQLSelectParser.SQL_SMALL_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BIG_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL:
				case SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL:
				case SQLSelectParser.LIMIT_SYMBOL:
				case SQLSelectParser.OFFSET_SYMBOL:
				case SQLSelectParser.INTO_SYMBOL:
				case SQLSelectParser.OUTFILE_SYMBOL:
				case SQLSelectParser.DUMPFILE_SYMBOL:
				case SQLSelectParser.PROCEDURE_SYMBOL:
				case SQLSelectParser.ANALYSE_SYMBOL:
				case SQLSelectParser.HAVING_SYMBOL:
				case SQLSelectParser.WINDOW_SYMBOL:
				case SQLSelectParser.AS_SYMBOL:
				case SQLSelectParser.PARTITION_SYMBOL:
				case SQLSelectParser.BY_SYMBOL:
				case SQLSelectParser.ROWS_SYMBOL:
				case SQLSelectParser.RANGE_SYMBOL:
				case SQLSelectParser.GROUPS_SYMBOL:
				case SQLSelectParser.UNBOUNDED_SYMBOL:
				case SQLSelectParser.PRECEDING_SYMBOL:
				case SQLSelectParser.INTERVAL_SYMBOL:
				case SQLSelectParser.CURRENT_SYMBOL:
				case SQLSelectParser.ROW_SYMBOL:
				case SQLSelectParser.BETWEEN_SYMBOL:
				case SQLSelectParser.AND_SYMBOL:
				case SQLSelectParser.FOLLOWING_SYMBOL:
				case SQLSelectParser.EXCLUDE_SYMBOL:
				case SQLSelectParser.GROUP_SYMBOL:
				case SQLSelectParser.TIES_SYMBOL:
				case SQLSelectParser.NO_SYMBOL:
				case SQLSelectParser.OTHERS_SYMBOL:
				case SQLSelectParser.WITH_SYMBOL:
				case SQLSelectParser.WITHOUT_SYMBOL:
				case SQLSelectParser.RECURSIVE_SYMBOL:
				case SQLSelectParser.ROLLUP_SYMBOL:
				case SQLSelectParser.CUBE_SYMBOL:
				case SQLSelectParser.ORDER_SYMBOL:
				case SQLSelectParser.ASC_SYMBOL:
				case SQLSelectParser.DESC_SYMBOL:
				case SQLSelectParser.FROM_SYMBOL:
				case SQLSelectParser.DUAL_SYMBOL:
				case SQLSelectParser.VALUES_SYMBOL:
				case SQLSelectParser.TABLE_SYMBOL:
				case SQLSelectParser.SQL_NO_CACHE_SYMBOL:
				case SQLSelectParser.SQL_CACHE_SYMBOL:
				case SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL:
				case SQLSelectParser.FOR_SYMBOL:
				case SQLSelectParser.OF_SYMBOL:
				case SQLSelectParser.LOCK_SYMBOL:
				case SQLSelectParser.IN_SYMBOL:
				case SQLSelectParser.SHARE_SYMBOL:
				case SQLSelectParser.MODE_SYMBOL:
				case SQLSelectParser.UPDATE_SYMBOL:
				case SQLSelectParser.SKIP_SYMBOL:
				case SQLSelectParser.LOCKED_SYMBOL:
				case SQLSelectParser.NOWAIT_SYMBOL:
				case SQLSelectParser.WHERE_SYMBOL:
				case SQLSelectParser.OJ_SYMBOL:
				case SQLSelectParser.ON_SYMBOL:
				case SQLSelectParser.USING_SYMBOL:
				case SQLSelectParser.NATURAL_SYMBOL:
				case SQLSelectParser.INNER_SYMBOL:
				case SQLSelectParser.JOIN_SYMBOL:
				case SQLSelectParser.LEFT_SYMBOL:
				case SQLSelectParser.RIGHT_SYMBOL:
				case SQLSelectParser.OUTER_SYMBOL:
				case SQLSelectParser.CROSS_SYMBOL:
				case SQLSelectParser.LATERAL_SYMBOL:
				case SQLSelectParser.JSON_TABLE_SYMBOL:
				case SQLSelectParser.COLUMNS_SYMBOL:
				case SQLSelectParser.ORDINALITY_SYMBOL:
				case SQLSelectParser.EXISTS_SYMBOL:
				case SQLSelectParser.PATH_SYMBOL:
				case SQLSelectParser.NESTED_SYMBOL:
				case SQLSelectParser.EMPTY_SYMBOL:
				case SQLSelectParser.ERROR_SYMBOL:
				case SQLSelectParser.NULL_SYMBOL:
				case SQLSelectParser.USE_SYMBOL:
				case SQLSelectParser.FORCE_SYMBOL:
				case SQLSelectParser.IGNORE_SYMBOL:
				case SQLSelectParser.KEY_SYMBOL:
				case SQLSelectParser.INDEX_SYMBOL:
				case SQLSelectParser.PRIMARY_SYMBOL:
				case SQLSelectParser.IS_SYMBOL:
				case SQLSelectParser.TRUE_SYMBOL:
				case SQLSelectParser.FALSE_SYMBOL:
				case SQLSelectParser.UNKNOWN_SYMBOL:
				case SQLSelectParser.NOT_SYMBOL:
				case SQLSelectParser.XOR_SYMBOL:
				case SQLSelectParser.OR_SYMBOL:
				case SQLSelectParser.ANY_SYMBOL:
				case SQLSelectParser.MEMBER_SYMBOL:
				case SQLSelectParser.SOUNDS_SYMBOL:
				case SQLSelectParser.LIKE_SYMBOL:
				case SQLSelectParser.ESCAPE_SYMBOL:
				case SQLSelectParser.REGEXP_SYMBOL:
				case SQLSelectParser.DIV_SYMBOL:
				case SQLSelectParser.MOD_SYMBOL:
				case SQLSelectParser.MATCH_SYMBOL:
				case SQLSelectParser.AGAINST_SYMBOL:
				case SQLSelectParser.BINARY_SYMBOL:
				case SQLSelectParser.CAST_SYMBOL:
				case SQLSelectParser.ARRAY_SYMBOL:
				case SQLSelectParser.CASE_SYMBOL:
				case SQLSelectParser.END_SYMBOL:
				case SQLSelectParser.CONVERT_SYMBOL:
				case SQLSelectParser.COLLATE_SYMBOL:
				case SQLSelectParser.AVG_SYMBOL:
				case SQLSelectParser.BIT_AND_SYMBOL:
				case SQLSelectParser.BIT_OR_SYMBOL:
				case SQLSelectParser.BIT_XOR_SYMBOL:
				case SQLSelectParser.COUNT_SYMBOL:
				case SQLSelectParser.MIN_SYMBOL:
				case SQLSelectParser.MAX_SYMBOL:
				case SQLSelectParser.STD_SYMBOL:
				case SQLSelectParser.VARIANCE_SYMBOL:
				case SQLSelectParser.STDDEV_SAMP_SYMBOL:
				case SQLSelectParser.VAR_SAMP_SYMBOL:
				case SQLSelectParser.SUM_SYMBOL:
				case SQLSelectParser.GROUP_CONCAT_SYMBOL:
				case SQLSelectParser.SEPARATOR_SYMBOL:
				case SQLSelectParser.GROUPING_SYMBOL:
				case SQLSelectParser.ROW_NUMBER_SYMBOL:
				case SQLSelectParser.RANK_SYMBOL:
				case SQLSelectParser.DENSE_RANK_SYMBOL:
				case SQLSelectParser.CUME_DIST_SYMBOL:
				case SQLSelectParser.PERCENT_RANK_SYMBOL:
				case SQLSelectParser.NTILE_SYMBOL:
				case SQLSelectParser.LEAD_SYMBOL:
				case SQLSelectParser.LAG_SYMBOL:
				case SQLSelectParser.FIRST_VALUE_SYMBOL:
				case SQLSelectParser.LAST_VALUE_SYMBOL:
				case SQLSelectParser.NTH_VALUE_SYMBOL:
				case SQLSelectParser.FIRST_SYMBOL:
				case SQLSelectParser.LAST_SYMBOL:
				case SQLSelectParser.OVER_SYMBOL:
				case SQLSelectParser.RESPECT_SYMBOL:
				case SQLSelectParser.NULLS_SYMBOL:
				case SQLSelectParser.JSON_ARRAYAGG_SYMBOL:
				case SQLSelectParser.JSON_OBJECTAGG_SYMBOL:
				case SQLSelectParser.BOOLEAN_SYMBOL:
				case SQLSelectParser.LANGUAGE_SYMBOL:
				case SQLSelectParser.QUERY_SYMBOL:
				case SQLSelectParser.EXPANSION_SYMBOL:
				case SQLSelectParser.CHAR_SYMBOL:
				case SQLSelectParser.CURRENT_USER_SYMBOL:
				case SQLSelectParser.DATE_SYMBOL:
				case SQLSelectParser.INSERT_SYMBOL:
				case SQLSelectParser.TIME_SYMBOL:
				case SQLSelectParser.TIMESTAMP_SYMBOL:
				case SQLSelectParser.TIMESTAMP_LTZ_SYMBOL:
				case SQLSelectParser.TIMESTAMP_NTZ_SYMBOL:
				case SQLSelectParser.ZONE_SYMBOL:
				case SQLSelectParser.USER_SYMBOL:
				case SQLSelectParser.ADDDATE_SYMBOL:
				case SQLSelectParser.SUBDATE_SYMBOL:
				case SQLSelectParser.CURDATE_SYMBOL:
				case SQLSelectParser.CURTIME_SYMBOL:
				case SQLSelectParser.DATE_ADD_SYMBOL:
				case SQLSelectParser.DATE_SUB_SYMBOL:
				case SQLSelectParser.EXTRACT_SYMBOL:
				case SQLSelectParser.GET_FORMAT_SYMBOL:
				case SQLSelectParser.NOW_SYMBOL:
				case SQLSelectParser.POSITION_SYMBOL:
				case SQLSelectParser.SYSDATE_SYMBOL:
				case SQLSelectParser.TIMESTAMP_ADD_SYMBOL:
				case SQLSelectParser.TIMESTAMP_DIFF_SYMBOL:
				case SQLSelectParser.UTC_DATE_SYMBOL:
				case SQLSelectParser.UTC_TIME_SYMBOL:
				case SQLSelectParser.UTC_TIMESTAMP_SYMBOL:
				case SQLSelectParser.ASCII_SYMBOL:
				case SQLSelectParser.CHARSET_SYMBOL:
				case SQLSelectParser.COALESCE_SYMBOL:
				case SQLSelectParser.COLLATION_SYMBOL:
				case SQLSelectParser.DATABASE_SYMBOL:
				case SQLSelectParser.IF_SYMBOL:
				case SQLSelectParser.FORMAT_SYMBOL:
				case SQLSelectParser.MICROSECOND_SYMBOL:
				case SQLSelectParser.OLD_PASSWORD_SYMBOL:
				case SQLSelectParser.PASSWORD_SYMBOL:
				case SQLSelectParser.REPEAT_SYMBOL:
				case SQLSelectParser.REPLACE_SYMBOL:
				case SQLSelectParser.REVERSE_SYMBOL:
				case SQLSelectParser.ROW_COUNT_SYMBOL:
				case SQLSelectParser.TRUNCATE_SYMBOL:
				case SQLSelectParser.WEIGHT_STRING_SYMBOL:
				case SQLSelectParser.CONTAINS_SYMBOL:
				case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
				case SQLSelectParser.LINESTRING_SYMBOL:
				case SQLSelectParser.MULTILINESTRING_SYMBOL:
				case SQLSelectParser.MULTIPOINT_SYMBOL:
				case SQLSelectParser.MULTIPOLYGON_SYMBOL:
				case SQLSelectParser.POINT_SYMBOL:
				case SQLSelectParser.POLYGON_SYMBOL:
				case SQLSelectParser.LEVEL_SYMBOL:
				case SQLSelectParser.DATETIME_SYMBOL:
				case SQLSelectParser.TRIM_SYMBOL:
				case SQLSelectParser.LEADING_SYMBOL:
				case SQLSelectParser.TRAILING_SYMBOL:
				case SQLSelectParser.BOTH_SYMBOL:
				case SQLSelectParser.STRING_SYMBOL:
				case SQLSelectParser.SUBSTRING_SYMBOL:
				case SQLSelectParser.WHEN_SYMBOL:
				case SQLSelectParser.THEN_SYMBOL:
				case SQLSelectParser.ELSE_SYMBOL:
				case SQLSelectParser.SIGNED_SYMBOL:
				case SQLSelectParser.UNSIGNED_SYMBOL:
				case SQLSelectParser.DECIMAL_SYMBOL:
				case SQLSelectParser.JSON_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL_4:
				case SQLSelectParser.FLOAT_SYMBOL_8:
				case SQLSelectParser.SET_SYMBOL:
				case SQLSelectParser.SECOND_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MICROSECOND_SYMBOL:
				case SQLSelectParser.HOUR_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_MICROSECOND_SYMBOL:
				case SQLSelectParser.DAY_SECOND_SYMBOL:
				case SQLSelectParser.DAY_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_HOUR_SYMBOL:
				case SQLSelectParser.YEAR_MONTH_SYMBOL:
				case SQLSelectParser.BTREE_SYMBOL:
				case SQLSelectParser.RTREE_SYMBOL:
				case SQLSelectParser.HASH_SYMBOL:
				case SQLSelectParser.REAL_SYMBOL:
				case SQLSelectParser.DOUBLE_SYMBOL:
				case SQLSelectParser.PRECISION_SYMBOL:
				case SQLSelectParser.NUMERIC_SYMBOL:
				case SQLSelectParser.NUMBER_SYMBOL:
				case SQLSelectParser.FIXED_SYMBOL:
				case SQLSelectParser.BIT_SYMBOL:
				case SQLSelectParser.BOOL_SYMBOL:
				case SQLSelectParser.VARYING_SYMBOL:
				case SQLSelectParser.VARCHAR_SYMBOL:
				case SQLSelectParser.VARCHAR2_SYMBOL:
				case SQLSelectParser.NATIONAL_SYMBOL:
				case SQLSelectParser.NVARCHAR_SYMBOL:
				case SQLSelectParser.NVARCHAR2_SYMBOL:
				case SQLSelectParser.NCHAR_SYMBOL:
				case SQLSelectParser.VARBINARY_SYMBOL:
				case SQLSelectParser.TINYBLOB_SYMBOL:
				case SQLSelectParser.BLOB_SYMBOL:
				case SQLSelectParser.CLOB_SYMBOL:
				case SQLSelectParser.BFILE_SYMBOL:
				case SQLSelectParser.RAW_SYMBOL:
				case SQLSelectParser.MEDIUMBLOB_SYMBOL:
				case SQLSelectParser.LONGBLOB_SYMBOL:
				case SQLSelectParser.LONG_SYMBOL:
				case SQLSelectParser.TINYTEXT_SYMBOL:
				case SQLSelectParser.TEXT_SYMBOL:
				case SQLSelectParser.MEDIUMTEXT_SYMBOL:
				case SQLSelectParser.LONGTEXT_SYMBOL:
				case SQLSelectParser.ENUM_SYMBOL:
				case SQLSelectParser.SERIAL_SYMBOL:
				case SQLSelectParser.GEOMETRY_SYMBOL:
				case SQLSelectParser.ZEROFILL_SYMBOL:
				case SQLSelectParser.BYTE_SYMBOL:
				case SQLSelectParser.UNICODE_SYMBOL:
				case SQLSelectParser.TERMINATED_SYMBOL:
				case SQLSelectParser.OPTIONALLY_SYMBOL:
				case SQLSelectParser.ENCLOSED_SYMBOL:
				case SQLSelectParser.ESCAPED_SYMBOL:
				case SQLSelectParser.LINES_SYMBOL:
				case SQLSelectParser.STARTING_SYMBOL:
				case SQLSelectParser.GLOBAL_SYMBOL:
				case SQLSelectParser.LOCAL_SYMBOL:
				case SQLSelectParser.SESSION_SYMBOL:
				case SQLSelectParser.VARIANT_SYMBOL:
				case SQLSelectParser.OBJECT_SYMBOL:
				case SQLSelectParser.GEOGRAPHY_SYMBOL:
				case SQLSelectParser.UNDERSCORE_CHARSET:
				case SQLSelectParser.IDENTIFIER:
				case SQLSelectParser.BACK_TICK_QUOTED_ID:
				case SQLSelectParser.DOUBLE_QUOTED_TEXT:
				case SQLSelectParser.SINGLE_QUOTED_TEXT:
				case SQLSelectParser.BRACKET_QUOTED_TEXT:
				case SQLSelectParser.CURLY_BRACES_QUOTED_TEXT:
					this.state = 888;
					this.singleTable();
					break;
				case SQLSelectParser.OPEN_PAR_SYMBOL:
					this.state = 889;
					this.singleTableParens();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 892;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	derivedTable() {
		let localctx = new DerivedTableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 116, SQLSelectParser.RULE_derivedTable);
		var _la = 0; // Token type
		try {
			this.state = 909;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.OPEN_PAR_SYMBOL:
				case SQLSelectParser.SELECT_SYMBOL:
				case SQLSelectParser.WITH_SYMBOL:
				case SQLSelectParser.VALUES_SYMBOL:
				case SQLSelectParser.TABLE_SYMBOL:
				case SQLSelectParser.FOR_SYMBOL:
				case SQLSelectParser.LOCK_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 894;
					this.subquery();
					this.state = 896;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 100, this._ctx);
					if (la_ === 1) {
						this.state = 895;
						this.tableAlias();
					}
					this.state = 899;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.OPEN_PAR_SYMBOL) {
						this.state = 898;
						this.columnInternalRefList();
					}

					break;
				case SQLSelectParser.LATERAL_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 901;
					this.match(SQLSelectParser.LATERAL_SYMBOL);
					this.state = 902;
					this.subquery();
					this.state = 904;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 102, this._ctx);
					if (la_ === 1) {
						this.state = 903;
						this.tableAlias();
					}
					this.state = 907;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.OPEN_PAR_SYMBOL) {
						this.state = 906;
						this.columnInternalRefList();
					}

					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	tableReferenceListParens() {
		let localctx = new TableReferenceListParensContext(this, this._ctx, this.state);
		this.enterRule(localctx, 118, SQLSelectParser.RULE_tableReferenceListParens);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 911;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 914;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 105, this._ctx);
			switch (la_) {
				case 1:
					this.state = 912;
					this.tableReferenceList();
					break;

				case 2:
					this.state = 913;
					this.tableReferenceListParens();
					break;
			}
			this.state = 916;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	tableFunction() {
		let localctx = new TableFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 120, SQLSelectParser.RULE_tableFunction);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 918;
			this.match(SQLSelectParser.JSON_TABLE_SYMBOL);
			this.state = 919;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 920;
			this.expr(0);
			this.state = 921;
			this.match(SQLSelectParser.COMMA_SYMBOL);
			this.state = 922;
			this.textStringLiteral();
			this.state = 923;
			this.columnsClause();
			this.state = 924;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
			this.state = 926;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 106, this._ctx);
			if (la_ === 1) {
				this.state = 925;
				this.tableAlias();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	columnsClause() {
		let localctx = new ColumnsClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 122, SQLSelectParser.RULE_columnsClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 928;
			this.match(SQLSelectParser.COLUMNS_SYMBOL);
			this.state = 929;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 930;
			this.jtColumn();
			this.state = 935;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 931;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 932;
				this.jtColumn();
				this.state = 937;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 938;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	jtColumn() {
		let localctx = new JtColumnContext(this, this._ctx, this.state);
		this.enterRule(localctx, 124, SQLSelectParser.RULE_jtColumn);
		var _la = 0; // Token type
		try {
			this.state = 962;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 111, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 940;
					this.identifier();
					this.state = 941;
					this.match(SQLSelectParser.FOR_SYMBOL);
					this.state = 942;
					this.match(SQLSelectParser.ORDINALITY_SYMBOL);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 944;
					this.identifier();
					this.state = 945;
					this.dataType();
					this.state = 947;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.COLLATE_SYMBOL) {
						this.state = 946;
						this.collate();
					}

					this.state = 950;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.EXISTS_SYMBOL) {
						this.state = 949;
						this.match(SQLSelectParser.EXISTS_SYMBOL);
					}

					this.state = 952;
					this.match(SQLSelectParser.PATH_SYMBOL);
					this.state = 953;
					this.textStringLiteral();
					this.state = 955;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (
						_la === SQLSelectParser.DEFAULT_SYMBOL ||
						_la === SQLSelectParser.ERROR_SYMBOL ||
						_la === SQLSelectParser.NULL_SYMBOL
					) {
						this.state = 954;
						this.onEmptyOrError();
					}

					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 957;
					this.match(SQLSelectParser.NESTED_SYMBOL);
					this.state = 958;
					this.match(SQLSelectParser.PATH_SYMBOL);
					this.state = 959;
					this.textStringLiteral();
					this.state = 960;
					this.columnsClause();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	onEmptyOrError() {
		let localctx = new OnEmptyOrErrorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 126, SQLSelectParser.RULE_onEmptyOrError);
		var _la = 0; // Token type
		try {
			this.state = 972;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 114, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 964;
					this.onEmpty();
					this.state = 966;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (
						_la === SQLSelectParser.DEFAULT_SYMBOL ||
						_la === SQLSelectParser.ERROR_SYMBOL ||
						_la === SQLSelectParser.NULL_SYMBOL
					) {
						this.state = 965;
						this.onError();
					}

					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 968;
					this.onError();
					this.state = 970;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (
						_la === SQLSelectParser.DEFAULT_SYMBOL ||
						_la === SQLSelectParser.ERROR_SYMBOL ||
						_la === SQLSelectParser.NULL_SYMBOL
					) {
						this.state = 969;
						this.onEmpty();
					}

					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	onEmpty() {
		let localctx = new OnEmptyContext(this, this._ctx, this.state);
		this.enterRule(localctx, 128, SQLSelectParser.RULE_onEmpty);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 974;
			this.jtOnResponse();
			this.state = 975;
			this.match(SQLSelectParser.ON_SYMBOL);
			this.state = 976;
			this.match(SQLSelectParser.EMPTY_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	onError() {
		let localctx = new OnErrorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 130, SQLSelectParser.RULE_onError);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 978;
			this.jtOnResponse();
			this.state = 979;
			this.match(SQLSelectParser.ON_SYMBOL);
			this.state = 980;
			this.match(SQLSelectParser.ERROR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	jtOnResponse() {
		let localctx = new JtOnResponseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 132, SQLSelectParser.RULE_jtOnResponse);
		try {
			this.state = 986;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.ERROR_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 982;
					this.match(SQLSelectParser.ERROR_SYMBOL);
					break;
				case SQLSelectParser.NULL_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 983;
					this.match(SQLSelectParser.NULL_SYMBOL);
					break;
				case SQLSelectParser.DEFAULT_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 984;
					this.match(SQLSelectParser.DEFAULT_SYMBOL);
					this.state = 985;
					this.textStringLiteral();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	unionOption() {
		let localctx = new UnionOptionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 134, SQLSelectParser.RULE_unionOption);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 988;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.ALL_SYMBOL || _la === SQLSelectParser.DISTINCT_SYMBOL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	tableAlias() {
		let localctx = new TableAliasContext(this, this._ctx, this.state);
		this.enterRule(localctx, 136, SQLSelectParser.RULE_tableAlias);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 991;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 116, this._ctx);
			if (la_ === 1) {
				this.state = 990;
				_la = this._input.LA(1);
				if (!(_la === SQLSelectParser.EQUAL_OPERATOR || _la === SQLSelectParser.AS_SYMBOL)) {
					this._errHandler.recoverInline(this);
				} else {
					this._errHandler.reportMatch(this);
					this.consume();
				}
			}
			this.state = 993;
			this.identifier();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	indexHintList() {
		let localctx = new IndexHintListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 138, SQLSelectParser.RULE_indexHintList);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 995;
			this.indexHint();
			this.state = 1000;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 117, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 996;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 997;
					this.indexHint();
				}
				this.state = 1002;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 117, this._ctx);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	indexHint() {
		let localctx = new IndexHintContext(this, this._ctx, this.state);
		this.enterRule(localctx, 140, SQLSelectParser.RULE_indexHint);
		var _la = 0; // Token type
		try {
			this.state = 1023;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.FORCE_SYMBOL:
				case SQLSelectParser.IGNORE_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 1003;
					this.indexHintType();
					this.state = 1004;
					this.keyOrIndex();
					this.state = 1006;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.FOR_SYMBOL) {
						this.state = 1005;
						this.indexHintClause();
					}

					this.state = 1008;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1009;
					this.indexList();
					this.state = 1010;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.USE_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 1012;
					this.match(SQLSelectParser.USE_SYMBOL);
					this.state = 1013;
					this.keyOrIndex();
					this.state = 1015;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.FOR_SYMBOL) {
						this.state = 1014;
						this.indexHintClause();
					}

					this.state = 1017;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1019;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (
						(((_la - 49) & ~0x1f) == 0 &&
							((1 << (_la - 49)) &
								((1 << (SQLSelectParser.TINYINT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.SMALLINT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.MEDIUMINT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.BYTE_INT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.INT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.BIGINT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.SECOND_SYMBOL - 49)) |
									(1 << (SQLSelectParser.MINUTE_SYMBOL - 49)) |
									(1 << (SQLSelectParser.HOUR_SYMBOL - 49)) |
									(1 << (SQLSelectParser.DAY_SYMBOL - 49)) |
									(1 << (SQLSelectParser.WEEK_SYMBOL - 49)) |
									(1 << (SQLSelectParser.MONTH_SYMBOL - 49)) |
									(1 << (SQLSelectParser.QUARTER_SYMBOL - 49)) |
									(1 << (SQLSelectParser.YEAR_SYMBOL - 49)) |
									(1 << (SQLSelectParser.DEFAULT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.UNION_SYMBOL - 49)) |
									(1 << (SQLSelectParser.SELECT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.ALL_SYMBOL - 49)) |
									(1 << (SQLSelectParser.DISTINCT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.STRAIGHT_JOIN_SYMBOL - 49)) |
									(1 << (SQLSelectParser.HIGH_PRIORITY_SYMBOL - 49)) |
									(1 << (SQLSelectParser.SQL_SMALL_RESULT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.SQL_BIG_RESULT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL - 49)) |
									(1 << (SQLSelectParser.LIMIT_SYMBOL - 49)) |
									(1 << (SQLSelectParser.OFFSET_SYMBOL - 49)) |
									(1 << (SQLSelectParser.INTO_SYMBOL - 49)) |
									(1 << (SQLSelectParser.OUTFILE_SYMBOL - 49)) |
									(1 << (SQLSelectParser.DUMPFILE_SYMBOL - 49)) |
									(1 << (SQLSelectParser.PROCEDURE_SYMBOL - 49)) |
									(1 << (SQLSelectParser.ANALYSE_SYMBOL - 49)))) !==
								0) ||
						(((_la - 81) & ~0x1f) == 0 &&
							((1 << (_la - 81)) &
								((1 << (SQLSelectParser.HAVING_SYMBOL - 81)) |
									(1 << (SQLSelectParser.WINDOW_SYMBOL - 81)) |
									(1 << (SQLSelectParser.AS_SYMBOL - 81)) |
									(1 << (SQLSelectParser.PARTITION_SYMBOL - 81)) |
									(1 << (SQLSelectParser.BY_SYMBOL - 81)) |
									(1 << (SQLSelectParser.ROWS_SYMBOL - 81)) |
									(1 << (SQLSelectParser.RANGE_SYMBOL - 81)) |
									(1 << (SQLSelectParser.GROUPS_SYMBOL - 81)) |
									(1 << (SQLSelectParser.UNBOUNDED_SYMBOL - 81)) |
									(1 << (SQLSelectParser.PRECEDING_SYMBOL - 81)) |
									(1 << (SQLSelectParser.INTERVAL_SYMBOL - 81)) |
									(1 << (SQLSelectParser.CURRENT_SYMBOL - 81)) |
									(1 << (SQLSelectParser.ROW_SYMBOL - 81)) |
									(1 << (SQLSelectParser.BETWEEN_SYMBOL - 81)) |
									(1 << (SQLSelectParser.AND_SYMBOL - 81)) |
									(1 << (SQLSelectParser.FOLLOWING_SYMBOL - 81)) |
									(1 << (SQLSelectParser.EXCLUDE_SYMBOL - 81)) |
									(1 << (SQLSelectParser.GROUP_SYMBOL - 81)) |
									(1 << (SQLSelectParser.TIES_SYMBOL - 81)) |
									(1 << (SQLSelectParser.NO_SYMBOL - 81)) |
									(1 << (SQLSelectParser.OTHERS_SYMBOL - 81)) |
									(1 << (SQLSelectParser.WITH_SYMBOL - 81)) |
									(1 << (SQLSelectParser.WITHOUT_SYMBOL - 81)) |
									(1 << (SQLSelectParser.RECURSIVE_SYMBOL - 81)) |
									(1 << (SQLSelectParser.ROLLUP_SYMBOL - 81)) |
									(1 << (SQLSelectParser.CUBE_SYMBOL - 81)) |
									(1 << (SQLSelectParser.ORDER_SYMBOL - 81)) |
									(1 << (SQLSelectParser.ASC_SYMBOL - 81)) |
									(1 << (SQLSelectParser.DESC_SYMBOL - 81)) |
									(1 << (SQLSelectParser.FROM_SYMBOL - 81)) |
									(1 << (SQLSelectParser.DUAL_SYMBOL - 81)) |
									(1 << (SQLSelectParser.VALUES_SYMBOL - 81)))) !==
								0) ||
						(((_la - 113) & ~0x1f) == 0 &&
							((1 << (_la - 113)) &
								((1 << (SQLSelectParser.TABLE_SYMBOL - 113)) |
									(1 << (SQLSelectParser.SQL_NO_CACHE_SYMBOL - 113)) |
									(1 << (SQLSelectParser.SQL_CACHE_SYMBOL - 113)) |
									(1 << (SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL - 113)) |
									(1 << (SQLSelectParser.FOR_SYMBOL - 113)) |
									(1 << (SQLSelectParser.OF_SYMBOL - 113)) |
									(1 << (SQLSelectParser.LOCK_SYMBOL - 113)) |
									(1 << (SQLSelectParser.IN_SYMBOL - 113)) |
									(1 << (SQLSelectParser.SHARE_SYMBOL - 113)) |
									(1 << (SQLSelectParser.MODE_SYMBOL - 113)) |
									(1 << (SQLSelectParser.UPDATE_SYMBOL - 113)) |
									(1 << (SQLSelectParser.SKIP_SYMBOL - 113)) |
									(1 << (SQLSelectParser.LOCKED_SYMBOL - 113)) |
									(1 << (SQLSelectParser.NOWAIT_SYMBOL - 113)) |
									(1 << (SQLSelectParser.WHERE_SYMBOL - 113)) |
									(1 << (SQLSelectParser.OJ_SYMBOL - 113)) |
									(1 << (SQLSelectParser.ON_SYMBOL - 113)) |
									(1 << (SQLSelectParser.USING_SYMBOL - 113)) |
									(1 << (SQLSelectParser.NATURAL_SYMBOL - 113)) |
									(1 << (SQLSelectParser.INNER_SYMBOL - 113)) |
									(1 << (SQLSelectParser.JOIN_SYMBOL - 113)) |
									(1 << (SQLSelectParser.LEFT_SYMBOL - 113)) |
									(1 << (SQLSelectParser.RIGHT_SYMBOL - 113)) |
									(1 << (SQLSelectParser.OUTER_SYMBOL - 113)) |
									(1 << (SQLSelectParser.CROSS_SYMBOL - 113)) |
									(1 << (SQLSelectParser.LATERAL_SYMBOL - 113)) |
									(1 << (SQLSelectParser.JSON_TABLE_SYMBOL - 113)) |
									(1 << (SQLSelectParser.COLUMNS_SYMBOL - 113)) |
									(1 << (SQLSelectParser.ORDINALITY_SYMBOL - 113)) |
									(1 << (SQLSelectParser.EXISTS_SYMBOL - 113)) |
									(1 << (SQLSelectParser.PATH_SYMBOL - 113)))) !==
								0) ||
						(((_la - 145) & ~0x1f) == 0 &&
							((1 << (_la - 145)) &
								((1 << (SQLSelectParser.NESTED_SYMBOL - 145)) |
									(1 << (SQLSelectParser.EMPTY_SYMBOL - 145)) |
									(1 << (SQLSelectParser.ERROR_SYMBOL - 145)) |
									(1 << (SQLSelectParser.NULL_SYMBOL - 145)) |
									(1 << (SQLSelectParser.USE_SYMBOL - 145)) |
									(1 << (SQLSelectParser.FORCE_SYMBOL - 145)) |
									(1 << (SQLSelectParser.IGNORE_SYMBOL - 145)) |
									(1 << (SQLSelectParser.KEY_SYMBOL - 145)) |
									(1 << (SQLSelectParser.INDEX_SYMBOL - 145)) |
									(1 << (SQLSelectParser.PRIMARY_SYMBOL - 145)) |
									(1 << (SQLSelectParser.IS_SYMBOL - 145)) |
									(1 << (SQLSelectParser.TRUE_SYMBOL - 145)) |
									(1 << (SQLSelectParser.FALSE_SYMBOL - 145)) |
									(1 << (SQLSelectParser.UNKNOWN_SYMBOL - 145)) |
									(1 << (SQLSelectParser.NOT_SYMBOL - 145)) |
									(1 << (SQLSelectParser.XOR_SYMBOL - 145)) |
									(1 << (SQLSelectParser.OR_SYMBOL - 145)) |
									(1 << (SQLSelectParser.ANY_SYMBOL - 145)) |
									(1 << (SQLSelectParser.MEMBER_SYMBOL - 145)) |
									(1 << (SQLSelectParser.SOUNDS_SYMBOL - 145)) |
									(1 << (SQLSelectParser.LIKE_SYMBOL - 145)) |
									(1 << (SQLSelectParser.ESCAPE_SYMBOL - 145)) |
									(1 << (SQLSelectParser.REGEXP_SYMBOL - 145)) |
									(1 << (SQLSelectParser.DIV_SYMBOL - 145)) |
									(1 << (SQLSelectParser.MOD_SYMBOL - 145)) |
									(1 << (SQLSelectParser.MATCH_SYMBOL - 145)) |
									(1 << (SQLSelectParser.AGAINST_SYMBOL - 145)) |
									(1 << (SQLSelectParser.BINARY_SYMBOL - 145)) |
									(1 << (SQLSelectParser.CAST_SYMBOL - 145)) |
									(1 << (SQLSelectParser.ARRAY_SYMBOL - 145)) |
									(1 << (SQLSelectParser.CASE_SYMBOL - 145)) |
									(1 << (SQLSelectParser.END_SYMBOL - 145)))) !==
								0) ||
						(((_la - 177) & ~0x1f) == 0 &&
							((1 << (_la - 177)) &
								((1 << (SQLSelectParser.CONVERT_SYMBOL - 177)) |
									(1 << (SQLSelectParser.COLLATE_SYMBOL - 177)) |
									(1 << (SQLSelectParser.AVG_SYMBOL - 177)) |
									(1 << (SQLSelectParser.BIT_AND_SYMBOL - 177)) |
									(1 << (SQLSelectParser.BIT_OR_SYMBOL - 177)) |
									(1 << (SQLSelectParser.BIT_XOR_SYMBOL - 177)) |
									(1 << (SQLSelectParser.COUNT_SYMBOL - 177)) |
									(1 << (SQLSelectParser.MIN_SYMBOL - 177)) |
									(1 << (SQLSelectParser.MAX_SYMBOL - 177)) |
									(1 << (SQLSelectParser.STD_SYMBOL - 177)) |
									(1 << (SQLSelectParser.VARIANCE_SYMBOL - 177)) |
									(1 << (SQLSelectParser.STDDEV_SAMP_SYMBOL - 177)) |
									(1 << (SQLSelectParser.VAR_SAMP_SYMBOL - 177)) |
									(1 << (SQLSelectParser.SUM_SYMBOL - 177)) |
									(1 << (SQLSelectParser.GROUP_CONCAT_SYMBOL - 177)) |
									(1 << (SQLSelectParser.SEPARATOR_SYMBOL - 177)) |
									(1 << (SQLSelectParser.GROUPING_SYMBOL - 177)) |
									(1 << (SQLSelectParser.ROW_NUMBER_SYMBOL - 177)) |
									(1 << (SQLSelectParser.RANK_SYMBOL - 177)) |
									(1 << (SQLSelectParser.DENSE_RANK_SYMBOL - 177)) |
									(1 << (SQLSelectParser.CUME_DIST_SYMBOL - 177)) |
									(1 << (SQLSelectParser.PERCENT_RANK_SYMBOL - 177)) |
									(1 << (SQLSelectParser.NTILE_SYMBOL - 177)) |
									(1 << (SQLSelectParser.LEAD_SYMBOL - 177)) |
									(1 << (SQLSelectParser.LAG_SYMBOL - 177)) |
									(1 << (SQLSelectParser.FIRST_VALUE_SYMBOL - 177)) |
									(1 << (SQLSelectParser.LAST_VALUE_SYMBOL - 177)) |
									(1 << (SQLSelectParser.NTH_VALUE_SYMBOL - 177)) |
									(1 << (SQLSelectParser.FIRST_SYMBOL - 177)) |
									(1 << (SQLSelectParser.LAST_SYMBOL - 177)) |
									(1 << (SQLSelectParser.OVER_SYMBOL - 177)) |
									(1 << (SQLSelectParser.RESPECT_SYMBOL - 177)))) !==
								0) ||
						(((_la - 209) & ~0x1f) == 0 &&
							((1 << (_la - 209)) &
								((1 << (SQLSelectParser.NULLS_SYMBOL - 209)) |
									(1 << (SQLSelectParser.JSON_ARRAYAGG_SYMBOL - 209)) |
									(1 << (SQLSelectParser.JSON_OBJECTAGG_SYMBOL - 209)) |
									(1 << (SQLSelectParser.BOOLEAN_SYMBOL - 209)) |
									(1 << (SQLSelectParser.LANGUAGE_SYMBOL - 209)) |
									(1 << (SQLSelectParser.QUERY_SYMBOL - 209)) |
									(1 << (SQLSelectParser.EXPANSION_SYMBOL - 209)) |
									(1 << (SQLSelectParser.CHAR_SYMBOL - 209)) |
									(1 << (SQLSelectParser.CURRENT_USER_SYMBOL - 209)) |
									(1 << (SQLSelectParser.DATE_SYMBOL - 209)) |
									(1 << (SQLSelectParser.INSERT_SYMBOL - 209)) |
									(1 << (SQLSelectParser.TIME_SYMBOL - 209)) |
									(1 << (SQLSelectParser.TIMESTAMP_SYMBOL - 209)) |
									(1 << (SQLSelectParser.TIMESTAMP_LTZ_SYMBOL - 209)) |
									(1 << (SQLSelectParser.TIMESTAMP_NTZ_SYMBOL - 209)) |
									(1 << (SQLSelectParser.ZONE_SYMBOL - 209)) |
									(1 << (SQLSelectParser.USER_SYMBOL - 209)) |
									(1 << (SQLSelectParser.ADDDATE_SYMBOL - 209)) |
									(1 << (SQLSelectParser.SUBDATE_SYMBOL - 209)) |
									(1 << (SQLSelectParser.CURDATE_SYMBOL - 209)) |
									(1 << (SQLSelectParser.CURTIME_SYMBOL - 209)) |
									(1 << (SQLSelectParser.DATE_ADD_SYMBOL - 209)) |
									(1 << (SQLSelectParser.DATE_SUB_SYMBOL - 209)) |
									(1 << (SQLSelectParser.EXTRACT_SYMBOL - 209)) |
									(1 << (SQLSelectParser.GET_FORMAT_SYMBOL - 209)) |
									(1 << (SQLSelectParser.NOW_SYMBOL - 209)) |
									(1 << (SQLSelectParser.POSITION_SYMBOL - 209)) |
									(1 << (SQLSelectParser.SYSDATE_SYMBOL - 209)) |
									(1 << (SQLSelectParser.TIMESTAMP_ADD_SYMBOL - 209)) |
									(1 << (SQLSelectParser.TIMESTAMP_DIFF_SYMBOL - 209)) |
									(1 << (SQLSelectParser.UTC_DATE_SYMBOL - 209)) |
									(1 << (SQLSelectParser.UTC_TIME_SYMBOL - 209)))) !==
								0) ||
						(((_la - 241) & ~0x1f) == 0 &&
							((1 << (_la - 241)) &
								((1 << (SQLSelectParser.UTC_TIMESTAMP_SYMBOL - 241)) |
									(1 << (SQLSelectParser.ASCII_SYMBOL - 241)) |
									(1 << (SQLSelectParser.CHARSET_SYMBOL - 241)) |
									(1 << (SQLSelectParser.COALESCE_SYMBOL - 241)) |
									(1 << (SQLSelectParser.COLLATION_SYMBOL - 241)) |
									(1 << (SQLSelectParser.DATABASE_SYMBOL - 241)) |
									(1 << (SQLSelectParser.IF_SYMBOL - 241)) |
									(1 << (SQLSelectParser.FORMAT_SYMBOL - 241)) |
									(1 << (SQLSelectParser.MICROSECOND_SYMBOL - 241)) |
									(1 << (SQLSelectParser.OLD_PASSWORD_SYMBOL - 241)) |
									(1 << (SQLSelectParser.PASSWORD_SYMBOL - 241)) |
									(1 << (SQLSelectParser.REPEAT_SYMBOL - 241)) |
									(1 << (SQLSelectParser.REPLACE_SYMBOL - 241)) |
									(1 << (SQLSelectParser.REVERSE_SYMBOL - 241)) |
									(1 << (SQLSelectParser.ROW_COUNT_SYMBOL - 241)) |
									(1 << (SQLSelectParser.TRUNCATE_SYMBOL - 241)) |
									(1 << (SQLSelectParser.WEIGHT_STRING_SYMBOL - 241)) |
									(1 << (SQLSelectParser.CONTAINS_SYMBOL - 241)) |
									(1 << (SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL - 241)) |
									(1 << (SQLSelectParser.LINESTRING_SYMBOL - 241)) |
									(1 << (SQLSelectParser.MULTILINESTRING_SYMBOL - 241)) |
									(1 << (SQLSelectParser.MULTIPOINT_SYMBOL - 241)) |
									(1 << (SQLSelectParser.MULTIPOLYGON_SYMBOL - 241)) |
									(1 << (SQLSelectParser.POINT_SYMBOL - 241)) |
									(1 << (SQLSelectParser.POLYGON_SYMBOL - 241)) |
									(1 << (SQLSelectParser.LEVEL_SYMBOL - 241)) |
									(1 << (SQLSelectParser.DATETIME_SYMBOL - 241)) |
									(1 << (SQLSelectParser.TRIM_SYMBOL - 241)) |
									(1 << (SQLSelectParser.LEADING_SYMBOL - 241)) |
									(1 << (SQLSelectParser.TRAILING_SYMBOL - 241)) |
									(1 << (SQLSelectParser.BOTH_SYMBOL - 241)) |
									(1 << (SQLSelectParser.STRING_SYMBOL - 241)))) !==
								0) ||
						(((_la - 273) & ~0x1f) == 0 &&
							((1 << (_la - 273)) &
								((1 << (SQLSelectParser.SUBSTRING_SYMBOL - 273)) |
									(1 << (SQLSelectParser.WHEN_SYMBOL - 273)) |
									(1 << (SQLSelectParser.THEN_SYMBOL - 273)) |
									(1 << (SQLSelectParser.ELSE_SYMBOL - 273)) |
									(1 << (SQLSelectParser.SIGNED_SYMBOL - 273)) |
									(1 << (SQLSelectParser.UNSIGNED_SYMBOL - 273)) |
									(1 << (SQLSelectParser.DECIMAL_SYMBOL - 273)) |
									(1 << (SQLSelectParser.JSON_SYMBOL - 273)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL - 273)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL_4 - 273)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL_8 - 273)) |
									(1 << (SQLSelectParser.SET_SYMBOL - 273)) |
									(1 << (SQLSelectParser.SECOND_MICROSECOND_SYMBOL - 273)) |
									(1 << (SQLSelectParser.MINUTE_MICROSECOND_SYMBOL - 273)) |
									(1 << (SQLSelectParser.MINUTE_SECOND_SYMBOL - 273)) |
									(1 << (SQLSelectParser.HOUR_MICROSECOND_SYMBOL - 273)) |
									(1 << (SQLSelectParser.HOUR_SECOND_SYMBOL - 273)) |
									(1 << (SQLSelectParser.HOUR_MINUTE_SYMBOL - 273)) |
									(1 << (SQLSelectParser.DAY_MICROSECOND_SYMBOL - 273)) |
									(1 << (SQLSelectParser.DAY_SECOND_SYMBOL - 273)) |
									(1 << (SQLSelectParser.DAY_MINUTE_SYMBOL - 273)) |
									(1 << (SQLSelectParser.DAY_HOUR_SYMBOL - 273)) |
									(1 << (SQLSelectParser.YEAR_MONTH_SYMBOL - 273)) |
									(1 << (SQLSelectParser.BTREE_SYMBOL - 273)) |
									(1 << (SQLSelectParser.RTREE_SYMBOL - 273)) |
									(1 << (SQLSelectParser.HASH_SYMBOL - 273)) |
									(1 << (SQLSelectParser.REAL_SYMBOL - 273)) |
									(1 << (SQLSelectParser.DOUBLE_SYMBOL - 273)) |
									(1 << (SQLSelectParser.PRECISION_SYMBOL - 273)) |
									(1 << (SQLSelectParser.NUMERIC_SYMBOL - 273)) |
									(1 << (SQLSelectParser.NUMBER_SYMBOL - 273)) |
									(1 << (SQLSelectParser.FIXED_SYMBOL - 273)))) !==
								0) ||
						(((_la - 305) & ~0x1f) == 0 &&
							((1 << (_la - 305)) &
								((1 << (SQLSelectParser.BIT_SYMBOL - 305)) |
									(1 << (SQLSelectParser.BOOL_SYMBOL - 305)) |
									(1 << (SQLSelectParser.VARYING_SYMBOL - 305)) |
									(1 << (SQLSelectParser.VARCHAR_SYMBOL - 305)) |
									(1 << (SQLSelectParser.VARCHAR2_SYMBOL - 305)) |
									(1 << (SQLSelectParser.NATIONAL_SYMBOL - 305)) |
									(1 << (SQLSelectParser.NVARCHAR_SYMBOL - 305)) |
									(1 << (SQLSelectParser.NVARCHAR2_SYMBOL - 305)) |
									(1 << (SQLSelectParser.NCHAR_SYMBOL - 305)) |
									(1 << (SQLSelectParser.VARBINARY_SYMBOL - 305)) |
									(1 << (SQLSelectParser.TINYBLOB_SYMBOL - 305)) |
									(1 << (SQLSelectParser.BLOB_SYMBOL - 305)) |
									(1 << (SQLSelectParser.CLOB_SYMBOL - 305)) |
									(1 << (SQLSelectParser.BFILE_SYMBOL - 305)) |
									(1 << (SQLSelectParser.RAW_SYMBOL - 305)) |
									(1 << (SQLSelectParser.MEDIUMBLOB_SYMBOL - 305)) |
									(1 << (SQLSelectParser.LONGBLOB_SYMBOL - 305)) |
									(1 << (SQLSelectParser.LONG_SYMBOL - 305)) |
									(1 << (SQLSelectParser.TINYTEXT_SYMBOL - 305)) |
									(1 << (SQLSelectParser.TEXT_SYMBOL - 305)) |
									(1 << (SQLSelectParser.MEDIUMTEXT_SYMBOL - 305)) |
									(1 << (SQLSelectParser.LONGTEXT_SYMBOL - 305)) |
									(1 << (SQLSelectParser.ENUM_SYMBOL - 305)) |
									(1 << (SQLSelectParser.SERIAL_SYMBOL - 305)) |
									(1 << (SQLSelectParser.GEOMETRY_SYMBOL - 305)) |
									(1 << (SQLSelectParser.ZEROFILL_SYMBOL - 305)) |
									(1 << (SQLSelectParser.BYTE_SYMBOL - 305)) |
									(1 << (SQLSelectParser.UNICODE_SYMBOL - 305)) |
									(1 << (SQLSelectParser.TERMINATED_SYMBOL - 305)) |
									(1 << (SQLSelectParser.OPTIONALLY_SYMBOL - 305)) |
									(1 << (SQLSelectParser.ENCLOSED_SYMBOL - 305)) |
									(1 << (SQLSelectParser.ESCAPED_SYMBOL - 305)))) !==
								0) ||
						(((_la - 337) & ~0x1f) == 0 &&
							((1 << (_la - 337)) &
								((1 << (SQLSelectParser.LINES_SYMBOL - 337)) |
									(1 << (SQLSelectParser.STARTING_SYMBOL - 337)) |
									(1 << (SQLSelectParser.GLOBAL_SYMBOL - 337)) |
									(1 << (SQLSelectParser.LOCAL_SYMBOL - 337)) |
									(1 << (SQLSelectParser.SESSION_SYMBOL - 337)) |
									(1 << (SQLSelectParser.VARIANT_SYMBOL - 337)) |
									(1 << (SQLSelectParser.OBJECT_SYMBOL - 337)) |
									(1 << (SQLSelectParser.GEOGRAPHY_SYMBOL - 337)) |
									(1 << (SQLSelectParser.UNDERSCORE_CHARSET - 337)) |
									(1 << (SQLSelectParser.IDENTIFIER - 337)) |
									(1 << (SQLSelectParser.BACK_TICK_QUOTED_ID - 337)) |
									(1 << (SQLSelectParser.DOUBLE_QUOTED_TEXT - 337)) |
									(1 << (SQLSelectParser.SINGLE_QUOTED_TEXT - 337)) |
									(1 << (SQLSelectParser.BRACKET_QUOTED_TEXT - 337)) |
									(1 << (SQLSelectParser.CURLY_BRACES_QUOTED_TEXT - 337)))) !==
								0)
					) {
						this.state = 1018;
						this.indexList();
					}

					this.state = 1021;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	indexHintType() {
		let localctx = new IndexHintTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 142, SQLSelectParser.RULE_indexHintType);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1025;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.FORCE_SYMBOL || _la === SQLSelectParser.IGNORE_SYMBOL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	keyOrIndex() {
		let localctx = new KeyOrIndexContext(this, this._ctx, this.state);
		this.enterRule(localctx, 144, SQLSelectParser.RULE_keyOrIndex);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1027;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.KEY_SYMBOL || _la === SQLSelectParser.INDEX_SYMBOL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	indexHintClause() {
		let localctx = new IndexHintClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 146, SQLSelectParser.RULE_indexHintClause);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1029;
			this.match(SQLSelectParser.FOR_SYMBOL);
			this.state = 1035;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.JOIN_SYMBOL:
					this.state = 1030;
					this.match(SQLSelectParser.JOIN_SYMBOL);
					break;
				case SQLSelectParser.ORDER_SYMBOL:
					this.state = 1031;
					this.match(SQLSelectParser.ORDER_SYMBOL);
					this.state = 1032;
					this.match(SQLSelectParser.BY_SYMBOL);
					break;
				case SQLSelectParser.GROUP_SYMBOL:
					this.state = 1033;
					this.match(SQLSelectParser.GROUP_SYMBOL);
					this.state = 1034;
					this.match(SQLSelectParser.BY_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	indexList() {
		let localctx = new IndexListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 148, SQLSelectParser.RULE_indexList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1037;
			this.indexListElement();
			this.state = 1042;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 1038;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 1039;
				this.indexListElement();
				this.state = 1044;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	indexListElement() {
		let localctx = new IndexListElementContext(this, this._ctx, this.state);
		this.enterRule(localctx, 150, SQLSelectParser.RULE_indexListElement);
		try {
			this.state = 1047;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 124, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1045;
					this.identifier();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1046;
					this.match(SQLSelectParser.PRIMARY_SYMBOL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	expr(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new ExprContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 152;
		this.enterRecursionRule(localctx, 152, SQLSelectParser.RULE_expr, _p);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1060;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 127, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1050;
					this.boolPri(0);
					this.state = 1056;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
					if (la_ === 1) {
						this.state = 1051;
						this.match(SQLSelectParser.IS_SYMBOL);
						this.state = 1053;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === SQLSelectParser.NOT_SYMBOL) {
							this.state = 1052;
							this.notRule();
						}

						this.state = 1055;
						_la = this._input.LA(1);
						if (
							!(
								((_la - 156) & ~0x1f) == 0 &&
								((1 << (_la - 156)) &
									((1 << (SQLSelectParser.TRUE_SYMBOL - 156)) |
										(1 << (SQLSelectParser.FALSE_SYMBOL - 156)) |
										(1 << (SQLSelectParser.UNKNOWN_SYMBOL - 156)))) !==
									0
							)
						) {
							this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
					}
					break;

				case 2:
					this.state = 1058;
					this.match(SQLSelectParser.NOT_SYMBOL);
					this.state = 1059;
					this.expr(4);
					break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1073;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 129, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					this.state = 1071;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 128, this._ctx);
					switch (la_) {
						case 1:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_expr);
							this.state = 1062;
							if (!this.precpred(this._ctx, 3)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');
							}
							this.state = 1063;
							_la = this._input.LA(1);
							if (!(_la === SQLSelectParser.LOGICAL_AND_OPERATOR || _la === SQLSelectParser.AND_SYMBOL)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 1064;
							this.expr(4);
							break;

						case 2:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_expr);
							this.state = 1065;
							if (!this.precpred(this._ctx, 2)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');
							}
							this.state = 1066;
							this.match(SQLSelectParser.XOR_SYMBOL);
							this.state = 1067;
							this.expr(3);
							break;

						case 3:
							localctx = new ExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_expr);
							this.state = 1068;
							if (!this.precpred(this._ctx, 1)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');
							}
							this.state = 1069;
							_la = this._input.LA(1);
							if (!(_la === SQLSelectParser.LOGICAL_OR_OPERATOR || _la === SQLSelectParser.OR_SYMBOL)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 1070;
							this.expr(2);
							break;
					}
				}
				this.state = 1075;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 129, this._ctx);
			}
		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	boolPri(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new BoolPriContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 154;
		this.enterRecursionRule(localctx, 154, SQLSelectParser.RULE_boolPri, _p);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1077;
			this.predicate();
			this._ctx.stop = this._input.LT(-1);
			this.state = 1096;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 132, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					this.state = 1094;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 131, this._ctx);
					switch (la_) {
						case 1:
							localctx = new BoolPriContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_boolPri);
							this.state = 1079;
							if (!this.precpred(this._ctx, 3)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');
							}
							this.state = 1080;
							this.match(SQLSelectParser.IS_SYMBOL);
							this.state = 1082;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === SQLSelectParser.NOT_SYMBOL) {
								this.state = 1081;
								this.notRule();
							}

							this.state = 1084;
							this.match(SQLSelectParser.NULL_SYMBOL);
							break;

						case 2:
							localctx = new BoolPriContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_boolPri);
							this.state = 1085;
							if (!this.precpred(this._ctx, 2)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');
							}
							this.state = 1086;
							this.compOp();
							this.state = 1087;
							this.predicate();
							break;

						case 3:
							localctx = new BoolPriContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_boolPri);
							this.state = 1089;
							if (!this.precpred(this._ctx, 1)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 1)');
							}
							this.state = 1090;
							this.compOp();
							this.state = 1091;
							_la = this._input.LA(1);
							if (!(_la === SQLSelectParser.ALL_SYMBOL || _la === SQLSelectParser.ANY_SYMBOL)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 1092;
							this.subquery();
							break;
					}
				}
				this.state = 1098;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 132, this._ctx);
			}
		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	compOp() {
		let localctx = new CompOpContext(this, this._ctx, this.state);
		this.enterRule(localctx, 156, SQLSelectParser.RULE_compOp);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1099;
			_la = this._input.LA(1);
			if (
				!(
					(_la & ~0x1f) == 0 &&
					((1 << _la) &
						((1 << SQLSelectParser.EQUAL_OPERATOR) |
							(1 << SQLSelectParser.NULL_SAFE_EQUAL_OPERATOR) |
							(1 << SQLSelectParser.GREATER_OR_EQUAL_OPERATOR) |
							(1 << SQLSelectParser.GREATER_THAN_OPERATOR) |
							(1 << SQLSelectParser.LESS_OR_EQUAL_OPERATOR) |
							(1 << SQLSelectParser.LESS_THAN_OPERATOR) |
							(1 << SQLSelectParser.NOT_EQUAL_OPERATOR))) !==
						0
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	predicate() {
		let localctx = new PredicateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 158, SQLSelectParser.RULE_predicate);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1101;
			this.bitExpr(0);
			this.state = 1115;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 135, this._ctx);
			if (la_ === 1) {
				this.state = 1103;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SQLSelectParser.NOT_SYMBOL) {
					this.state = 1102;
					this.notRule();
				}

				this.state = 1105;
				this.predicateOperations();
			} else if (la_ === 2) {
				this.state = 1106;
				this.match(SQLSelectParser.MEMBER_SYMBOL);
				this.state = 1108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === SQLSelectParser.OF_SYMBOL) {
					this.state = 1107;
					this.match(SQLSelectParser.OF_SYMBOL);
				}

				this.state = 1110;
				this.simpleExprWithParentheses();
			} else if (la_ === 3) {
				this.state = 1111;
				this.match(SQLSelectParser.SOUNDS_SYMBOL);
				this.state = 1112;
				this.match(SQLSelectParser.LIKE_SYMBOL);
				this.state = 1113;
				this.bitExpr(0);
			} else if (la_ === 4) {
				this.state = 1114;
				this.nullTreatment();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	predicateOperations() {
		let localctx = new PredicateOperationsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 160, SQLSelectParser.RULE_predicateOperations);
		try {
			this.state = 1138;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.IN_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 1117;
					this.match(SQLSelectParser.IN_SYMBOL);
					this.state = 1123;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 136, this._ctx);
					switch (la_) {
						case 1:
							this.state = 1118;
							this.subquery();
							break;

						case 2:
							this.state = 1119;
							this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
							this.state = 1120;
							this.exprList();
							this.state = 1121;
							this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
							break;
					}
					break;
				case SQLSelectParser.BETWEEN_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 1125;
					this.match(SQLSelectParser.BETWEEN_SYMBOL);
					this.state = 1126;
					this.bitExpr(0);
					this.state = 1127;
					this.match(SQLSelectParser.AND_SYMBOL);
					this.state = 1128;
					this.predicate();
					break;
				case SQLSelectParser.LIKE_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 1130;
					this.match(SQLSelectParser.LIKE_SYMBOL);
					this.state = 1131;
					this.simpleExpr(0);
					this.state = 1134;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 137, this._ctx);
					if (la_ === 1) {
						this.state = 1132;
						this.match(SQLSelectParser.ESCAPE_SYMBOL);
						this.state = 1133;
						this.simpleExpr(0);
					}
					break;
				case SQLSelectParser.REGEXP_SYMBOL:
					this.enterOuterAlt(localctx, 4);
					this.state = 1136;
					this.match(SQLSelectParser.REGEXP_SYMBOL);
					this.state = 1137;
					this.bitExpr(0);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	bitExpr(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new BitExprContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 162;
		this.enterRecursionRule(localctx, 162, SQLSelectParser.RULE_bitExpr, _p);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1141;
			this.simpleExpr(0);
			this._ctx.stop = this._input.LT(-1);
			this.state = 1169;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 141, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					this.state = 1167;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 140, this._ctx);
					switch (la_) {
						case 1:
							localctx = new BitExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_bitExpr);
							this.state = 1143;
							if (!this.precpred(this._ctx, 7)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 7)');
							}
							this.state = 1144;
							this.match(SQLSelectParser.BITWISE_XOR_OPERATOR);
							this.state = 1145;
							this.bitExpr(8);
							break;

						case 2:
							localctx = new BitExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_bitExpr);
							this.state = 1146;
							if (!this.precpred(this._ctx, 6)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 6)');
							}
							this.state = 1147;
							_la = this._input.LA(1);
							if (
								!(
									((_la & ~0x1f) == 0 &&
										((1 << _la) &
											((1 << SQLSelectParser.PLUS_OPERATOR) |
												(1 << SQLSelectParser.MINUS_OPERATOR) |
												(1 << SQLSelectParser.MULT_OPERATOR) |
												(1 << SQLSelectParser.DIV_OPERATOR) |
												(1 << SQLSelectParser.MOD_OPERATOR))) !==
											0) ||
									_la === SQLSelectParser.DIV_SYMBOL ||
									_la === SQLSelectParser.MOD_SYMBOL
								)
							) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 1148;
							this.bitExpr(7);
							break;

						case 3:
							localctx = new BitExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_bitExpr);
							this.state = 1149;
							if (!this.precpred(this._ctx, 4)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 4)');
							}
							this.state = 1150;
							_la = this._input.LA(1);
							if (
								!(
									_la === SQLSelectParser.SHIFT_LEFT_OPERATOR ||
									_la === SQLSelectParser.SHIFT_RIGHT_OPERATOR
								)
							) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 1151;
							this.bitExpr(5);
							break;

						case 4:
							localctx = new BitExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_bitExpr);
							this.state = 1152;
							if (!this.precpred(this._ctx, 3)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 3)');
							}
							this.state = 1153;
							this.match(SQLSelectParser.BITWISE_AND_OPERATOR);
							this.state = 1154;
							this.bitExpr(4);
							break;

						case 5:
							localctx = new BitExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_bitExpr);
							this.state = 1155;
							if (!this.precpred(this._ctx, 2)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 2)');
							}
							this.state = 1156;
							this.match(SQLSelectParser.BITWISE_OR_OPERATOR);
							this.state = 1157;
							this.bitExpr(3);
							break;

						case 6:
							localctx = new BitExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_bitExpr);
							this.state = 1158;
							if (!this.precpred(this._ctx, 5)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 5)');
							}
							this.state = 1159;
							_la = this._input.LA(1);
							if (!(_la === SQLSelectParser.PLUS_OPERATOR || _la === SQLSelectParser.MINUS_OPERATOR)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 1160;
							this.match(SQLSelectParser.INTERVAL_SYMBOL);
							this.state = 1165;
							this._errHandler.sync(this);
							var la_ = this._interp.adaptivePredict(this._input, 139, this._ctx);
							switch (la_) {
								case 1:
									this.state = 1161;
									this.expr(0);
									this.state = 1162;
									this.interval();
									break;

								case 2:
									this.state = 1164;
									this.match(SQLSelectParser.SINGLE_QUOTED_TEXT);
									break;
							}
							break;
					}
				}
				this.state = 1171;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 141, this._ctx);
			}
		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	simpleExpr(_p) {
		if (_p === undefined) {
			_p = 0;
		}
		const _parentctx = this._ctx;
		const _parentState = this.state;
		let localctx = new SimpleExprContext(this, this._ctx, _parentState);
		let _prevctx = localctx;
		const _startState = 164;
		this.enterRecursionRule(localctx, 164, SQLSelectParser.RULE_simpleExpr, _p);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1280;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 151, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1173;
					this.variable();
					this.state = 1177;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 142, this._ctx);
					if (la_ === 1) {
						this.state = 1174;
						this.equal();
						this.state = 1175;
						this.expr(0);
					}
					break;

				case 2:
					this.state = 1179;
					this.qualifiedIdentifier();
					this.state = 1181;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 143, this._ctx);
					if (la_ === 1) {
						this.state = 1180;
						this.jsonOperator();
					}
					break;

				case 3:
					this.state = 1183;
					this.runtimeFunctionCall();
					break;

				case 4:
					this.state = 1184;
					this.functionCall();
					break;

				case 5:
					this.state = 1185;
					this.literal();
					break;

				case 6:
					this.state = 1186;
					this.match(SQLSelectParser.PARAM_MARKER);
					break;

				case 7:
					this.state = 1187;
					this.sumExpr();
					break;

				case 8:
					this.state = 1188;
					this.groupingOperation();
					break;

				case 9:
					this.state = 1189;
					this.windowFunctionCall();
					break;

				case 10:
					this.state = 1190;
					_la = this._input.LA(1);
					if (
						!(
							(_la & ~0x1f) == 0 &&
							((1 << _la) &
								((1 << SQLSelectParser.PLUS_OPERATOR) |
									(1 << SQLSelectParser.MINUS_OPERATOR) |
									(1 << SQLSelectParser.BITWISE_NOT_OPERATOR))) !==
								0
						)
					) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1191;
					this.simpleExpr(16);
					break;

				case 11:
					this.state = 1192;
					this.not2Rule();
					this.state = 1193;
					this.simpleExpr(15);
					break;

				case 12:
					this.state = 1196;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.ROW_SYMBOL) {
						this.state = 1195;
						this.match(SQLSelectParser.ROW_SYMBOL);
					}

					this.state = 1198;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1199;
					this.exprList();
					this.state = 1200;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;

				case 13:
					this.state = 1203;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.EXISTS_SYMBOL) {
						this.state = 1202;
						this.match(SQLSelectParser.EXISTS_SYMBOL);
					}

					this.state = 1205;
					this.subquery();
					break;

				case 14:
					this.state = 1206;
					this.match(SQLSelectParser.OPEN_CURLY_SYMBOL);
					this.state = 1207;
					this.identifier();
					this.state = 1208;
					this.expr(0);
					this.state = 1209;
					this.match(SQLSelectParser.CLOSE_CURLY_SYMBOL);
					break;

				case 15:
					this.state = 1211;
					this.match(SQLSelectParser.MATCH_SYMBOL);
					this.state = 1212;
					this.identListArg();
					this.state = 1213;
					this.match(SQLSelectParser.AGAINST_SYMBOL);
					this.state = 1214;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1215;
					this.bitExpr(0);
					this.state = 1217;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.WITH_SYMBOL || _la === SQLSelectParser.IN_SYMBOL) {
						this.state = 1216;
						this.fulltextOptions();
					}

					this.state = 1219;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;

				case 16:
					this.state = 1221;
					this.match(SQLSelectParser.BINARY_SYMBOL);
					this.state = 1222;
					this.simpleExpr(10);
					break;

				case 17:
					this.state = 1223;
					this.match(SQLSelectParser.CAST_SYMBOL);
					this.state = 1224;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1225;
					this.expr(0);
					this.state = 1226;
					this.match(SQLSelectParser.AS_SYMBOL);
					this.state = 1227;
					this.dataType();
					this.state = 1229;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.ARRAY_SYMBOL) {
						this.state = 1228;
						this.match(SQLSelectParser.ARRAY_SYMBOL);
					}

					this.state = 1231;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;

				case 18:
					this.state = 1233;
					this.match(SQLSelectParser.CASE_SYMBOL);
					this.state = 1235;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 148, this._ctx);
					if (la_ === 1) {
						this.state = 1234;
						this.expr(0);
					}
					this.state = 1240;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						this.state = 1237;
						this.whenExpression();
						this.state = 1238;
						this.thenExpression();
						this.state = 1242;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === SQLSelectParser.WHEN_SYMBOL);
					this.state = 1245;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.ELSE_SYMBOL) {
						this.state = 1244;
						this.elseExpression();
					}

					this.state = 1247;
					this.match(SQLSelectParser.END_SYMBOL);
					break;

				case 19:
					this.state = 1249;
					this.match(SQLSelectParser.CONVERT_SYMBOL);
					this.state = 1250;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1251;
					this.expr(0);
					this.state = 1252;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1253;
					this.dataType();
					this.state = 1254;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;

				case 20:
					this.state = 1256;
					this.match(SQLSelectParser.CONVERT_SYMBOL);
					this.state = 1257;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1258;
					this.expr(0);
					this.state = 1259;
					this.match(SQLSelectParser.USING_SYMBOL);
					this.state = 1260;
					this.charsetName();
					this.state = 1261;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;

				case 21:
					this.state = 1263;
					this.match(SQLSelectParser.DEFAULT_SYMBOL);
					this.state = 1264;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1265;
					this.qualifiedIdentifier();
					this.state = 1266;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;

				case 22:
					this.state = 1268;
					this.match(SQLSelectParser.VALUES_SYMBOL);
					this.state = 1269;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1270;
					this.qualifiedIdentifier();
					this.state = 1271;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;

				case 23:
					this.state = 1273;
					this.match(SQLSelectParser.INTERVAL_SYMBOL);
					this.state = 1274;
					this.expr(0);
					this.state = 1275;
					this.interval();
					this.state = 1276;
					this.match(SQLSelectParser.PLUS_OPERATOR);
					this.state = 1277;
					this.expr(0);
					break;

				case 24:
					this.state = 1279;
					this.jsonPathIdentifier();
					break;
			}
			this._ctx.stop = this._input.LT(-1);
			this.state = 1293;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 153, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners !== null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = localctx;
					this.state = 1291;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 152, this._ctx);
					switch (la_) {
						case 1:
							localctx = new SimpleExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_simpleExpr);
							this.state = 1282;
							if (!this.precpred(this._ctx, 17)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 17)');
							}
							this.state = 1283;
							this.match(SQLSelectParser.LOGICAL_OR_OPERATOR);
							this.state = 1284;
							this.simpleExpr(18);
							break;

						case 2:
							localctx = new SimpleExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_simpleExpr);
							this.state = 1285;
							if (!this.precpred(this._ctx, 23)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 23)');
							}
							this.state = 1286;
							this.match(SQLSelectParser.COLLATE_SYMBOL);
							this.state = 1287;
							this.textOrIdentifier();
							break;

						case 3:
							localctx = new SimpleExprContext(this, _parentctx, _parentState);
							this.pushNewRecursionContext(localctx, _startState, SQLSelectParser.RULE_simpleExpr);
							this.state = 1288;
							if (!this.precpred(this._ctx, 8)) {
								throw new antlr4.error.FailedPredicateException(this, 'this.precpred(this._ctx, 8)');
							}
							this.state = 1289;
							this.match(SQLSelectParser.CAST_COLON_SYMBOL);
							this.state = 1290;
							this.dataType();
							break;
					}
				}
				this.state = 1295;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 153, this._ctx);
			}
		} catch (error) {
			if (error instanceof antlr4.error.RecognitionException) {
				localctx.exception = error;
				this._errHandler.reportError(this, error);
				this._errHandler.recover(this, error);
			} else {
				throw error;
			}
		} finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return localctx;
	}

	jsonOperator() {
		let localctx = new JsonOperatorContext(this, this._ctx, this.state);
		this.enterRule(localctx, 166, SQLSelectParser.RULE_jsonOperator);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1296;
			_la = this._input.LA(1);
			if (
				!(
					_la === SQLSelectParser.JSON_SEPARATOR_SYMBOL ||
					_la === SQLSelectParser.JSON_UNQUOTED_SEPARATOR_SYMBOL
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1299;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 154, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1297;
					this.textStringLiteral();
					break;

				case 2:
					this.state = 1298;
					this.expr(0);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	sumExpr() {
		let localctx = new SumExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 168, SQLSelectParser.RULE_sumExpr);
		var _la = 0; // Token type
		try {
			this.state = 1419;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 177, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1301;
					this.match(SQLSelectParser.AVG_SYMBOL);
					this.state = 1302;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1304;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 155, this._ctx);
					if (la_ === 1) {
						this.state = 1303;
						this.match(SQLSelectParser.DISTINCT_SYMBOL);
					}
					this.state = 1306;
					this.inSumExpr();
					this.state = 1307;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1309;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);
					if (la_ === 1) {
						this.state = 1308;
						this.windowingClause();
					}
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1311;
					_la = this._input.LA(1);
					if (
						!(
							((_la - 180) & ~0x1f) == 0 &&
							((1 << (_la - 180)) &
								((1 << (SQLSelectParser.BIT_AND_SYMBOL - 180)) |
									(1 << (SQLSelectParser.BIT_OR_SYMBOL - 180)) |
									(1 << (SQLSelectParser.BIT_XOR_SYMBOL - 180)))) !==
								0
						)
					) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1312;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1313;
					this.inSumExpr();
					this.state = 1314;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1316;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 157, this._ctx);
					if (la_ === 1) {
						this.state = 1315;
						this.windowingClause();
					}
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 1318;
					this.jsonFunction();
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 1319;
					this.match(SQLSelectParser.COUNT_SYMBOL);
					this.state = 1320;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1322;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.ALL_SYMBOL) {
						this.state = 1321;
						this.match(SQLSelectParser.ALL_SYMBOL);
					}

					this.state = 1324;
					this.match(SQLSelectParser.MULT_OPERATOR);
					this.state = 1325;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1327;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 159, this._ctx);
					if (la_ === 1) {
						this.state = 1326;
						this.windowingClause();
					}
					break;

				case 5:
					this.enterOuterAlt(localctx, 5);
					this.state = 1329;
					this.match(SQLSelectParser.COUNT_SYMBOL);
					this.state = 1330;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1338;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 161, this._ctx);
					switch (la_) {
						case 1:
							this.state = 1332;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === SQLSelectParser.ALL_SYMBOL) {
								this.state = 1331;
								this.match(SQLSelectParser.ALL_SYMBOL);
							}

							this.state = 1334;
							this.match(SQLSelectParser.MULT_OPERATOR);
							break;

						case 2:
							this.state = 1335;
							this.inSumExpr();
							break;

						case 3:
							this.state = 1336;
							this.match(SQLSelectParser.DISTINCT_SYMBOL);
							this.state = 1337;
							this.exprList();
							break;
					}
					this.state = 1340;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1342;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 162, this._ctx);
					if (la_ === 1) {
						this.state = 1341;
						this.windowingClause();
					}
					break;

				case 6:
					this.enterOuterAlt(localctx, 6);
					this.state = 1344;
					this.match(SQLSelectParser.MIN_SYMBOL);
					this.state = 1345;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1347;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 163, this._ctx);
					if (la_ === 1) {
						this.state = 1346;
						this.match(SQLSelectParser.DISTINCT_SYMBOL);
					}
					this.state = 1349;
					this.inSumExpr();
					this.state = 1350;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1352;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 164, this._ctx);
					if (la_ === 1) {
						this.state = 1351;
						this.windowingClause();
					}
					break;

				case 7:
					this.enterOuterAlt(localctx, 7);
					this.state = 1354;
					this.match(SQLSelectParser.MAX_SYMBOL);
					this.state = 1355;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1357;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 165, this._ctx);
					if (la_ === 1) {
						this.state = 1356;
						this.match(SQLSelectParser.DISTINCT_SYMBOL);
					}
					this.state = 1359;
					this.inSumExpr();
					this.state = 1360;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1362;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 166, this._ctx);
					if (la_ === 1) {
						this.state = 1361;
						this.windowingClause();
					}
					break;

				case 8:
					this.enterOuterAlt(localctx, 8);
					this.state = 1364;
					this.match(SQLSelectParser.STD_SYMBOL);
					this.state = 1365;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1366;
					this.inSumExpr();
					this.state = 1367;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1369;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 167, this._ctx);
					if (la_ === 1) {
						this.state = 1368;
						this.windowingClause();
					}
					break;

				case 9:
					this.enterOuterAlt(localctx, 9);
					this.state = 1371;
					this.match(SQLSelectParser.VARIANCE_SYMBOL);
					this.state = 1372;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1373;
					this.inSumExpr();
					this.state = 1374;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1376;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 168, this._ctx);
					if (la_ === 1) {
						this.state = 1375;
						this.windowingClause();
					}
					break;

				case 10:
					this.enterOuterAlt(localctx, 10);
					this.state = 1378;
					this.match(SQLSelectParser.STDDEV_SAMP_SYMBOL);
					this.state = 1379;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1380;
					this.inSumExpr();
					this.state = 1381;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1383;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 169, this._ctx);
					if (la_ === 1) {
						this.state = 1382;
						this.windowingClause();
					}
					break;

				case 11:
					this.enterOuterAlt(localctx, 11);
					this.state = 1385;
					this.match(SQLSelectParser.VAR_SAMP_SYMBOL);
					this.state = 1386;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1387;
					this.inSumExpr();
					this.state = 1388;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1390;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 170, this._ctx);
					if (la_ === 1) {
						this.state = 1389;
						this.windowingClause();
					}
					break;

				case 12:
					this.enterOuterAlt(localctx, 12);
					this.state = 1392;
					this.match(SQLSelectParser.SUM_SYMBOL);
					this.state = 1393;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1395;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 171, this._ctx);
					if (la_ === 1) {
						this.state = 1394;
						this.match(SQLSelectParser.DISTINCT_SYMBOL);
					}
					this.state = 1397;
					this.inSumExpr();
					this.state = 1398;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1400;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 172, this._ctx);
					if (la_ === 1) {
						this.state = 1399;
						this.windowingClause();
					}
					break;

				case 13:
					this.enterOuterAlt(localctx, 13);
					this.state = 1402;
					this.match(SQLSelectParser.GROUP_CONCAT_SYMBOL);
					this.state = 1403;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1405;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 173, this._ctx);
					if (la_ === 1) {
						this.state = 1404;
						this.match(SQLSelectParser.DISTINCT_SYMBOL);
					}
					this.state = 1407;
					this.exprList();
					this.state = 1409;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.ORDER_SYMBOL) {
						this.state = 1408;
						this.orderClause();
					}

					this.state = 1413;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.SEPARATOR_SYMBOL) {
						this.state = 1411;
						this.match(SQLSelectParser.SEPARATOR_SYMBOL);
						this.state = 1412;
						this.textString();
					}

					this.state = 1415;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1417;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 176, this._ctx);
					if (la_ === 1) {
						this.state = 1416;
						this.windowingClause();
					}
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	groupingOperation() {
		let localctx = new GroupingOperationContext(this, this._ctx, this.state);
		this.enterRule(localctx, 170, SQLSelectParser.RULE_groupingOperation);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1421;
			this.match(SQLSelectParser.GROUPING_SYMBOL);
			this.state = 1422;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 1423;
			this.exprList();
			this.state = 1424;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowFunctionCall() {
		let localctx = new WindowFunctionCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 172, SQLSelectParser.RULE_windowFunctionCall);
		var _la = 0; // Token type
		try {
			this.state = 1468;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.ROW_NUMBER_SYMBOL:
				case SQLSelectParser.RANK_SYMBOL:
				case SQLSelectParser.DENSE_RANK_SYMBOL:
				case SQLSelectParser.CUME_DIST_SYMBOL:
				case SQLSelectParser.PERCENT_RANK_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 1426;
					_la = this._input.LA(1);
					if (
						!(
							((_la - 194) & ~0x1f) == 0 &&
							((1 << (_la - 194)) &
								((1 << (SQLSelectParser.ROW_NUMBER_SYMBOL - 194)) |
									(1 << (SQLSelectParser.RANK_SYMBOL - 194)) |
									(1 << (SQLSelectParser.DENSE_RANK_SYMBOL - 194)) |
									(1 << (SQLSelectParser.CUME_DIST_SYMBOL - 194)) |
									(1 << (SQLSelectParser.PERCENT_RANK_SYMBOL - 194)))) !==
								0
						)
					) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1427;
					this.parentheses();
					this.state = 1428;
					this.windowingClause();
					break;
				case SQLSelectParser.NTILE_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 1430;
					this.match(SQLSelectParser.NTILE_SYMBOL);
					this.state = 1431;
					this.simpleExprWithParentheses();
					this.state = 1432;
					this.windowingClause();
					break;
				case SQLSelectParser.LEAD_SYMBOL:
				case SQLSelectParser.LAG_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 1434;
					_la = this._input.LA(1);
					if (!(_la === SQLSelectParser.LEAD_SYMBOL || _la === SQLSelectParser.LAG_SYMBOL)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1435;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1436;
					this.expr(0);
					this.state = 1438;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.COMMA_SYMBOL) {
						this.state = 1437;
						this.leadLagInfo();
					}

					this.state = 1440;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1442;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.IGNORE_SYMBOL || _la === SQLSelectParser.RESPECT_SYMBOL) {
						this.state = 1441;
						this.nullTreatment();
					}

					this.state = 1444;
					this.windowingClause();
					break;
				case SQLSelectParser.FIRST_VALUE_SYMBOL:
				case SQLSelectParser.LAST_VALUE_SYMBOL:
					this.enterOuterAlt(localctx, 4);
					this.state = 1446;
					_la = this._input.LA(1);
					if (!(_la === SQLSelectParser.FIRST_VALUE_SYMBOL || _la === SQLSelectParser.LAST_VALUE_SYMBOL)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1447;
					this.exprWithParentheses();
					this.state = 1449;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.IGNORE_SYMBOL || _la === SQLSelectParser.RESPECT_SYMBOL) {
						this.state = 1448;
						this.nullTreatment();
					}

					this.state = 1451;
					this.windowingClause();
					break;
				case SQLSelectParser.NTH_VALUE_SYMBOL:
					this.enterOuterAlt(localctx, 5);
					this.state = 1453;
					this.match(SQLSelectParser.NTH_VALUE_SYMBOL);
					this.state = 1454;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1455;
					this.expr(0);
					this.state = 1456;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1457;
					this.simpleExpr(0);
					this.state = 1458;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1461;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.FROM_SYMBOL) {
						this.state = 1459;
						this.match(SQLSelectParser.FROM_SYMBOL);
						this.state = 1460;
						_la = this._input.LA(1);
						if (!(_la === SQLSelectParser.FIRST_SYMBOL || _la === SQLSelectParser.LAST_SYMBOL)) {
							this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
					}

					this.state = 1464;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.IGNORE_SYMBOL || _la === SQLSelectParser.RESPECT_SYMBOL) {
						this.state = 1463;
						this.nullTreatment();
					}

					this.state = 1466;
					this.windowingClause();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	windowingClause() {
		let localctx = new WindowingClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 174, SQLSelectParser.RULE_windowingClause);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1470;
			this.match(SQLSelectParser.OVER_SYMBOL);
			this.state = 1473;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.TINYINT_SYMBOL:
				case SQLSelectParser.SMALLINT_SYMBOL:
				case SQLSelectParser.MEDIUMINT_SYMBOL:
				case SQLSelectParser.BYTE_INT_SYMBOL:
				case SQLSelectParser.INT_SYMBOL:
				case SQLSelectParser.BIGINT_SYMBOL:
				case SQLSelectParser.SECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SYMBOL:
				case SQLSelectParser.HOUR_SYMBOL:
				case SQLSelectParser.DAY_SYMBOL:
				case SQLSelectParser.WEEK_SYMBOL:
				case SQLSelectParser.MONTH_SYMBOL:
				case SQLSelectParser.QUARTER_SYMBOL:
				case SQLSelectParser.YEAR_SYMBOL:
				case SQLSelectParser.DEFAULT_SYMBOL:
				case SQLSelectParser.UNION_SYMBOL:
				case SQLSelectParser.SELECT_SYMBOL:
				case SQLSelectParser.ALL_SYMBOL:
				case SQLSelectParser.DISTINCT_SYMBOL:
				case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
				case SQLSelectParser.HIGH_PRIORITY_SYMBOL:
				case SQLSelectParser.SQL_SMALL_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BIG_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL:
				case SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL:
				case SQLSelectParser.LIMIT_SYMBOL:
				case SQLSelectParser.OFFSET_SYMBOL:
				case SQLSelectParser.INTO_SYMBOL:
				case SQLSelectParser.OUTFILE_SYMBOL:
				case SQLSelectParser.DUMPFILE_SYMBOL:
				case SQLSelectParser.PROCEDURE_SYMBOL:
				case SQLSelectParser.ANALYSE_SYMBOL:
				case SQLSelectParser.HAVING_SYMBOL:
				case SQLSelectParser.WINDOW_SYMBOL:
				case SQLSelectParser.AS_SYMBOL:
				case SQLSelectParser.PARTITION_SYMBOL:
				case SQLSelectParser.BY_SYMBOL:
				case SQLSelectParser.ROWS_SYMBOL:
				case SQLSelectParser.RANGE_SYMBOL:
				case SQLSelectParser.GROUPS_SYMBOL:
				case SQLSelectParser.UNBOUNDED_SYMBOL:
				case SQLSelectParser.PRECEDING_SYMBOL:
				case SQLSelectParser.INTERVAL_SYMBOL:
				case SQLSelectParser.CURRENT_SYMBOL:
				case SQLSelectParser.ROW_SYMBOL:
				case SQLSelectParser.BETWEEN_SYMBOL:
				case SQLSelectParser.AND_SYMBOL:
				case SQLSelectParser.FOLLOWING_SYMBOL:
				case SQLSelectParser.EXCLUDE_SYMBOL:
				case SQLSelectParser.GROUP_SYMBOL:
				case SQLSelectParser.TIES_SYMBOL:
				case SQLSelectParser.NO_SYMBOL:
				case SQLSelectParser.OTHERS_SYMBOL:
				case SQLSelectParser.WITH_SYMBOL:
				case SQLSelectParser.WITHOUT_SYMBOL:
				case SQLSelectParser.RECURSIVE_SYMBOL:
				case SQLSelectParser.ROLLUP_SYMBOL:
				case SQLSelectParser.CUBE_SYMBOL:
				case SQLSelectParser.ORDER_SYMBOL:
				case SQLSelectParser.ASC_SYMBOL:
				case SQLSelectParser.DESC_SYMBOL:
				case SQLSelectParser.FROM_SYMBOL:
				case SQLSelectParser.DUAL_SYMBOL:
				case SQLSelectParser.VALUES_SYMBOL:
				case SQLSelectParser.TABLE_SYMBOL:
				case SQLSelectParser.SQL_NO_CACHE_SYMBOL:
				case SQLSelectParser.SQL_CACHE_SYMBOL:
				case SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL:
				case SQLSelectParser.FOR_SYMBOL:
				case SQLSelectParser.OF_SYMBOL:
				case SQLSelectParser.LOCK_SYMBOL:
				case SQLSelectParser.IN_SYMBOL:
				case SQLSelectParser.SHARE_SYMBOL:
				case SQLSelectParser.MODE_SYMBOL:
				case SQLSelectParser.UPDATE_SYMBOL:
				case SQLSelectParser.SKIP_SYMBOL:
				case SQLSelectParser.LOCKED_SYMBOL:
				case SQLSelectParser.NOWAIT_SYMBOL:
				case SQLSelectParser.WHERE_SYMBOL:
				case SQLSelectParser.OJ_SYMBOL:
				case SQLSelectParser.ON_SYMBOL:
				case SQLSelectParser.USING_SYMBOL:
				case SQLSelectParser.NATURAL_SYMBOL:
				case SQLSelectParser.INNER_SYMBOL:
				case SQLSelectParser.JOIN_SYMBOL:
				case SQLSelectParser.LEFT_SYMBOL:
				case SQLSelectParser.RIGHT_SYMBOL:
				case SQLSelectParser.OUTER_SYMBOL:
				case SQLSelectParser.CROSS_SYMBOL:
				case SQLSelectParser.LATERAL_SYMBOL:
				case SQLSelectParser.JSON_TABLE_SYMBOL:
				case SQLSelectParser.COLUMNS_SYMBOL:
				case SQLSelectParser.ORDINALITY_SYMBOL:
				case SQLSelectParser.EXISTS_SYMBOL:
				case SQLSelectParser.PATH_SYMBOL:
				case SQLSelectParser.NESTED_SYMBOL:
				case SQLSelectParser.EMPTY_SYMBOL:
				case SQLSelectParser.ERROR_SYMBOL:
				case SQLSelectParser.NULL_SYMBOL:
				case SQLSelectParser.USE_SYMBOL:
				case SQLSelectParser.FORCE_SYMBOL:
				case SQLSelectParser.IGNORE_SYMBOL:
				case SQLSelectParser.KEY_SYMBOL:
				case SQLSelectParser.INDEX_SYMBOL:
				case SQLSelectParser.PRIMARY_SYMBOL:
				case SQLSelectParser.IS_SYMBOL:
				case SQLSelectParser.TRUE_SYMBOL:
				case SQLSelectParser.FALSE_SYMBOL:
				case SQLSelectParser.UNKNOWN_SYMBOL:
				case SQLSelectParser.NOT_SYMBOL:
				case SQLSelectParser.XOR_SYMBOL:
				case SQLSelectParser.OR_SYMBOL:
				case SQLSelectParser.ANY_SYMBOL:
				case SQLSelectParser.MEMBER_SYMBOL:
				case SQLSelectParser.SOUNDS_SYMBOL:
				case SQLSelectParser.LIKE_SYMBOL:
				case SQLSelectParser.ESCAPE_SYMBOL:
				case SQLSelectParser.REGEXP_SYMBOL:
				case SQLSelectParser.DIV_SYMBOL:
				case SQLSelectParser.MOD_SYMBOL:
				case SQLSelectParser.MATCH_SYMBOL:
				case SQLSelectParser.AGAINST_SYMBOL:
				case SQLSelectParser.BINARY_SYMBOL:
				case SQLSelectParser.CAST_SYMBOL:
				case SQLSelectParser.ARRAY_SYMBOL:
				case SQLSelectParser.CASE_SYMBOL:
				case SQLSelectParser.END_SYMBOL:
				case SQLSelectParser.CONVERT_SYMBOL:
				case SQLSelectParser.COLLATE_SYMBOL:
				case SQLSelectParser.AVG_SYMBOL:
				case SQLSelectParser.BIT_AND_SYMBOL:
				case SQLSelectParser.BIT_OR_SYMBOL:
				case SQLSelectParser.BIT_XOR_SYMBOL:
				case SQLSelectParser.COUNT_SYMBOL:
				case SQLSelectParser.MIN_SYMBOL:
				case SQLSelectParser.MAX_SYMBOL:
				case SQLSelectParser.STD_SYMBOL:
				case SQLSelectParser.VARIANCE_SYMBOL:
				case SQLSelectParser.STDDEV_SAMP_SYMBOL:
				case SQLSelectParser.VAR_SAMP_SYMBOL:
				case SQLSelectParser.SUM_SYMBOL:
				case SQLSelectParser.GROUP_CONCAT_SYMBOL:
				case SQLSelectParser.SEPARATOR_SYMBOL:
				case SQLSelectParser.GROUPING_SYMBOL:
				case SQLSelectParser.ROW_NUMBER_SYMBOL:
				case SQLSelectParser.RANK_SYMBOL:
				case SQLSelectParser.DENSE_RANK_SYMBOL:
				case SQLSelectParser.CUME_DIST_SYMBOL:
				case SQLSelectParser.PERCENT_RANK_SYMBOL:
				case SQLSelectParser.NTILE_SYMBOL:
				case SQLSelectParser.LEAD_SYMBOL:
				case SQLSelectParser.LAG_SYMBOL:
				case SQLSelectParser.FIRST_VALUE_SYMBOL:
				case SQLSelectParser.LAST_VALUE_SYMBOL:
				case SQLSelectParser.NTH_VALUE_SYMBOL:
				case SQLSelectParser.FIRST_SYMBOL:
				case SQLSelectParser.LAST_SYMBOL:
				case SQLSelectParser.OVER_SYMBOL:
				case SQLSelectParser.RESPECT_SYMBOL:
				case SQLSelectParser.NULLS_SYMBOL:
				case SQLSelectParser.JSON_ARRAYAGG_SYMBOL:
				case SQLSelectParser.JSON_OBJECTAGG_SYMBOL:
				case SQLSelectParser.BOOLEAN_SYMBOL:
				case SQLSelectParser.LANGUAGE_SYMBOL:
				case SQLSelectParser.QUERY_SYMBOL:
				case SQLSelectParser.EXPANSION_SYMBOL:
				case SQLSelectParser.CHAR_SYMBOL:
				case SQLSelectParser.CURRENT_USER_SYMBOL:
				case SQLSelectParser.DATE_SYMBOL:
				case SQLSelectParser.INSERT_SYMBOL:
				case SQLSelectParser.TIME_SYMBOL:
				case SQLSelectParser.TIMESTAMP_SYMBOL:
				case SQLSelectParser.TIMESTAMP_LTZ_SYMBOL:
				case SQLSelectParser.TIMESTAMP_NTZ_SYMBOL:
				case SQLSelectParser.ZONE_SYMBOL:
				case SQLSelectParser.USER_SYMBOL:
				case SQLSelectParser.ADDDATE_SYMBOL:
				case SQLSelectParser.SUBDATE_SYMBOL:
				case SQLSelectParser.CURDATE_SYMBOL:
				case SQLSelectParser.CURTIME_SYMBOL:
				case SQLSelectParser.DATE_ADD_SYMBOL:
				case SQLSelectParser.DATE_SUB_SYMBOL:
				case SQLSelectParser.EXTRACT_SYMBOL:
				case SQLSelectParser.GET_FORMAT_SYMBOL:
				case SQLSelectParser.NOW_SYMBOL:
				case SQLSelectParser.POSITION_SYMBOL:
				case SQLSelectParser.SYSDATE_SYMBOL:
				case SQLSelectParser.TIMESTAMP_ADD_SYMBOL:
				case SQLSelectParser.TIMESTAMP_DIFF_SYMBOL:
				case SQLSelectParser.UTC_DATE_SYMBOL:
				case SQLSelectParser.UTC_TIME_SYMBOL:
				case SQLSelectParser.UTC_TIMESTAMP_SYMBOL:
				case SQLSelectParser.ASCII_SYMBOL:
				case SQLSelectParser.CHARSET_SYMBOL:
				case SQLSelectParser.COALESCE_SYMBOL:
				case SQLSelectParser.COLLATION_SYMBOL:
				case SQLSelectParser.DATABASE_SYMBOL:
				case SQLSelectParser.IF_SYMBOL:
				case SQLSelectParser.FORMAT_SYMBOL:
				case SQLSelectParser.MICROSECOND_SYMBOL:
				case SQLSelectParser.OLD_PASSWORD_SYMBOL:
				case SQLSelectParser.PASSWORD_SYMBOL:
				case SQLSelectParser.REPEAT_SYMBOL:
				case SQLSelectParser.REPLACE_SYMBOL:
				case SQLSelectParser.REVERSE_SYMBOL:
				case SQLSelectParser.ROW_COUNT_SYMBOL:
				case SQLSelectParser.TRUNCATE_SYMBOL:
				case SQLSelectParser.WEIGHT_STRING_SYMBOL:
				case SQLSelectParser.CONTAINS_SYMBOL:
				case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
				case SQLSelectParser.LINESTRING_SYMBOL:
				case SQLSelectParser.MULTILINESTRING_SYMBOL:
				case SQLSelectParser.MULTIPOINT_SYMBOL:
				case SQLSelectParser.MULTIPOLYGON_SYMBOL:
				case SQLSelectParser.POINT_SYMBOL:
				case SQLSelectParser.POLYGON_SYMBOL:
				case SQLSelectParser.LEVEL_SYMBOL:
				case SQLSelectParser.DATETIME_SYMBOL:
				case SQLSelectParser.TRIM_SYMBOL:
				case SQLSelectParser.LEADING_SYMBOL:
				case SQLSelectParser.TRAILING_SYMBOL:
				case SQLSelectParser.BOTH_SYMBOL:
				case SQLSelectParser.STRING_SYMBOL:
				case SQLSelectParser.SUBSTRING_SYMBOL:
				case SQLSelectParser.WHEN_SYMBOL:
				case SQLSelectParser.THEN_SYMBOL:
				case SQLSelectParser.ELSE_SYMBOL:
				case SQLSelectParser.SIGNED_SYMBOL:
				case SQLSelectParser.UNSIGNED_SYMBOL:
				case SQLSelectParser.DECIMAL_SYMBOL:
				case SQLSelectParser.JSON_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL_4:
				case SQLSelectParser.FLOAT_SYMBOL_8:
				case SQLSelectParser.SET_SYMBOL:
				case SQLSelectParser.SECOND_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MICROSECOND_SYMBOL:
				case SQLSelectParser.HOUR_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_MICROSECOND_SYMBOL:
				case SQLSelectParser.DAY_SECOND_SYMBOL:
				case SQLSelectParser.DAY_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_HOUR_SYMBOL:
				case SQLSelectParser.YEAR_MONTH_SYMBOL:
				case SQLSelectParser.BTREE_SYMBOL:
				case SQLSelectParser.RTREE_SYMBOL:
				case SQLSelectParser.HASH_SYMBOL:
				case SQLSelectParser.REAL_SYMBOL:
				case SQLSelectParser.DOUBLE_SYMBOL:
				case SQLSelectParser.PRECISION_SYMBOL:
				case SQLSelectParser.NUMERIC_SYMBOL:
				case SQLSelectParser.NUMBER_SYMBOL:
				case SQLSelectParser.FIXED_SYMBOL:
				case SQLSelectParser.BIT_SYMBOL:
				case SQLSelectParser.BOOL_SYMBOL:
				case SQLSelectParser.VARYING_SYMBOL:
				case SQLSelectParser.VARCHAR_SYMBOL:
				case SQLSelectParser.VARCHAR2_SYMBOL:
				case SQLSelectParser.NATIONAL_SYMBOL:
				case SQLSelectParser.NVARCHAR_SYMBOL:
				case SQLSelectParser.NVARCHAR2_SYMBOL:
				case SQLSelectParser.NCHAR_SYMBOL:
				case SQLSelectParser.VARBINARY_SYMBOL:
				case SQLSelectParser.TINYBLOB_SYMBOL:
				case SQLSelectParser.BLOB_SYMBOL:
				case SQLSelectParser.CLOB_SYMBOL:
				case SQLSelectParser.BFILE_SYMBOL:
				case SQLSelectParser.RAW_SYMBOL:
				case SQLSelectParser.MEDIUMBLOB_SYMBOL:
				case SQLSelectParser.LONGBLOB_SYMBOL:
				case SQLSelectParser.LONG_SYMBOL:
				case SQLSelectParser.TINYTEXT_SYMBOL:
				case SQLSelectParser.TEXT_SYMBOL:
				case SQLSelectParser.MEDIUMTEXT_SYMBOL:
				case SQLSelectParser.LONGTEXT_SYMBOL:
				case SQLSelectParser.ENUM_SYMBOL:
				case SQLSelectParser.SERIAL_SYMBOL:
				case SQLSelectParser.GEOMETRY_SYMBOL:
				case SQLSelectParser.ZEROFILL_SYMBOL:
				case SQLSelectParser.BYTE_SYMBOL:
				case SQLSelectParser.UNICODE_SYMBOL:
				case SQLSelectParser.TERMINATED_SYMBOL:
				case SQLSelectParser.OPTIONALLY_SYMBOL:
				case SQLSelectParser.ENCLOSED_SYMBOL:
				case SQLSelectParser.ESCAPED_SYMBOL:
				case SQLSelectParser.LINES_SYMBOL:
				case SQLSelectParser.STARTING_SYMBOL:
				case SQLSelectParser.GLOBAL_SYMBOL:
				case SQLSelectParser.LOCAL_SYMBOL:
				case SQLSelectParser.SESSION_SYMBOL:
				case SQLSelectParser.VARIANT_SYMBOL:
				case SQLSelectParser.OBJECT_SYMBOL:
				case SQLSelectParser.GEOGRAPHY_SYMBOL:
				case SQLSelectParser.UNDERSCORE_CHARSET:
				case SQLSelectParser.IDENTIFIER:
				case SQLSelectParser.BACK_TICK_QUOTED_ID:
				case SQLSelectParser.DOUBLE_QUOTED_TEXT:
				case SQLSelectParser.SINGLE_QUOTED_TEXT:
				case SQLSelectParser.BRACKET_QUOTED_TEXT:
				case SQLSelectParser.CURLY_BRACES_QUOTED_TEXT:
					this.state = 1471;
					this.identifier();
					break;
				case SQLSelectParser.OPEN_PAR_SYMBOL:
					this.state = 1472;
					this.windowSpec();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	leadLagInfo() {
		let localctx = new LeadLagInfoContext(this, this._ctx, this.state);
		this.enterRule(localctx, 176, SQLSelectParser.RULE_leadLagInfo);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1475;
			this.match(SQLSelectParser.COMMA_SYMBOL);
			this.state = 1478;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.INT_NUMBER:
				case SQLSelectParser.DECIMAL_NUMBER:
				case SQLSelectParser.FLOAT_NUMBER:
					this.state = 1476;
					this.ulonglong_number();
					break;
				case SQLSelectParser.PARAM_MARKER:
					this.state = 1477;
					this.match(SQLSelectParser.PARAM_MARKER);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 1482;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 1480;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 1481;
				this.expr(0);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	nullTreatment() {
		let localctx = new NullTreatmentContext(this, this._ctx, this.state);
		this.enterRule(localctx, 178, SQLSelectParser.RULE_nullTreatment);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1484;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.IGNORE_SYMBOL || _la === SQLSelectParser.RESPECT_SYMBOL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1485;
			this.match(SQLSelectParser.NULLS_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	jsonFunction() {
		let localctx = new JsonFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 180, SQLSelectParser.RULE_jsonFunction);
		try {
			this.state = 1503;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.JSON_ARRAYAGG_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 1487;
					this.match(SQLSelectParser.JSON_ARRAYAGG_SYMBOL);
					this.state = 1488;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1489;
					this.inSumExpr();
					this.state = 1490;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1492;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 187, this._ctx);
					if (la_ === 1) {
						this.state = 1491;
						this.windowingClause();
					}
					break;
				case SQLSelectParser.JSON_OBJECTAGG_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 1494;
					this.match(SQLSelectParser.JSON_OBJECTAGG_SYMBOL);
					this.state = 1495;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1496;
					this.inSumExpr();
					this.state = 1497;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1498;
					this.inSumExpr();
					this.state = 1499;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					this.state = 1501;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 188, this._ctx);
					if (la_ === 1) {
						this.state = 1500;
						this.windowingClause();
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	inSumExpr() {
		let localctx = new InSumExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 182, SQLSelectParser.RULE_inSumExpr);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1506;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 190, this._ctx);
			if (la_ === 1) {
				this.state = 1505;
				this.match(SQLSelectParser.ALL_SYMBOL);
			}
			this.state = 1508;
			this.expr(0);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	identListArg() {
		let localctx = new IdentListArgContext(this, this._ctx, this.state);
		this.enterRule(localctx, 184, SQLSelectParser.RULE_identListArg);
		try {
			this.state = 1515;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.TINYINT_SYMBOL:
				case SQLSelectParser.SMALLINT_SYMBOL:
				case SQLSelectParser.MEDIUMINT_SYMBOL:
				case SQLSelectParser.BYTE_INT_SYMBOL:
				case SQLSelectParser.INT_SYMBOL:
				case SQLSelectParser.BIGINT_SYMBOL:
				case SQLSelectParser.SECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SYMBOL:
				case SQLSelectParser.HOUR_SYMBOL:
				case SQLSelectParser.DAY_SYMBOL:
				case SQLSelectParser.WEEK_SYMBOL:
				case SQLSelectParser.MONTH_SYMBOL:
				case SQLSelectParser.QUARTER_SYMBOL:
				case SQLSelectParser.YEAR_SYMBOL:
				case SQLSelectParser.DEFAULT_SYMBOL:
				case SQLSelectParser.UNION_SYMBOL:
				case SQLSelectParser.SELECT_SYMBOL:
				case SQLSelectParser.ALL_SYMBOL:
				case SQLSelectParser.DISTINCT_SYMBOL:
				case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
				case SQLSelectParser.HIGH_PRIORITY_SYMBOL:
				case SQLSelectParser.SQL_SMALL_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BIG_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL:
				case SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL:
				case SQLSelectParser.LIMIT_SYMBOL:
				case SQLSelectParser.OFFSET_SYMBOL:
				case SQLSelectParser.INTO_SYMBOL:
				case SQLSelectParser.OUTFILE_SYMBOL:
				case SQLSelectParser.DUMPFILE_SYMBOL:
				case SQLSelectParser.PROCEDURE_SYMBOL:
				case SQLSelectParser.ANALYSE_SYMBOL:
				case SQLSelectParser.HAVING_SYMBOL:
				case SQLSelectParser.WINDOW_SYMBOL:
				case SQLSelectParser.AS_SYMBOL:
				case SQLSelectParser.PARTITION_SYMBOL:
				case SQLSelectParser.BY_SYMBOL:
				case SQLSelectParser.ROWS_SYMBOL:
				case SQLSelectParser.RANGE_SYMBOL:
				case SQLSelectParser.GROUPS_SYMBOL:
				case SQLSelectParser.UNBOUNDED_SYMBOL:
				case SQLSelectParser.PRECEDING_SYMBOL:
				case SQLSelectParser.INTERVAL_SYMBOL:
				case SQLSelectParser.CURRENT_SYMBOL:
				case SQLSelectParser.ROW_SYMBOL:
				case SQLSelectParser.BETWEEN_SYMBOL:
				case SQLSelectParser.AND_SYMBOL:
				case SQLSelectParser.FOLLOWING_SYMBOL:
				case SQLSelectParser.EXCLUDE_SYMBOL:
				case SQLSelectParser.GROUP_SYMBOL:
				case SQLSelectParser.TIES_SYMBOL:
				case SQLSelectParser.NO_SYMBOL:
				case SQLSelectParser.OTHERS_SYMBOL:
				case SQLSelectParser.WITH_SYMBOL:
				case SQLSelectParser.WITHOUT_SYMBOL:
				case SQLSelectParser.RECURSIVE_SYMBOL:
				case SQLSelectParser.ROLLUP_SYMBOL:
				case SQLSelectParser.CUBE_SYMBOL:
				case SQLSelectParser.ORDER_SYMBOL:
				case SQLSelectParser.ASC_SYMBOL:
				case SQLSelectParser.DESC_SYMBOL:
				case SQLSelectParser.FROM_SYMBOL:
				case SQLSelectParser.DUAL_SYMBOL:
				case SQLSelectParser.VALUES_SYMBOL:
				case SQLSelectParser.TABLE_SYMBOL:
				case SQLSelectParser.SQL_NO_CACHE_SYMBOL:
				case SQLSelectParser.SQL_CACHE_SYMBOL:
				case SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL:
				case SQLSelectParser.FOR_SYMBOL:
				case SQLSelectParser.OF_SYMBOL:
				case SQLSelectParser.LOCK_SYMBOL:
				case SQLSelectParser.IN_SYMBOL:
				case SQLSelectParser.SHARE_SYMBOL:
				case SQLSelectParser.MODE_SYMBOL:
				case SQLSelectParser.UPDATE_SYMBOL:
				case SQLSelectParser.SKIP_SYMBOL:
				case SQLSelectParser.LOCKED_SYMBOL:
				case SQLSelectParser.NOWAIT_SYMBOL:
				case SQLSelectParser.WHERE_SYMBOL:
				case SQLSelectParser.OJ_SYMBOL:
				case SQLSelectParser.ON_SYMBOL:
				case SQLSelectParser.USING_SYMBOL:
				case SQLSelectParser.NATURAL_SYMBOL:
				case SQLSelectParser.INNER_SYMBOL:
				case SQLSelectParser.JOIN_SYMBOL:
				case SQLSelectParser.LEFT_SYMBOL:
				case SQLSelectParser.RIGHT_SYMBOL:
				case SQLSelectParser.OUTER_SYMBOL:
				case SQLSelectParser.CROSS_SYMBOL:
				case SQLSelectParser.LATERAL_SYMBOL:
				case SQLSelectParser.JSON_TABLE_SYMBOL:
				case SQLSelectParser.COLUMNS_SYMBOL:
				case SQLSelectParser.ORDINALITY_SYMBOL:
				case SQLSelectParser.EXISTS_SYMBOL:
				case SQLSelectParser.PATH_SYMBOL:
				case SQLSelectParser.NESTED_SYMBOL:
				case SQLSelectParser.EMPTY_SYMBOL:
				case SQLSelectParser.ERROR_SYMBOL:
				case SQLSelectParser.NULL_SYMBOL:
				case SQLSelectParser.USE_SYMBOL:
				case SQLSelectParser.FORCE_SYMBOL:
				case SQLSelectParser.IGNORE_SYMBOL:
				case SQLSelectParser.KEY_SYMBOL:
				case SQLSelectParser.INDEX_SYMBOL:
				case SQLSelectParser.PRIMARY_SYMBOL:
				case SQLSelectParser.IS_SYMBOL:
				case SQLSelectParser.TRUE_SYMBOL:
				case SQLSelectParser.FALSE_SYMBOL:
				case SQLSelectParser.UNKNOWN_SYMBOL:
				case SQLSelectParser.NOT_SYMBOL:
				case SQLSelectParser.XOR_SYMBOL:
				case SQLSelectParser.OR_SYMBOL:
				case SQLSelectParser.ANY_SYMBOL:
				case SQLSelectParser.MEMBER_SYMBOL:
				case SQLSelectParser.SOUNDS_SYMBOL:
				case SQLSelectParser.LIKE_SYMBOL:
				case SQLSelectParser.ESCAPE_SYMBOL:
				case SQLSelectParser.REGEXP_SYMBOL:
				case SQLSelectParser.DIV_SYMBOL:
				case SQLSelectParser.MOD_SYMBOL:
				case SQLSelectParser.MATCH_SYMBOL:
				case SQLSelectParser.AGAINST_SYMBOL:
				case SQLSelectParser.BINARY_SYMBOL:
				case SQLSelectParser.CAST_SYMBOL:
				case SQLSelectParser.ARRAY_SYMBOL:
				case SQLSelectParser.CASE_SYMBOL:
				case SQLSelectParser.END_SYMBOL:
				case SQLSelectParser.CONVERT_SYMBOL:
				case SQLSelectParser.COLLATE_SYMBOL:
				case SQLSelectParser.AVG_SYMBOL:
				case SQLSelectParser.BIT_AND_SYMBOL:
				case SQLSelectParser.BIT_OR_SYMBOL:
				case SQLSelectParser.BIT_XOR_SYMBOL:
				case SQLSelectParser.COUNT_SYMBOL:
				case SQLSelectParser.MIN_SYMBOL:
				case SQLSelectParser.MAX_SYMBOL:
				case SQLSelectParser.STD_SYMBOL:
				case SQLSelectParser.VARIANCE_SYMBOL:
				case SQLSelectParser.STDDEV_SAMP_SYMBOL:
				case SQLSelectParser.VAR_SAMP_SYMBOL:
				case SQLSelectParser.SUM_SYMBOL:
				case SQLSelectParser.GROUP_CONCAT_SYMBOL:
				case SQLSelectParser.SEPARATOR_SYMBOL:
				case SQLSelectParser.GROUPING_SYMBOL:
				case SQLSelectParser.ROW_NUMBER_SYMBOL:
				case SQLSelectParser.RANK_SYMBOL:
				case SQLSelectParser.DENSE_RANK_SYMBOL:
				case SQLSelectParser.CUME_DIST_SYMBOL:
				case SQLSelectParser.PERCENT_RANK_SYMBOL:
				case SQLSelectParser.NTILE_SYMBOL:
				case SQLSelectParser.LEAD_SYMBOL:
				case SQLSelectParser.LAG_SYMBOL:
				case SQLSelectParser.FIRST_VALUE_SYMBOL:
				case SQLSelectParser.LAST_VALUE_SYMBOL:
				case SQLSelectParser.NTH_VALUE_SYMBOL:
				case SQLSelectParser.FIRST_SYMBOL:
				case SQLSelectParser.LAST_SYMBOL:
				case SQLSelectParser.OVER_SYMBOL:
				case SQLSelectParser.RESPECT_SYMBOL:
				case SQLSelectParser.NULLS_SYMBOL:
				case SQLSelectParser.JSON_ARRAYAGG_SYMBOL:
				case SQLSelectParser.JSON_OBJECTAGG_SYMBOL:
				case SQLSelectParser.BOOLEAN_SYMBOL:
				case SQLSelectParser.LANGUAGE_SYMBOL:
				case SQLSelectParser.QUERY_SYMBOL:
				case SQLSelectParser.EXPANSION_SYMBOL:
				case SQLSelectParser.CHAR_SYMBOL:
				case SQLSelectParser.CURRENT_USER_SYMBOL:
				case SQLSelectParser.DATE_SYMBOL:
				case SQLSelectParser.INSERT_SYMBOL:
				case SQLSelectParser.TIME_SYMBOL:
				case SQLSelectParser.TIMESTAMP_SYMBOL:
				case SQLSelectParser.TIMESTAMP_LTZ_SYMBOL:
				case SQLSelectParser.TIMESTAMP_NTZ_SYMBOL:
				case SQLSelectParser.ZONE_SYMBOL:
				case SQLSelectParser.USER_SYMBOL:
				case SQLSelectParser.ADDDATE_SYMBOL:
				case SQLSelectParser.SUBDATE_SYMBOL:
				case SQLSelectParser.CURDATE_SYMBOL:
				case SQLSelectParser.CURTIME_SYMBOL:
				case SQLSelectParser.DATE_ADD_SYMBOL:
				case SQLSelectParser.DATE_SUB_SYMBOL:
				case SQLSelectParser.EXTRACT_SYMBOL:
				case SQLSelectParser.GET_FORMAT_SYMBOL:
				case SQLSelectParser.NOW_SYMBOL:
				case SQLSelectParser.POSITION_SYMBOL:
				case SQLSelectParser.SYSDATE_SYMBOL:
				case SQLSelectParser.TIMESTAMP_ADD_SYMBOL:
				case SQLSelectParser.TIMESTAMP_DIFF_SYMBOL:
				case SQLSelectParser.UTC_DATE_SYMBOL:
				case SQLSelectParser.UTC_TIME_SYMBOL:
				case SQLSelectParser.UTC_TIMESTAMP_SYMBOL:
				case SQLSelectParser.ASCII_SYMBOL:
				case SQLSelectParser.CHARSET_SYMBOL:
				case SQLSelectParser.COALESCE_SYMBOL:
				case SQLSelectParser.COLLATION_SYMBOL:
				case SQLSelectParser.DATABASE_SYMBOL:
				case SQLSelectParser.IF_SYMBOL:
				case SQLSelectParser.FORMAT_SYMBOL:
				case SQLSelectParser.MICROSECOND_SYMBOL:
				case SQLSelectParser.OLD_PASSWORD_SYMBOL:
				case SQLSelectParser.PASSWORD_SYMBOL:
				case SQLSelectParser.REPEAT_SYMBOL:
				case SQLSelectParser.REPLACE_SYMBOL:
				case SQLSelectParser.REVERSE_SYMBOL:
				case SQLSelectParser.ROW_COUNT_SYMBOL:
				case SQLSelectParser.TRUNCATE_SYMBOL:
				case SQLSelectParser.WEIGHT_STRING_SYMBOL:
				case SQLSelectParser.CONTAINS_SYMBOL:
				case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
				case SQLSelectParser.LINESTRING_SYMBOL:
				case SQLSelectParser.MULTILINESTRING_SYMBOL:
				case SQLSelectParser.MULTIPOINT_SYMBOL:
				case SQLSelectParser.MULTIPOLYGON_SYMBOL:
				case SQLSelectParser.POINT_SYMBOL:
				case SQLSelectParser.POLYGON_SYMBOL:
				case SQLSelectParser.LEVEL_SYMBOL:
				case SQLSelectParser.DATETIME_SYMBOL:
				case SQLSelectParser.TRIM_SYMBOL:
				case SQLSelectParser.LEADING_SYMBOL:
				case SQLSelectParser.TRAILING_SYMBOL:
				case SQLSelectParser.BOTH_SYMBOL:
				case SQLSelectParser.STRING_SYMBOL:
				case SQLSelectParser.SUBSTRING_SYMBOL:
				case SQLSelectParser.WHEN_SYMBOL:
				case SQLSelectParser.THEN_SYMBOL:
				case SQLSelectParser.ELSE_SYMBOL:
				case SQLSelectParser.SIGNED_SYMBOL:
				case SQLSelectParser.UNSIGNED_SYMBOL:
				case SQLSelectParser.DECIMAL_SYMBOL:
				case SQLSelectParser.JSON_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL_4:
				case SQLSelectParser.FLOAT_SYMBOL_8:
				case SQLSelectParser.SET_SYMBOL:
				case SQLSelectParser.SECOND_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MICROSECOND_SYMBOL:
				case SQLSelectParser.HOUR_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_MICROSECOND_SYMBOL:
				case SQLSelectParser.DAY_SECOND_SYMBOL:
				case SQLSelectParser.DAY_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_HOUR_SYMBOL:
				case SQLSelectParser.YEAR_MONTH_SYMBOL:
				case SQLSelectParser.BTREE_SYMBOL:
				case SQLSelectParser.RTREE_SYMBOL:
				case SQLSelectParser.HASH_SYMBOL:
				case SQLSelectParser.REAL_SYMBOL:
				case SQLSelectParser.DOUBLE_SYMBOL:
				case SQLSelectParser.PRECISION_SYMBOL:
				case SQLSelectParser.NUMERIC_SYMBOL:
				case SQLSelectParser.NUMBER_SYMBOL:
				case SQLSelectParser.FIXED_SYMBOL:
				case SQLSelectParser.BIT_SYMBOL:
				case SQLSelectParser.BOOL_SYMBOL:
				case SQLSelectParser.VARYING_SYMBOL:
				case SQLSelectParser.VARCHAR_SYMBOL:
				case SQLSelectParser.VARCHAR2_SYMBOL:
				case SQLSelectParser.NATIONAL_SYMBOL:
				case SQLSelectParser.NVARCHAR_SYMBOL:
				case SQLSelectParser.NVARCHAR2_SYMBOL:
				case SQLSelectParser.NCHAR_SYMBOL:
				case SQLSelectParser.VARBINARY_SYMBOL:
				case SQLSelectParser.TINYBLOB_SYMBOL:
				case SQLSelectParser.BLOB_SYMBOL:
				case SQLSelectParser.CLOB_SYMBOL:
				case SQLSelectParser.BFILE_SYMBOL:
				case SQLSelectParser.RAW_SYMBOL:
				case SQLSelectParser.MEDIUMBLOB_SYMBOL:
				case SQLSelectParser.LONGBLOB_SYMBOL:
				case SQLSelectParser.LONG_SYMBOL:
				case SQLSelectParser.TINYTEXT_SYMBOL:
				case SQLSelectParser.TEXT_SYMBOL:
				case SQLSelectParser.MEDIUMTEXT_SYMBOL:
				case SQLSelectParser.LONGTEXT_SYMBOL:
				case SQLSelectParser.ENUM_SYMBOL:
				case SQLSelectParser.SERIAL_SYMBOL:
				case SQLSelectParser.GEOMETRY_SYMBOL:
				case SQLSelectParser.ZEROFILL_SYMBOL:
				case SQLSelectParser.BYTE_SYMBOL:
				case SQLSelectParser.UNICODE_SYMBOL:
				case SQLSelectParser.TERMINATED_SYMBOL:
				case SQLSelectParser.OPTIONALLY_SYMBOL:
				case SQLSelectParser.ENCLOSED_SYMBOL:
				case SQLSelectParser.ESCAPED_SYMBOL:
				case SQLSelectParser.LINES_SYMBOL:
				case SQLSelectParser.STARTING_SYMBOL:
				case SQLSelectParser.GLOBAL_SYMBOL:
				case SQLSelectParser.LOCAL_SYMBOL:
				case SQLSelectParser.SESSION_SYMBOL:
				case SQLSelectParser.VARIANT_SYMBOL:
				case SQLSelectParser.OBJECT_SYMBOL:
				case SQLSelectParser.GEOGRAPHY_SYMBOL:
				case SQLSelectParser.UNDERSCORE_CHARSET:
				case SQLSelectParser.IDENTIFIER:
				case SQLSelectParser.BACK_TICK_QUOTED_ID:
				case SQLSelectParser.DOUBLE_QUOTED_TEXT:
				case SQLSelectParser.SINGLE_QUOTED_TEXT:
				case SQLSelectParser.BRACKET_QUOTED_TEXT:
				case SQLSelectParser.CURLY_BRACES_QUOTED_TEXT:
					this.enterOuterAlt(localctx, 1);
					this.state = 1510;
					this.identList();
					break;
				case SQLSelectParser.OPEN_PAR_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 1511;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1512;
					this.identList();
					this.state = 1513;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	identList() {
		let localctx = new IdentListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 186, SQLSelectParser.RULE_identList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1517;
			this.qualifiedIdentifier();
			this.state = 1522;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 1518;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 1519;
				this.qualifiedIdentifier();
				this.state = 1524;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	fulltextOptions() {
		let localctx = new FulltextOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 188, SQLSelectParser.RULE_fulltextOptions);
		var _la = 0; // Token type
		try {
			this.state = 1540;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 194, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1525;
					this.match(SQLSelectParser.IN_SYMBOL);
					this.state = 1526;
					this.match(SQLSelectParser.BOOLEAN_SYMBOL);
					this.state = 1527;
					this.match(SQLSelectParser.MODE_SYMBOL);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1528;
					this.match(SQLSelectParser.IN_SYMBOL);
					this.state = 1529;
					this.match(SQLSelectParser.NATURAL_SYMBOL);
					this.state = 1530;
					this.match(SQLSelectParser.LANGUAGE_SYMBOL);
					this.state = 1531;
					this.match(SQLSelectParser.MODE_SYMBOL);
					this.state = 1535;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.WITH_SYMBOL) {
						this.state = 1532;
						this.match(SQLSelectParser.WITH_SYMBOL);
						this.state = 1533;
						this.match(SQLSelectParser.QUERY_SYMBOL);
						this.state = 1534;
						this.match(SQLSelectParser.EXPANSION_SYMBOL);
					}

					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 1537;
					this.match(SQLSelectParser.WITH_SYMBOL);
					this.state = 1538;
					this.match(SQLSelectParser.QUERY_SYMBOL);
					this.state = 1539;
					this.match(SQLSelectParser.EXPANSION_SYMBOL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	runtimeFunctionCall() {
		let localctx = new RuntimeFunctionCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 190, SQLSelectParser.RULE_runtimeFunctionCall);
		var _la = 0; // Token type
		try {
			this.state = 1812;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.CHAR_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 1542;
					this.match(SQLSelectParser.CHAR_SYMBOL);
					this.state = 1543;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1544;
					this.exprList();
					this.state = 1547;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.USING_SYMBOL) {
						this.state = 1545;
						this.match(SQLSelectParser.USING_SYMBOL);
						this.state = 1546;
						this.charsetName();
					}

					this.state = 1549;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.CURRENT_USER_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 1551;
					this.match(SQLSelectParser.CURRENT_USER_SYMBOL);
					this.state = 1553;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 196, this._ctx);
					if (la_ === 1) {
						this.state = 1552;
						this.parentheses();
					}
					break;
				case SQLSelectParser.DATE_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 1555;
					this.match(SQLSelectParser.DATE_SYMBOL);
					this.state = 1556;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.DAY_SYMBOL:
					this.enterOuterAlt(localctx, 4);
					this.state = 1557;
					this.match(SQLSelectParser.DAY_SYMBOL);
					this.state = 1558;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.HOUR_SYMBOL:
					this.enterOuterAlt(localctx, 5);
					this.state = 1559;
					this.match(SQLSelectParser.HOUR_SYMBOL);
					this.state = 1560;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.INSERT_SYMBOL:
					this.enterOuterAlt(localctx, 6);
					this.state = 1561;
					this.match(SQLSelectParser.INSERT_SYMBOL);
					this.state = 1562;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1563;
					this.expr(0);
					this.state = 1564;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1565;
					this.expr(0);
					this.state = 1566;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1567;
					this.expr(0);
					this.state = 1568;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1569;
					this.expr(0);
					this.state = 1570;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.INTERVAL_SYMBOL:
					this.enterOuterAlt(localctx, 7);
					this.state = 1572;
					this.match(SQLSelectParser.INTERVAL_SYMBOL);
					this.state = 1573;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1574;
					this.expr(0);
					this.state = 1577;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					do {
						this.state = 1575;
						this.match(SQLSelectParser.COMMA_SYMBOL);
						this.state = 1576;
						this.expr(0);
						this.state = 1579;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					} while (_la === SQLSelectParser.COMMA_SYMBOL);
					this.state = 1581;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.LEFT_SYMBOL:
					this.enterOuterAlt(localctx, 8);
					this.state = 1583;
					this.match(SQLSelectParser.LEFT_SYMBOL);
					this.state = 1584;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1585;
					this.expr(0);
					this.state = 1586;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1587;
					this.expr(0);
					this.state = 1588;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.MINUTE_SYMBOL:
					this.enterOuterAlt(localctx, 9);
					this.state = 1590;
					this.match(SQLSelectParser.MINUTE_SYMBOL);
					this.state = 1591;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.MONTH_SYMBOL:
					this.enterOuterAlt(localctx, 10);
					this.state = 1592;
					this.match(SQLSelectParser.MONTH_SYMBOL);
					this.state = 1593;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.RIGHT_SYMBOL:
					this.enterOuterAlt(localctx, 11);
					this.state = 1594;
					this.match(SQLSelectParser.RIGHT_SYMBOL);
					this.state = 1595;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1596;
					this.expr(0);
					this.state = 1597;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1598;
					this.expr(0);
					this.state = 1599;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.SECOND_SYMBOL:
					this.enterOuterAlt(localctx, 12);
					this.state = 1601;
					this.match(SQLSelectParser.SECOND_SYMBOL);
					this.state = 1602;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.TIME_SYMBOL:
					this.enterOuterAlt(localctx, 13);
					this.state = 1603;
					this.match(SQLSelectParser.TIME_SYMBOL);
					this.state = 1604;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.TIMESTAMP_SYMBOL:
					this.enterOuterAlt(localctx, 14);
					this.state = 1605;
					this.match(SQLSelectParser.TIMESTAMP_SYMBOL);
					this.state = 1606;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1607;
					this.expr(0);
					this.state = 1610;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.COMMA_SYMBOL) {
						this.state = 1608;
						this.match(SQLSelectParser.COMMA_SYMBOL);
						this.state = 1609;
						this.expr(0);
					}

					this.state = 1612;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.TRIM_SYMBOL:
					this.enterOuterAlt(localctx, 15);
					this.state = 1614;
					this.trimFunction();
					break;
				case SQLSelectParser.USER_SYMBOL:
					this.enterOuterAlt(localctx, 16);
					this.state = 1615;
					this.match(SQLSelectParser.USER_SYMBOL);
					this.state = 1616;
					this.parentheses();
					break;
				case SQLSelectParser.VALUES_SYMBOL:
					this.enterOuterAlt(localctx, 17);
					this.state = 1617;
					this.match(SQLSelectParser.VALUES_SYMBOL);
					this.state = 1618;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.YEAR_SYMBOL:
					this.enterOuterAlt(localctx, 18);
					this.state = 1619;
					this.match(SQLSelectParser.YEAR_SYMBOL);
					this.state = 1620;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.ADDDATE_SYMBOL:
				case SQLSelectParser.SUBDATE_SYMBOL:
					this.enterOuterAlt(localctx, 19);
					this.state = 1621;
					_la = this._input.LA(1);
					if (!(_la === SQLSelectParser.ADDDATE_SYMBOL || _la === SQLSelectParser.SUBDATE_SYMBOL)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1622;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1623;
					this.expr(0);
					this.state = 1624;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1630;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 199, this._ctx);
					switch (la_) {
						case 1:
							this.state = 1625;
							this.expr(0);
							break;

						case 2:
							this.state = 1626;
							this.match(SQLSelectParser.INTERVAL_SYMBOL);
							this.state = 1627;
							this.expr(0);
							this.state = 1628;
							this.interval();
							break;
					}
					this.state = 1632;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.CURDATE_SYMBOL:
					this.enterOuterAlt(localctx, 20);
					this.state = 1634;
					this.match(SQLSelectParser.CURDATE_SYMBOL);
					this.state = 1636;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 200, this._ctx);
					if (la_ === 1) {
						this.state = 1635;
						this.parentheses();
					}
					break;
				case SQLSelectParser.CURTIME_SYMBOL:
					this.enterOuterAlt(localctx, 21);
					this.state = 1638;
					this.match(SQLSelectParser.CURTIME_SYMBOL);
					this.state = 1640;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 201, this._ctx);
					if (la_ === 1) {
						this.state = 1639;
						this.timeFunctionParameters();
					}
					break;
				case SQLSelectParser.DATE_ADD_SYMBOL:
				case SQLSelectParser.DATE_SUB_SYMBOL:
					this.enterOuterAlt(localctx, 22);
					this.state = 1642;
					_la = this._input.LA(1);
					if (!(_la === SQLSelectParser.DATE_ADD_SYMBOL || _la === SQLSelectParser.DATE_SUB_SYMBOL)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1643;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1644;
					this.expr(0);
					this.state = 1645;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1646;
					this.match(SQLSelectParser.INTERVAL_SYMBOL);
					this.state = 1647;
					this.expr(0);
					this.state = 1648;
					this.interval();
					this.state = 1649;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.EXTRACT_SYMBOL:
					this.enterOuterAlt(localctx, 23);
					this.state = 1651;
					this.match(SQLSelectParser.EXTRACT_SYMBOL);
					this.state = 1652;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1653;
					this.interval();
					this.state = 1654;
					this.match(SQLSelectParser.FROM_SYMBOL);
					this.state = 1655;
					this.expr(0);
					this.state = 1656;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.GET_FORMAT_SYMBOL:
					this.enterOuterAlt(localctx, 24);
					this.state = 1658;
					this.match(SQLSelectParser.GET_FORMAT_SYMBOL);
					this.state = 1659;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1660;
					this.dateTimeTtype();
					this.state = 1661;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1662;
					this.expr(0);
					this.state = 1663;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.NOW_SYMBOL:
					this.enterOuterAlt(localctx, 25);
					this.state = 1665;
					this.match(SQLSelectParser.NOW_SYMBOL);
					this.state = 1667;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 202, this._ctx);
					if (la_ === 1) {
						this.state = 1666;
						this.timeFunctionParameters();
					}
					break;
				case SQLSelectParser.POSITION_SYMBOL:
					this.enterOuterAlt(localctx, 26);
					this.state = 1669;
					this.match(SQLSelectParser.POSITION_SYMBOL);
					this.state = 1670;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1671;
					this.bitExpr(0);
					this.state = 1672;
					this.match(SQLSelectParser.IN_SYMBOL);
					this.state = 1673;
					this.expr(0);
					this.state = 1674;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.SUBSTRING_SYMBOL:
					this.enterOuterAlt(localctx, 27);
					this.state = 1676;
					this.substringFunction();
					break;
				case SQLSelectParser.SYSDATE_SYMBOL:
					this.enterOuterAlt(localctx, 28);
					this.state = 1677;
					this.match(SQLSelectParser.SYSDATE_SYMBOL);
					this.state = 1679;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 203, this._ctx);
					if (la_ === 1) {
						this.state = 1678;
						this.timeFunctionParameters();
					}
					break;
				case SQLSelectParser.TIMESTAMP_ADD_SYMBOL:
				case SQLSelectParser.TIMESTAMP_DIFF_SYMBOL:
					this.enterOuterAlt(localctx, 29);
					this.state = 1681;
					_la = this._input.LA(1);
					if (
						!(_la === SQLSelectParser.TIMESTAMP_ADD_SYMBOL || _la === SQLSelectParser.TIMESTAMP_DIFF_SYMBOL)
					) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1682;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1683;
					this.intervalTimeStamp();
					this.state = 1684;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1685;
					this.expr(0);
					this.state = 1686;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1687;
					this.expr(0);
					this.state = 1688;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.UTC_DATE_SYMBOL:
					this.enterOuterAlt(localctx, 30);
					this.state = 1690;
					this.match(SQLSelectParser.UTC_DATE_SYMBOL);
					this.state = 1692;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 204, this._ctx);
					if (la_ === 1) {
						this.state = 1691;
						this.parentheses();
					}
					break;
				case SQLSelectParser.UTC_TIME_SYMBOL:
					this.enterOuterAlt(localctx, 31);
					this.state = 1694;
					this.match(SQLSelectParser.UTC_TIME_SYMBOL);
					this.state = 1696;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 205, this._ctx);
					if (la_ === 1) {
						this.state = 1695;
						this.timeFunctionParameters();
					}
					break;
				case SQLSelectParser.UTC_TIMESTAMP_SYMBOL:
					this.enterOuterAlt(localctx, 32);
					this.state = 1698;
					this.match(SQLSelectParser.UTC_TIMESTAMP_SYMBOL);
					this.state = 1700;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 206, this._ctx);
					if (la_ === 1) {
						this.state = 1699;
						this.timeFunctionParameters();
					}
					break;
				case SQLSelectParser.ASCII_SYMBOL:
					this.enterOuterAlt(localctx, 33);
					this.state = 1702;
					this.match(SQLSelectParser.ASCII_SYMBOL);
					this.state = 1703;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.CHARSET_SYMBOL:
					this.enterOuterAlt(localctx, 34);
					this.state = 1704;
					this.match(SQLSelectParser.CHARSET_SYMBOL);
					this.state = 1705;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.COALESCE_SYMBOL:
					this.enterOuterAlt(localctx, 35);
					this.state = 1706;
					this.match(SQLSelectParser.COALESCE_SYMBOL);
					this.state = 1707;
					this.exprListWithParentheses();
					break;
				case SQLSelectParser.COLLATION_SYMBOL:
					this.enterOuterAlt(localctx, 36);
					this.state = 1708;
					this.match(SQLSelectParser.COLLATION_SYMBOL);
					this.state = 1709;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.DATABASE_SYMBOL:
					this.enterOuterAlt(localctx, 37);
					this.state = 1710;
					this.match(SQLSelectParser.DATABASE_SYMBOL);
					this.state = 1711;
					this.parentheses();
					break;
				case SQLSelectParser.IF_SYMBOL:
					this.enterOuterAlt(localctx, 38);
					this.state = 1712;
					this.match(SQLSelectParser.IF_SYMBOL);
					this.state = 1713;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1714;
					this.expr(0);
					this.state = 1715;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1716;
					this.expr(0);
					this.state = 1717;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1718;
					this.expr(0);
					this.state = 1719;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.FORMAT_SYMBOL:
					this.enterOuterAlt(localctx, 39);
					this.state = 1721;
					this.match(SQLSelectParser.FORMAT_SYMBOL);
					this.state = 1722;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1723;
					this.expr(0);
					this.state = 1724;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1725;
					this.expr(0);
					this.state = 1728;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.COMMA_SYMBOL) {
						this.state = 1726;
						this.match(SQLSelectParser.COMMA_SYMBOL);
						this.state = 1727;
						this.expr(0);
					}

					this.state = 1730;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.MICROSECOND_SYMBOL:
					this.enterOuterAlt(localctx, 40);
					this.state = 1732;
					this.match(SQLSelectParser.MICROSECOND_SYMBOL);
					this.state = 1733;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.MOD_SYMBOL:
					this.enterOuterAlt(localctx, 41);
					this.state = 1734;
					this.match(SQLSelectParser.MOD_SYMBOL);
					this.state = 1735;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1736;
					this.expr(0);
					this.state = 1737;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1738;
					this.expr(0);
					this.state = 1739;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.OLD_PASSWORD_SYMBOL:
					this.enterOuterAlt(localctx, 42);
					this.state = 1741;
					this.match(SQLSelectParser.OLD_PASSWORD_SYMBOL);
					this.state = 1742;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1743;
					this.textLiteral();
					this.state = 1744;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.PASSWORD_SYMBOL:
					this.enterOuterAlt(localctx, 43);
					this.state = 1746;
					this.match(SQLSelectParser.PASSWORD_SYMBOL);
					this.state = 1747;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.QUARTER_SYMBOL:
					this.enterOuterAlt(localctx, 44);
					this.state = 1748;
					this.match(SQLSelectParser.QUARTER_SYMBOL);
					this.state = 1749;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.REPEAT_SYMBOL:
					this.enterOuterAlt(localctx, 45);
					this.state = 1750;
					this.match(SQLSelectParser.REPEAT_SYMBOL);
					this.state = 1751;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1752;
					this.expr(0);
					this.state = 1753;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1754;
					this.expr(0);
					this.state = 1755;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.REPLACE_SYMBOL:
					this.enterOuterAlt(localctx, 46);
					this.state = 1757;
					this.match(SQLSelectParser.REPLACE_SYMBOL);
					this.state = 1758;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1759;
					this.expr(0);
					this.state = 1760;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1761;
					this.expr(0);
					this.state = 1762;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1763;
					this.expr(0);
					this.state = 1764;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.REVERSE_SYMBOL:
					this.enterOuterAlt(localctx, 47);
					this.state = 1766;
					this.match(SQLSelectParser.REVERSE_SYMBOL);
					this.state = 1767;
					this.exprWithParentheses();
					break;
				case SQLSelectParser.ROW_COUNT_SYMBOL:
					this.enterOuterAlt(localctx, 48);
					this.state = 1768;
					this.match(SQLSelectParser.ROW_COUNT_SYMBOL);
					this.state = 1769;
					this.parentheses();
					break;
				case SQLSelectParser.TRUNCATE_SYMBOL:
					this.enterOuterAlt(localctx, 49);
					this.state = 1770;
					this.match(SQLSelectParser.TRUNCATE_SYMBOL);
					this.state = 1771;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1772;
					this.expr(0);
					this.state = 1773;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1774;
					this.expr(0);
					this.state = 1775;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.WEEK_SYMBOL:
					this.enterOuterAlt(localctx, 50);
					this.state = 1777;
					this.match(SQLSelectParser.WEEK_SYMBOL);
					this.state = 1778;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1779;
					this.expr(0);
					this.state = 1782;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.COMMA_SYMBOL) {
						this.state = 1780;
						this.match(SQLSelectParser.COMMA_SYMBOL);
						this.state = 1781;
						this.expr(0);
					}

					this.state = 1784;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.WEIGHT_STRING_SYMBOL:
					this.enterOuterAlt(localctx, 51);
					this.state = 1786;
					this.match(SQLSelectParser.WEIGHT_STRING_SYMBOL);
					this.state = 1787;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1788;
					this.expr(0);
					this.state = 1807;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 211, this._ctx);
					switch (la_) {
						case 1:
							this.state = 1792;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === SQLSelectParser.AS_SYMBOL) {
								this.state = 1789;
								this.match(SQLSelectParser.AS_SYMBOL);
								this.state = 1790;
								this.match(SQLSelectParser.CHAR_SYMBOL);
								this.state = 1791;
								this.wsNumCodepoints();
							}

							this.state = 1795;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === SQLSelectParser.LEVEL_SYMBOL) {
								this.state = 1794;
								this.weightStringLevels();
							}

							break;

						case 2:
							this.state = 1797;
							this.match(SQLSelectParser.AS_SYMBOL);
							this.state = 1798;
							this.match(SQLSelectParser.BINARY_SYMBOL);
							this.state = 1799;
							this.wsNumCodepoints();
							break;

						case 3:
							this.state = 1800;
							this.match(SQLSelectParser.COMMA_SYMBOL);
							this.state = 1801;
							this.ulong_number();
							this.state = 1802;
							this.match(SQLSelectParser.COMMA_SYMBOL);
							this.state = 1803;
							this.ulong_number();
							this.state = 1804;
							this.match(SQLSelectParser.COMMA_SYMBOL);
							this.state = 1805;
							this.ulong_number();
							break;
					}
					this.state = 1809;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.CONTAINS_SYMBOL:
				case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
				case SQLSelectParser.LINESTRING_SYMBOL:
				case SQLSelectParser.MULTILINESTRING_SYMBOL:
				case SQLSelectParser.MULTIPOINT_SYMBOL:
				case SQLSelectParser.MULTIPOLYGON_SYMBOL:
				case SQLSelectParser.POINT_SYMBOL:
				case SQLSelectParser.POLYGON_SYMBOL:
					this.enterOuterAlt(localctx, 52);
					this.state = 1811;
					this.geometryFunction();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	geometryFunction() {
		let localctx = new GeometryFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 192, SQLSelectParser.RULE_geometryFunction);
		var _la = 0; // Token type
		try {
			this.state = 1844;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.CONTAINS_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 1814;
					this.match(SQLSelectParser.CONTAINS_SYMBOL);
					this.state = 1815;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1816;
					this.expr(0);
					this.state = 1817;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1818;
					this.expr(0);
					this.state = 1819;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 1821;
					this.match(SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL);
					this.state = 1822;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1824;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (
						((_la & ~0x1f) == 0 &&
							((1 << _la) &
								((1 << SQLSelectParser.PLUS_OPERATOR) |
									(1 << SQLSelectParser.MINUS_OPERATOR) |
									(1 << SQLSelectParser.LOGICAL_NOT_OPERATOR) |
									(1 << SQLSelectParser.BITWISE_NOT_OPERATOR) |
									(1 << SQLSelectParser.OPEN_PAR_SYMBOL) |
									(1 << SQLSelectParser.OPEN_CURLY_SYMBOL))) !==
								0) ||
						(((_la - 38) & ~0x1f) == 0 &&
							((1 << (_la - 38)) &
								((1 << (SQLSelectParser.AT_SIGN_SYMBOL - 38)) |
									(1 << (SQLSelectParser.AT_TEXT_SUFFIX - 38)) |
									(1 << (SQLSelectParser.AT_AT_SIGN_SYMBOL - 38)) |
									(1 << (SQLSelectParser.NULL2_SYMBOL - 38)) |
									(1 << (SQLSelectParser.PARAM_MARKER - 38)) |
									(1 << (SQLSelectParser.HEX_NUMBER - 38)) |
									(1 << (SQLSelectParser.BIN_NUMBER - 38)) |
									(1 << (SQLSelectParser.INT_NUMBER - 38)) |
									(1 << (SQLSelectParser.DECIMAL_NUMBER - 38)) |
									(1 << (SQLSelectParser.FLOAT_NUMBER - 38)) |
									(1 << (SQLSelectParser.TINYINT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.SMALLINT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.MEDIUMINT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.BYTE_INT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.INT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.BIGINT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.SECOND_SYMBOL - 38)) |
									(1 << (SQLSelectParser.MINUTE_SYMBOL - 38)) |
									(1 << (SQLSelectParser.HOUR_SYMBOL - 38)) |
									(1 << (SQLSelectParser.DAY_SYMBOL - 38)) |
									(1 << (SQLSelectParser.WEEK_SYMBOL - 38)) |
									(1 << (SQLSelectParser.MONTH_SYMBOL - 38)) |
									(1 << (SQLSelectParser.QUARTER_SYMBOL - 38)) |
									(1 << (SQLSelectParser.YEAR_SYMBOL - 38)) |
									(1 << (SQLSelectParser.DEFAULT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.UNION_SYMBOL - 38)) |
									(1 << (SQLSelectParser.SELECT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.ALL_SYMBOL - 38)) |
									(1 << (SQLSelectParser.DISTINCT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.STRAIGHT_JOIN_SYMBOL - 38)) |
									(1 << (SQLSelectParser.HIGH_PRIORITY_SYMBOL - 38)))) !==
								0) ||
						(((_la - 70) & ~0x1f) == 0 &&
							((1 << (_la - 70)) &
								((1 << (SQLSelectParser.SQL_SMALL_RESULT_SYMBOL - 70)) |
									(1 << (SQLSelectParser.SQL_BIG_RESULT_SYMBOL - 70)) |
									(1 << (SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL - 70)) |
									(1 << (SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL - 70)) |
									(1 << (SQLSelectParser.LIMIT_SYMBOL - 70)) |
									(1 << (SQLSelectParser.OFFSET_SYMBOL - 70)) |
									(1 << (SQLSelectParser.INTO_SYMBOL - 70)) |
									(1 << (SQLSelectParser.OUTFILE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.DUMPFILE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.PROCEDURE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.ANALYSE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.HAVING_SYMBOL - 70)) |
									(1 << (SQLSelectParser.WINDOW_SYMBOL - 70)) |
									(1 << (SQLSelectParser.AS_SYMBOL - 70)) |
									(1 << (SQLSelectParser.PARTITION_SYMBOL - 70)) |
									(1 << (SQLSelectParser.BY_SYMBOL - 70)) |
									(1 << (SQLSelectParser.ROWS_SYMBOL - 70)) |
									(1 << (SQLSelectParser.RANGE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.GROUPS_SYMBOL - 70)) |
									(1 << (SQLSelectParser.UNBOUNDED_SYMBOL - 70)) |
									(1 << (SQLSelectParser.PRECEDING_SYMBOL - 70)) |
									(1 << (SQLSelectParser.INTERVAL_SYMBOL - 70)) |
									(1 << (SQLSelectParser.CURRENT_SYMBOL - 70)) |
									(1 << (SQLSelectParser.ROW_SYMBOL - 70)) |
									(1 << (SQLSelectParser.BETWEEN_SYMBOL - 70)) |
									(1 << (SQLSelectParser.AND_SYMBOL - 70)) |
									(1 << (SQLSelectParser.FOLLOWING_SYMBOL - 70)) |
									(1 << (SQLSelectParser.EXCLUDE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.GROUP_SYMBOL - 70)) |
									(1 << (SQLSelectParser.TIES_SYMBOL - 70)) |
									(1 << (SQLSelectParser.NO_SYMBOL - 70)) |
									(1 << (SQLSelectParser.OTHERS_SYMBOL - 70)))) !==
								0) ||
						(((_la - 102) & ~0x1f) == 0 &&
							((1 << (_la - 102)) &
								((1 << (SQLSelectParser.WITH_SYMBOL - 102)) |
									(1 << (SQLSelectParser.WITHOUT_SYMBOL - 102)) |
									(1 << (SQLSelectParser.RECURSIVE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.ROLLUP_SYMBOL - 102)) |
									(1 << (SQLSelectParser.CUBE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.ORDER_SYMBOL - 102)) |
									(1 << (SQLSelectParser.ASC_SYMBOL - 102)) |
									(1 << (SQLSelectParser.DESC_SYMBOL - 102)) |
									(1 << (SQLSelectParser.FROM_SYMBOL - 102)) |
									(1 << (SQLSelectParser.DUAL_SYMBOL - 102)) |
									(1 << (SQLSelectParser.VALUES_SYMBOL - 102)) |
									(1 << (SQLSelectParser.TABLE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.SQL_NO_CACHE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.SQL_CACHE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL - 102)) |
									(1 << (SQLSelectParser.FOR_SYMBOL - 102)) |
									(1 << (SQLSelectParser.OF_SYMBOL - 102)) |
									(1 << (SQLSelectParser.LOCK_SYMBOL - 102)) |
									(1 << (SQLSelectParser.IN_SYMBOL - 102)) |
									(1 << (SQLSelectParser.SHARE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.MODE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.UPDATE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.SKIP_SYMBOL - 102)) |
									(1 << (SQLSelectParser.LOCKED_SYMBOL - 102)) |
									(1 << (SQLSelectParser.NOWAIT_SYMBOL - 102)) |
									(1 << (SQLSelectParser.WHERE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.OJ_SYMBOL - 102)) |
									(1 << (SQLSelectParser.ON_SYMBOL - 102)) |
									(1 << (SQLSelectParser.USING_SYMBOL - 102)) |
									(1 << (SQLSelectParser.NATURAL_SYMBOL - 102)) |
									(1 << (SQLSelectParser.INNER_SYMBOL - 102)))) !==
								0) ||
						(((_la - 134) & ~0x1f) == 0 &&
							((1 << (_la - 134)) &
								((1 << (SQLSelectParser.JOIN_SYMBOL - 134)) |
									(1 << (SQLSelectParser.LEFT_SYMBOL - 134)) |
									(1 << (SQLSelectParser.RIGHT_SYMBOL - 134)) |
									(1 << (SQLSelectParser.OUTER_SYMBOL - 134)) |
									(1 << (SQLSelectParser.CROSS_SYMBOL - 134)) |
									(1 << (SQLSelectParser.LATERAL_SYMBOL - 134)) |
									(1 << (SQLSelectParser.JSON_TABLE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.COLUMNS_SYMBOL - 134)) |
									(1 << (SQLSelectParser.ORDINALITY_SYMBOL - 134)) |
									(1 << (SQLSelectParser.EXISTS_SYMBOL - 134)) |
									(1 << (SQLSelectParser.PATH_SYMBOL - 134)) |
									(1 << (SQLSelectParser.NESTED_SYMBOL - 134)) |
									(1 << (SQLSelectParser.EMPTY_SYMBOL - 134)) |
									(1 << (SQLSelectParser.ERROR_SYMBOL - 134)) |
									(1 << (SQLSelectParser.NULL_SYMBOL - 134)) |
									(1 << (SQLSelectParser.USE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.FORCE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.IGNORE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.KEY_SYMBOL - 134)) |
									(1 << (SQLSelectParser.INDEX_SYMBOL - 134)) |
									(1 << (SQLSelectParser.PRIMARY_SYMBOL - 134)) |
									(1 << (SQLSelectParser.IS_SYMBOL - 134)) |
									(1 << (SQLSelectParser.TRUE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.FALSE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.UNKNOWN_SYMBOL - 134)) |
									(1 << (SQLSelectParser.NOT_SYMBOL - 134)) |
									(1 << (SQLSelectParser.XOR_SYMBOL - 134)) |
									(1 << (SQLSelectParser.OR_SYMBOL - 134)) |
									(1 << (SQLSelectParser.ANY_SYMBOL - 134)) |
									(1 << (SQLSelectParser.MEMBER_SYMBOL - 134)) |
									(1 << (SQLSelectParser.SOUNDS_SYMBOL - 134)) |
									(1 << (SQLSelectParser.LIKE_SYMBOL - 134)))) !==
								0) ||
						(((_la - 166) & ~0x1f) == 0 &&
							((1 << (_la - 166)) &
								((1 << (SQLSelectParser.ESCAPE_SYMBOL - 166)) |
									(1 << (SQLSelectParser.REGEXP_SYMBOL - 166)) |
									(1 << (SQLSelectParser.DIV_SYMBOL - 166)) |
									(1 << (SQLSelectParser.MOD_SYMBOL - 166)) |
									(1 << (SQLSelectParser.MATCH_SYMBOL - 166)) |
									(1 << (SQLSelectParser.AGAINST_SYMBOL - 166)) |
									(1 << (SQLSelectParser.BINARY_SYMBOL - 166)) |
									(1 << (SQLSelectParser.CAST_SYMBOL - 166)) |
									(1 << (SQLSelectParser.ARRAY_SYMBOL - 166)) |
									(1 << (SQLSelectParser.CASE_SYMBOL - 166)) |
									(1 << (SQLSelectParser.END_SYMBOL - 166)) |
									(1 << (SQLSelectParser.CONVERT_SYMBOL - 166)) |
									(1 << (SQLSelectParser.COLLATE_SYMBOL - 166)) |
									(1 << (SQLSelectParser.AVG_SYMBOL - 166)) |
									(1 << (SQLSelectParser.BIT_AND_SYMBOL - 166)) |
									(1 << (SQLSelectParser.BIT_OR_SYMBOL - 166)) |
									(1 << (SQLSelectParser.BIT_XOR_SYMBOL - 166)) |
									(1 << (SQLSelectParser.COUNT_SYMBOL - 166)) |
									(1 << (SQLSelectParser.MIN_SYMBOL - 166)) |
									(1 << (SQLSelectParser.MAX_SYMBOL - 166)) |
									(1 << (SQLSelectParser.STD_SYMBOL - 166)) |
									(1 << (SQLSelectParser.VARIANCE_SYMBOL - 166)) |
									(1 << (SQLSelectParser.STDDEV_SAMP_SYMBOL - 166)) |
									(1 << (SQLSelectParser.VAR_SAMP_SYMBOL - 166)) |
									(1 << (SQLSelectParser.SUM_SYMBOL - 166)) |
									(1 << (SQLSelectParser.GROUP_CONCAT_SYMBOL - 166)) |
									(1 << (SQLSelectParser.SEPARATOR_SYMBOL - 166)) |
									(1 << (SQLSelectParser.GROUPING_SYMBOL - 166)) |
									(1 << (SQLSelectParser.ROW_NUMBER_SYMBOL - 166)) |
									(1 << (SQLSelectParser.RANK_SYMBOL - 166)) |
									(1 << (SQLSelectParser.DENSE_RANK_SYMBOL - 166)) |
									(1 << (SQLSelectParser.CUME_DIST_SYMBOL - 166)))) !==
								0) ||
						(((_la - 198) & ~0x1f) == 0 &&
							((1 << (_la - 198)) &
								((1 << (SQLSelectParser.PERCENT_RANK_SYMBOL - 198)) |
									(1 << (SQLSelectParser.NTILE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.LEAD_SYMBOL - 198)) |
									(1 << (SQLSelectParser.LAG_SYMBOL - 198)) |
									(1 << (SQLSelectParser.FIRST_VALUE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.LAST_VALUE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.NTH_VALUE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.FIRST_SYMBOL - 198)) |
									(1 << (SQLSelectParser.LAST_SYMBOL - 198)) |
									(1 << (SQLSelectParser.OVER_SYMBOL - 198)) |
									(1 << (SQLSelectParser.RESPECT_SYMBOL - 198)) |
									(1 << (SQLSelectParser.NULLS_SYMBOL - 198)) |
									(1 << (SQLSelectParser.JSON_ARRAYAGG_SYMBOL - 198)) |
									(1 << (SQLSelectParser.JSON_OBJECTAGG_SYMBOL - 198)) |
									(1 << (SQLSelectParser.BOOLEAN_SYMBOL - 198)) |
									(1 << (SQLSelectParser.LANGUAGE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.QUERY_SYMBOL - 198)) |
									(1 << (SQLSelectParser.EXPANSION_SYMBOL - 198)) |
									(1 << (SQLSelectParser.CHAR_SYMBOL - 198)) |
									(1 << (SQLSelectParser.CURRENT_USER_SYMBOL - 198)) |
									(1 << (SQLSelectParser.DATE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.INSERT_SYMBOL - 198)) |
									(1 << (SQLSelectParser.TIME_SYMBOL - 198)) |
									(1 << (SQLSelectParser.TIMESTAMP_SYMBOL - 198)) |
									(1 << (SQLSelectParser.TIMESTAMP_LTZ_SYMBOL - 198)) |
									(1 << (SQLSelectParser.TIMESTAMP_NTZ_SYMBOL - 198)) |
									(1 << (SQLSelectParser.ZONE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.USER_SYMBOL - 198)) |
									(1 << (SQLSelectParser.ADDDATE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.SUBDATE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.CURDATE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.CURTIME_SYMBOL - 198)))) !==
								0) ||
						(((_la - 230) & ~0x1f) == 0 &&
							((1 << (_la - 230)) &
								((1 << (SQLSelectParser.DATE_ADD_SYMBOL - 230)) |
									(1 << (SQLSelectParser.DATE_SUB_SYMBOL - 230)) |
									(1 << (SQLSelectParser.EXTRACT_SYMBOL - 230)) |
									(1 << (SQLSelectParser.GET_FORMAT_SYMBOL - 230)) |
									(1 << (SQLSelectParser.NOW_SYMBOL - 230)) |
									(1 << (SQLSelectParser.POSITION_SYMBOL - 230)) |
									(1 << (SQLSelectParser.SYSDATE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.TIMESTAMP_ADD_SYMBOL - 230)) |
									(1 << (SQLSelectParser.TIMESTAMP_DIFF_SYMBOL - 230)) |
									(1 << (SQLSelectParser.UTC_DATE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.UTC_TIME_SYMBOL - 230)) |
									(1 << (SQLSelectParser.UTC_TIMESTAMP_SYMBOL - 230)) |
									(1 << (SQLSelectParser.ASCII_SYMBOL - 230)) |
									(1 << (SQLSelectParser.CHARSET_SYMBOL - 230)) |
									(1 << (SQLSelectParser.COALESCE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.COLLATION_SYMBOL - 230)) |
									(1 << (SQLSelectParser.DATABASE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.IF_SYMBOL - 230)) |
									(1 << (SQLSelectParser.FORMAT_SYMBOL - 230)) |
									(1 << (SQLSelectParser.MICROSECOND_SYMBOL - 230)) |
									(1 << (SQLSelectParser.OLD_PASSWORD_SYMBOL - 230)) |
									(1 << (SQLSelectParser.PASSWORD_SYMBOL - 230)) |
									(1 << (SQLSelectParser.REPEAT_SYMBOL - 230)) |
									(1 << (SQLSelectParser.REPLACE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.REVERSE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.ROW_COUNT_SYMBOL - 230)) |
									(1 << (SQLSelectParser.TRUNCATE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.WEIGHT_STRING_SYMBOL - 230)) |
									(1 << (SQLSelectParser.CONTAINS_SYMBOL - 230)) |
									(1 << (SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL - 230)) |
									(1 << (SQLSelectParser.LINESTRING_SYMBOL - 230)) |
									(1 << (SQLSelectParser.MULTILINESTRING_SYMBOL - 230)))) !==
								0) ||
						(((_la - 262) & ~0x1f) == 0 &&
							((1 << (_la - 262)) &
								((1 << (SQLSelectParser.MULTIPOINT_SYMBOL - 262)) |
									(1 << (SQLSelectParser.MULTIPOLYGON_SYMBOL - 262)) |
									(1 << (SQLSelectParser.POINT_SYMBOL - 262)) |
									(1 << (SQLSelectParser.POLYGON_SYMBOL - 262)) |
									(1 << (SQLSelectParser.LEVEL_SYMBOL - 262)) |
									(1 << (SQLSelectParser.DATETIME_SYMBOL - 262)) |
									(1 << (SQLSelectParser.TRIM_SYMBOL - 262)) |
									(1 << (SQLSelectParser.LEADING_SYMBOL - 262)) |
									(1 << (SQLSelectParser.TRAILING_SYMBOL - 262)) |
									(1 << (SQLSelectParser.BOTH_SYMBOL - 262)) |
									(1 << (SQLSelectParser.STRING_SYMBOL - 262)) |
									(1 << (SQLSelectParser.SUBSTRING_SYMBOL - 262)) |
									(1 << (SQLSelectParser.WHEN_SYMBOL - 262)) |
									(1 << (SQLSelectParser.THEN_SYMBOL - 262)) |
									(1 << (SQLSelectParser.ELSE_SYMBOL - 262)) |
									(1 << (SQLSelectParser.SIGNED_SYMBOL - 262)) |
									(1 << (SQLSelectParser.UNSIGNED_SYMBOL - 262)) |
									(1 << (SQLSelectParser.DECIMAL_SYMBOL - 262)) |
									(1 << (SQLSelectParser.JSON_SYMBOL - 262)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL - 262)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL_4 - 262)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL_8 - 262)) |
									(1 << (SQLSelectParser.SET_SYMBOL - 262)) |
									(1 << (SQLSelectParser.SECOND_MICROSECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.MINUTE_MICROSECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.MINUTE_SECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.HOUR_MICROSECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.HOUR_SECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.HOUR_MINUTE_SYMBOL - 262)) |
									(1 << (SQLSelectParser.DAY_MICROSECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.DAY_SECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.DAY_MINUTE_SYMBOL - 262)))) !==
								0) ||
						(((_la - 294) & ~0x1f) == 0 &&
							((1 << (_la - 294)) &
								((1 << (SQLSelectParser.DAY_HOUR_SYMBOL - 294)) |
									(1 << (SQLSelectParser.YEAR_MONTH_SYMBOL - 294)) |
									(1 << (SQLSelectParser.BTREE_SYMBOL - 294)) |
									(1 << (SQLSelectParser.RTREE_SYMBOL - 294)) |
									(1 << (SQLSelectParser.HASH_SYMBOL - 294)) |
									(1 << (SQLSelectParser.REAL_SYMBOL - 294)) |
									(1 << (SQLSelectParser.DOUBLE_SYMBOL - 294)) |
									(1 << (SQLSelectParser.PRECISION_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NUMERIC_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NUMBER_SYMBOL - 294)) |
									(1 << (SQLSelectParser.FIXED_SYMBOL - 294)) |
									(1 << (SQLSelectParser.BIT_SYMBOL - 294)) |
									(1 << (SQLSelectParser.BOOL_SYMBOL - 294)) |
									(1 << (SQLSelectParser.VARYING_SYMBOL - 294)) |
									(1 << (SQLSelectParser.VARCHAR_SYMBOL - 294)) |
									(1 << (SQLSelectParser.VARCHAR2_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NATIONAL_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NVARCHAR_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NVARCHAR2_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NCHAR_SYMBOL - 294)) |
									(1 << (SQLSelectParser.VARBINARY_SYMBOL - 294)) |
									(1 << (SQLSelectParser.TINYBLOB_SYMBOL - 294)) |
									(1 << (SQLSelectParser.BLOB_SYMBOL - 294)) |
									(1 << (SQLSelectParser.CLOB_SYMBOL - 294)) |
									(1 << (SQLSelectParser.BFILE_SYMBOL - 294)) |
									(1 << (SQLSelectParser.RAW_SYMBOL - 294)) |
									(1 << (SQLSelectParser.MEDIUMBLOB_SYMBOL - 294)) |
									(1 << (SQLSelectParser.LONGBLOB_SYMBOL - 294)) |
									(1 << (SQLSelectParser.LONG_SYMBOL - 294)) |
									(1 << (SQLSelectParser.TINYTEXT_SYMBOL - 294)) |
									(1 << (SQLSelectParser.TEXT_SYMBOL - 294)) |
									(1 << (SQLSelectParser.MEDIUMTEXT_SYMBOL - 294)))) !==
								0) ||
						(((_la - 326) & ~0x1f) == 0 &&
							((1 << (_la - 326)) &
								((1 << (SQLSelectParser.LONGTEXT_SYMBOL - 326)) |
									(1 << (SQLSelectParser.ENUM_SYMBOL - 326)) |
									(1 << (SQLSelectParser.SERIAL_SYMBOL - 326)) |
									(1 << (SQLSelectParser.GEOMETRY_SYMBOL - 326)) |
									(1 << (SQLSelectParser.ZEROFILL_SYMBOL - 326)) |
									(1 << (SQLSelectParser.BYTE_SYMBOL - 326)) |
									(1 << (SQLSelectParser.UNICODE_SYMBOL - 326)) |
									(1 << (SQLSelectParser.TERMINATED_SYMBOL - 326)) |
									(1 << (SQLSelectParser.OPTIONALLY_SYMBOL - 326)) |
									(1 << (SQLSelectParser.ENCLOSED_SYMBOL - 326)) |
									(1 << (SQLSelectParser.ESCAPED_SYMBOL - 326)) |
									(1 << (SQLSelectParser.LINES_SYMBOL - 326)) |
									(1 << (SQLSelectParser.STARTING_SYMBOL - 326)) |
									(1 << (SQLSelectParser.GLOBAL_SYMBOL - 326)) |
									(1 << (SQLSelectParser.LOCAL_SYMBOL - 326)) |
									(1 << (SQLSelectParser.SESSION_SYMBOL - 326)) |
									(1 << (SQLSelectParser.VARIANT_SYMBOL - 326)) |
									(1 << (SQLSelectParser.OBJECT_SYMBOL - 326)) |
									(1 << (SQLSelectParser.GEOGRAPHY_SYMBOL - 326)) |
									(1 << (SQLSelectParser.UNDERSCORE_CHARSET - 326)) |
									(1 << (SQLSelectParser.IDENTIFIER - 326)) |
									(1 << (SQLSelectParser.NCHAR_TEXT - 326)) |
									(1 << (SQLSelectParser.BACK_TICK_QUOTED_ID - 326)) |
									(1 << (SQLSelectParser.DOUBLE_QUOTED_TEXT - 326)) |
									(1 << (SQLSelectParser.SINGLE_QUOTED_TEXT - 326)) |
									(1 << (SQLSelectParser.BRACKET_QUOTED_TEXT - 326)) |
									(1 << (SQLSelectParser.CURLY_BRACES_QUOTED_TEXT - 326)))) !==
								0)
					) {
						this.state = 1823;
						this.exprList();
					}

					this.state = 1826;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.LINESTRING_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 1827;
					this.match(SQLSelectParser.LINESTRING_SYMBOL);
					this.state = 1828;
					this.exprListWithParentheses();
					break;
				case SQLSelectParser.MULTILINESTRING_SYMBOL:
					this.enterOuterAlt(localctx, 4);
					this.state = 1829;
					this.match(SQLSelectParser.MULTILINESTRING_SYMBOL);
					this.state = 1830;
					this.exprListWithParentheses();
					break;
				case SQLSelectParser.MULTIPOINT_SYMBOL:
					this.enterOuterAlt(localctx, 5);
					this.state = 1831;
					this.match(SQLSelectParser.MULTIPOINT_SYMBOL);
					this.state = 1832;
					this.exprListWithParentheses();
					break;
				case SQLSelectParser.MULTIPOLYGON_SYMBOL:
					this.enterOuterAlt(localctx, 6);
					this.state = 1833;
					this.match(SQLSelectParser.MULTIPOLYGON_SYMBOL);
					this.state = 1834;
					this.exprListWithParentheses();
					break;
				case SQLSelectParser.POINT_SYMBOL:
					this.enterOuterAlt(localctx, 7);
					this.state = 1835;
					this.match(SQLSelectParser.POINT_SYMBOL);
					this.state = 1836;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1837;
					this.expr(0);
					this.state = 1838;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1839;
					this.expr(0);
					this.state = 1840;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
				case SQLSelectParser.POLYGON_SYMBOL:
					this.enterOuterAlt(localctx, 8);
					this.state = 1842;
					this.match(SQLSelectParser.POLYGON_SYMBOL);
					this.state = 1843;
					this.exprListWithParentheses();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	timeFunctionParameters() {
		let localctx = new TimeFunctionParametersContext(this, this._ctx, this.state);
		this.enterRule(localctx, 194, SQLSelectParser.RULE_timeFunctionParameters);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1846;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 1848;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.INT_NUMBER) {
				this.state = 1847;
				this.fractionalPrecision();
			}

			this.state = 1850;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	fractionalPrecision() {
		let localctx = new FractionalPrecisionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 196, SQLSelectParser.RULE_fractionalPrecision);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1852;
			this.match(SQLSelectParser.INT_NUMBER);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	weightStringLevels() {
		let localctx = new WeightStringLevelsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 198, SQLSelectParser.RULE_weightStringLevels);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1854;
			this.match(SQLSelectParser.LEVEL_SYMBOL);
			this.state = 1867;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 217, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1855;
					this.real_ulong_number();
					this.state = 1856;
					this.match(SQLSelectParser.MINUS_OPERATOR);
					this.state = 1857;
					this.real_ulong_number();
					break;

				case 2:
					this.state = 1859;
					this.weightStringLevelListItem();
					this.state = 1864;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === SQLSelectParser.COMMA_SYMBOL) {
						this.state = 1860;
						this.match(SQLSelectParser.COMMA_SYMBOL);
						this.state = 1861;
						this.weightStringLevelListItem();
						this.state = 1866;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	weightStringLevelListItem() {
		let localctx = new WeightStringLevelListItemContext(this, this._ctx, this.state);
		this.enterRule(localctx, 200, SQLSelectParser.RULE_weightStringLevelListItem);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1869;
			this.real_ulong_number();
			this.state = 1875;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.ASC_SYMBOL:
				case SQLSelectParser.DESC_SYMBOL:
					this.state = 1870;
					_la = this._input.LA(1);
					if (!(_la === SQLSelectParser.ASC_SYMBOL || _la === SQLSelectParser.DESC_SYMBOL)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 1872;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.REVERSE_SYMBOL) {
						this.state = 1871;
						this.match(SQLSelectParser.REVERSE_SYMBOL);
					}

					break;
				case SQLSelectParser.REVERSE_SYMBOL:
					this.state = 1874;
					this.match(SQLSelectParser.REVERSE_SYMBOL);
					break;
				case SQLSelectParser.COMMA_SYMBOL:
				case SQLSelectParser.CLOSE_PAR_SYMBOL:
					break;
				default:
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	dateTimeTtype() {
		let localctx = new DateTimeTtypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 202, SQLSelectParser.RULE_dateTimeTtype);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1877;
			_la = this._input.LA(1);
			if (
				!(
					(((_la - 218) & ~0x1f) == 0 &&
						((1 << (_la - 218)) &
							((1 << (SQLSelectParser.DATE_SYMBOL - 218)) |
								(1 << (SQLSelectParser.TIME_SYMBOL - 218)) |
								(1 << (SQLSelectParser.TIMESTAMP_SYMBOL - 218)))) !==
							0) ||
					_la === SQLSelectParser.DATETIME_SYMBOL
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	trimFunction() {
		let localctx = new TrimFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 204, SQLSelectParser.RULE_trimFunction);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1879;
			this.match(SQLSelectParser.TRIM_SYMBOL);
			this.state = 1880;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 1904;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 224, this._ctx);
			switch (la_) {
				case 1:
					this.state = 1881;
					this.expr(0);
					this.state = 1884;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.FROM_SYMBOL) {
						this.state = 1882;
						this.match(SQLSelectParser.FROM_SYMBOL);
						this.state = 1883;
						this.expr(0);
					}

					break;

				case 2:
					this.state = 1886;
					this.match(SQLSelectParser.LEADING_SYMBOL);
					this.state = 1888;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 221, this._ctx);
					if (la_ === 1) {
						this.state = 1887;
						this.expr(0);
					}
					this.state = 1890;
					this.match(SQLSelectParser.FROM_SYMBOL);
					this.state = 1891;
					this.expr(0);
					break;

				case 3:
					this.state = 1892;
					this.match(SQLSelectParser.TRAILING_SYMBOL);
					this.state = 1894;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 222, this._ctx);
					if (la_ === 1) {
						this.state = 1893;
						this.expr(0);
					}
					this.state = 1896;
					this.match(SQLSelectParser.FROM_SYMBOL);
					this.state = 1897;
					this.expr(0);
					break;

				case 4:
					this.state = 1898;
					this.match(SQLSelectParser.BOTH_SYMBOL);
					this.state = 1900;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 223, this._ctx);
					if (la_ === 1) {
						this.state = 1899;
						this.expr(0);
					}
					this.state = 1902;
					this.match(SQLSelectParser.FROM_SYMBOL);
					this.state = 1903;
					this.expr(0);
					break;
			}
			this.state = 1906;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	substringFunction() {
		let localctx = new SubstringFunctionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 206, SQLSelectParser.RULE_substringFunction);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1908;
			this.match(SQLSelectParser.SUBSTRING_SYMBOL);
			this.state = 1909;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 1910;
			this.expr(0);
			this.state = 1923;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.COMMA_SYMBOL:
					this.state = 1911;
					this.match(SQLSelectParser.COMMA_SYMBOL);
					this.state = 1912;
					this.expr(0);
					this.state = 1915;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.COMMA_SYMBOL) {
						this.state = 1913;
						this.match(SQLSelectParser.COMMA_SYMBOL);
						this.state = 1914;
						this.expr(0);
					}

					break;
				case SQLSelectParser.FROM_SYMBOL:
					this.state = 1917;
					this.match(SQLSelectParser.FROM_SYMBOL);
					this.state = 1918;
					this.expr(0);
					this.state = 1921;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.FOR_SYMBOL) {
						this.state = 1919;
						this.match(SQLSelectParser.FOR_SYMBOL);
						this.state = 1920;
						this.expr(0);
					}

					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 1925;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	functionCall() {
		let localctx = new FunctionCallContext(this, this._ctx, this.state);
		this.enterRule(localctx, 208, SQLSelectParser.RULE_functionCall);
		var _la = 0; // Token type
		try {
			this.state = 1946;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 232, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 1927;
					this.pureIdentifier();
					this.state = 1928;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1930;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (
						((_la & ~0x1f) == 0 &&
							((1 << _la) &
								((1 << SQLSelectParser.PLUS_OPERATOR) |
									(1 << SQLSelectParser.MINUS_OPERATOR) |
									(1 << SQLSelectParser.LOGICAL_NOT_OPERATOR) |
									(1 << SQLSelectParser.BITWISE_NOT_OPERATOR) |
									(1 << SQLSelectParser.OPEN_PAR_SYMBOL) |
									(1 << SQLSelectParser.OPEN_CURLY_SYMBOL))) !==
								0) ||
						(((_la - 38) & ~0x1f) == 0 &&
							((1 << (_la - 38)) &
								((1 << (SQLSelectParser.AT_SIGN_SYMBOL - 38)) |
									(1 << (SQLSelectParser.AT_TEXT_SUFFIX - 38)) |
									(1 << (SQLSelectParser.AT_AT_SIGN_SYMBOL - 38)) |
									(1 << (SQLSelectParser.NULL2_SYMBOL - 38)) |
									(1 << (SQLSelectParser.PARAM_MARKER - 38)) |
									(1 << (SQLSelectParser.HEX_NUMBER - 38)) |
									(1 << (SQLSelectParser.BIN_NUMBER - 38)) |
									(1 << (SQLSelectParser.INT_NUMBER - 38)) |
									(1 << (SQLSelectParser.DECIMAL_NUMBER - 38)) |
									(1 << (SQLSelectParser.FLOAT_NUMBER - 38)) |
									(1 << (SQLSelectParser.TINYINT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.SMALLINT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.MEDIUMINT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.BYTE_INT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.INT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.BIGINT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.SECOND_SYMBOL - 38)) |
									(1 << (SQLSelectParser.MINUTE_SYMBOL - 38)) |
									(1 << (SQLSelectParser.HOUR_SYMBOL - 38)) |
									(1 << (SQLSelectParser.DAY_SYMBOL - 38)) |
									(1 << (SQLSelectParser.WEEK_SYMBOL - 38)) |
									(1 << (SQLSelectParser.MONTH_SYMBOL - 38)) |
									(1 << (SQLSelectParser.QUARTER_SYMBOL - 38)) |
									(1 << (SQLSelectParser.YEAR_SYMBOL - 38)) |
									(1 << (SQLSelectParser.DEFAULT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.UNION_SYMBOL - 38)) |
									(1 << (SQLSelectParser.SELECT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.ALL_SYMBOL - 38)) |
									(1 << (SQLSelectParser.DISTINCT_SYMBOL - 38)) |
									(1 << (SQLSelectParser.STRAIGHT_JOIN_SYMBOL - 38)) |
									(1 << (SQLSelectParser.HIGH_PRIORITY_SYMBOL - 38)))) !==
								0) ||
						(((_la - 70) & ~0x1f) == 0 &&
							((1 << (_la - 70)) &
								((1 << (SQLSelectParser.SQL_SMALL_RESULT_SYMBOL - 70)) |
									(1 << (SQLSelectParser.SQL_BIG_RESULT_SYMBOL - 70)) |
									(1 << (SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL - 70)) |
									(1 << (SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL - 70)) |
									(1 << (SQLSelectParser.LIMIT_SYMBOL - 70)) |
									(1 << (SQLSelectParser.OFFSET_SYMBOL - 70)) |
									(1 << (SQLSelectParser.INTO_SYMBOL - 70)) |
									(1 << (SQLSelectParser.OUTFILE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.DUMPFILE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.PROCEDURE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.ANALYSE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.HAVING_SYMBOL - 70)) |
									(1 << (SQLSelectParser.WINDOW_SYMBOL - 70)) |
									(1 << (SQLSelectParser.AS_SYMBOL - 70)) |
									(1 << (SQLSelectParser.PARTITION_SYMBOL - 70)) |
									(1 << (SQLSelectParser.BY_SYMBOL - 70)) |
									(1 << (SQLSelectParser.ROWS_SYMBOL - 70)) |
									(1 << (SQLSelectParser.RANGE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.GROUPS_SYMBOL - 70)) |
									(1 << (SQLSelectParser.UNBOUNDED_SYMBOL - 70)) |
									(1 << (SQLSelectParser.PRECEDING_SYMBOL - 70)) |
									(1 << (SQLSelectParser.INTERVAL_SYMBOL - 70)) |
									(1 << (SQLSelectParser.CURRENT_SYMBOL - 70)) |
									(1 << (SQLSelectParser.ROW_SYMBOL - 70)) |
									(1 << (SQLSelectParser.BETWEEN_SYMBOL - 70)) |
									(1 << (SQLSelectParser.AND_SYMBOL - 70)) |
									(1 << (SQLSelectParser.FOLLOWING_SYMBOL - 70)) |
									(1 << (SQLSelectParser.EXCLUDE_SYMBOL - 70)) |
									(1 << (SQLSelectParser.GROUP_SYMBOL - 70)) |
									(1 << (SQLSelectParser.TIES_SYMBOL - 70)) |
									(1 << (SQLSelectParser.NO_SYMBOL - 70)) |
									(1 << (SQLSelectParser.OTHERS_SYMBOL - 70)))) !==
								0) ||
						(((_la - 102) & ~0x1f) == 0 &&
							((1 << (_la - 102)) &
								((1 << (SQLSelectParser.WITH_SYMBOL - 102)) |
									(1 << (SQLSelectParser.WITHOUT_SYMBOL - 102)) |
									(1 << (SQLSelectParser.RECURSIVE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.ROLLUP_SYMBOL - 102)) |
									(1 << (SQLSelectParser.CUBE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.ORDER_SYMBOL - 102)) |
									(1 << (SQLSelectParser.ASC_SYMBOL - 102)) |
									(1 << (SQLSelectParser.DESC_SYMBOL - 102)) |
									(1 << (SQLSelectParser.FROM_SYMBOL - 102)) |
									(1 << (SQLSelectParser.DUAL_SYMBOL - 102)) |
									(1 << (SQLSelectParser.VALUES_SYMBOL - 102)) |
									(1 << (SQLSelectParser.TABLE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.SQL_NO_CACHE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.SQL_CACHE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL - 102)) |
									(1 << (SQLSelectParser.FOR_SYMBOL - 102)) |
									(1 << (SQLSelectParser.OF_SYMBOL - 102)) |
									(1 << (SQLSelectParser.LOCK_SYMBOL - 102)) |
									(1 << (SQLSelectParser.IN_SYMBOL - 102)) |
									(1 << (SQLSelectParser.SHARE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.MODE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.UPDATE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.SKIP_SYMBOL - 102)) |
									(1 << (SQLSelectParser.LOCKED_SYMBOL - 102)) |
									(1 << (SQLSelectParser.NOWAIT_SYMBOL - 102)) |
									(1 << (SQLSelectParser.WHERE_SYMBOL - 102)) |
									(1 << (SQLSelectParser.OJ_SYMBOL - 102)) |
									(1 << (SQLSelectParser.ON_SYMBOL - 102)) |
									(1 << (SQLSelectParser.USING_SYMBOL - 102)) |
									(1 << (SQLSelectParser.NATURAL_SYMBOL - 102)) |
									(1 << (SQLSelectParser.INNER_SYMBOL - 102)))) !==
								0) ||
						(((_la - 134) & ~0x1f) == 0 &&
							((1 << (_la - 134)) &
								((1 << (SQLSelectParser.JOIN_SYMBOL - 134)) |
									(1 << (SQLSelectParser.LEFT_SYMBOL - 134)) |
									(1 << (SQLSelectParser.RIGHT_SYMBOL - 134)) |
									(1 << (SQLSelectParser.OUTER_SYMBOL - 134)) |
									(1 << (SQLSelectParser.CROSS_SYMBOL - 134)) |
									(1 << (SQLSelectParser.LATERAL_SYMBOL - 134)) |
									(1 << (SQLSelectParser.JSON_TABLE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.COLUMNS_SYMBOL - 134)) |
									(1 << (SQLSelectParser.ORDINALITY_SYMBOL - 134)) |
									(1 << (SQLSelectParser.EXISTS_SYMBOL - 134)) |
									(1 << (SQLSelectParser.PATH_SYMBOL - 134)) |
									(1 << (SQLSelectParser.NESTED_SYMBOL - 134)) |
									(1 << (SQLSelectParser.EMPTY_SYMBOL - 134)) |
									(1 << (SQLSelectParser.ERROR_SYMBOL - 134)) |
									(1 << (SQLSelectParser.NULL_SYMBOL - 134)) |
									(1 << (SQLSelectParser.USE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.FORCE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.IGNORE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.KEY_SYMBOL - 134)) |
									(1 << (SQLSelectParser.INDEX_SYMBOL - 134)) |
									(1 << (SQLSelectParser.PRIMARY_SYMBOL - 134)) |
									(1 << (SQLSelectParser.IS_SYMBOL - 134)) |
									(1 << (SQLSelectParser.TRUE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.FALSE_SYMBOL - 134)) |
									(1 << (SQLSelectParser.UNKNOWN_SYMBOL - 134)) |
									(1 << (SQLSelectParser.NOT_SYMBOL - 134)) |
									(1 << (SQLSelectParser.XOR_SYMBOL - 134)) |
									(1 << (SQLSelectParser.OR_SYMBOL - 134)) |
									(1 << (SQLSelectParser.ANY_SYMBOL - 134)) |
									(1 << (SQLSelectParser.MEMBER_SYMBOL - 134)) |
									(1 << (SQLSelectParser.SOUNDS_SYMBOL - 134)) |
									(1 << (SQLSelectParser.LIKE_SYMBOL - 134)))) !==
								0) ||
						(((_la - 166) & ~0x1f) == 0 &&
							((1 << (_la - 166)) &
								((1 << (SQLSelectParser.ESCAPE_SYMBOL - 166)) |
									(1 << (SQLSelectParser.REGEXP_SYMBOL - 166)) |
									(1 << (SQLSelectParser.DIV_SYMBOL - 166)) |
									(1 << (SQLSelectParser.MOD_SYMBOL - 166)) |
									(1 << (SQLSelectParser.MATCH_SYMBOL - 166)) |
									(1 << (SQLSelectParser.AGAINST_SYMBOL - 166)) |
									(1 << (SQLSelectParser.BINARY_SYMBOL - 166)) |
									(1 << (SQLSelectParser.CAST_SYMBOL - 166)) |
									(1 << (SQLSelectParser.ARRAY_SYMBOL - 166)) |
									(1 << (SQLSelectParser.CASE_SYMBOL - 166)) |
									(1 << (SQLSelectParser.END_SYMBOL - 166)) |
									(1 << (SQLSelectParser.CONVERT_SYMBOL - 166)) |
									(1 << (SQLSelectParser.COLLATE_SYMBOL - 166)) |
									(1 << (SQLSelectParser.AVG_SYMBOL - 166)) |
									(1 << (SQLSelectParser.BIT_AND_SYMBOL - 166)) |
									(1 << (SQLSelectParser.BIT_OR_SYMBOL - 166)) |
									(1 << (SQLSelectParser.BIT_XOR_SYMBOL - 166)) |
									(1 << (SQLSelectParser.COUNT_SYMBOL - 166)) |
									(1 << (SQLSelectParser.MIN_SYMBOL - 166)) |
									(1 << (SQLSelectParser.MAX_SYMBOL - 166)) |
									(1 << (SQLSelectParser.STD_SYMBOL - 166)) |
									(1 << (SQLSelectParser.VARIANCE_SYMBOL - 166)) |
									(1 << (SQLSelectParser.STDDEV_SAMP_SYMBOL - 166)) |
									(1 << (SQLSelectParser.VAR_SAMP_SYMBOL - 166)) |
									(1 << (SQLSelectParser.SUM_SYMBOL - 166)) |
									(1 << (SQLSelectParser.GROUP_CONCAT_SYMBOL - 166)) |
									(1 << (SQLSelectParser.SEPARATOR_SYMBOL - 166)) |
									(1 << (SQLSelectParser.GROUPING_SYMBOL - 166)) |
									(1 << (SQLSelectParser.ROW_NUMBER_SYMBOL - 166)) |
									(1 << (SQLSelectParser.RANK_SYMBOL - 166)) |
									(1 << (SQLSelectParser.DENSE_RANK_SYMBOL - 166)) |
									(1 << (SQLSelectParser.CUME_DIST_SYMBOL - 166)))) !==
								0) ||
						(((_la - 198) & ~0x1f) == 0 &&
							((1 << (_la - 198)) &
								((1 << (SQLSelectParser.PERCENT_RANK_SYMBOL - 198)) |
									(1 << (SQLSelectParser.NTILE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.LEAD_SYMBOL - 198)) |
									(1 << (SQLSelectParser.LAG_SYMBOL - 198)) |
									(1 << (SQLSelectParser.FIRST_VALUE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.LAST_VALUE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.NTH_VALUE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.FIRST_SYMBOL - 198)) |
									(1 << (SQLSelectParser.LAST_SYMBOL - 198)) |
									(1 << (SQLSelectParser.OVER_SYMBOL - 198)) |
									(1 << (SQLSelectParser.RESPECT_SYMBOL - 198)) |
									(1 << (SQLSelectParser.NULLS_SYMBOL - 198)) |
									(1 << (SQLSelectParser.JSON_ARRAYAGG_SYMBOL - 198)) |
									(1 << (SQLSelectParser.JSON_OBJECTAGG_SYMBOL - 198)) |
									(1 << (SQLSelectParser.BOOLEAN_SYMBOL - 198)) |
									(1 << (SQLSelectParser.LANGUAGE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.QUERY_SYMBOL - 198)) |
									(1 << (SQLSelectParser.EXPANSION_SYMBOL - 198)) |
									(1 << (SQLSelectParser.CHAR_SYMBOL - 198)) |
									(1 << (SQLSelectParser.CURRENT_USER_SYMBOL - 198)) |
									(1 << (SQLSelectParser.DATE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.INSERT_SYMBOL - 198)) |
									(1 << (SQLSelectParser.TIME_SYMBOL - 198)) |
									(1 << (SQLSelectParser.TIMESTAMP_SYMBOL - 198)) |
									(1 << (SQLSelectParser.TIMESTAMP_LTZ_SYMBOL - 198)) |
									(1 << (SQLSelectParser.TIMESTAMP_NTZ_SYMBOL - 198)) |
									(1 << (SQLSelectParser.ZONE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.USER_SYMBOL - 198)) |
									(1 << (SQLSelectParser.ADDDATE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.SUBDATE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.CURDATE_SYMBOL - 198)) |
									(1 << (SQLSelectParser.CURTIME_SYMBOL - 198)))) !==
								0) ||
						(((_la - 230) & ~0x1f) == 0 &&
							((1 << (_la - 230)) &
								((1 << (SQLSelectParser.DATE_ADD_SYMBOL - 230)) |
									(1 << (SQLSelectParser.DATE_SUB_SYMBOL - 230)) |
									(1 << (SQLSelectParser.EXTRACT_SYMBOL - 230)) |
									(1 << (SQLSelectParser.GET_FORMAT_SYMBOL - 230)) |
									(1 << (SQLSelectParser.NOW_SYMBOL - 230)) |
									(1 << (SQLSelectParser.POSITION_SYMBOL - 230)) |
									(1 << (SQLSelectParser.SYSDATE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.TIMESTAMP_ADD_SYMBOL - 230)) |
									(1 << (SQLSelectParser.TIMESTAMP_DIFF_SYMBOL - 230)) |
									(1 << (SQLSelectParser.UTC_DATE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.UTC_TIME_SYMBOL - 230)) |
									(1 << (SQLSelectParser.UTC_TIMESTAMP_SYMBOL - 230)) |
									(1 << (SQLSelectParser.ASCII_SYMBOL - 230)) |
									(1 << (SQLSelectParser.CHARSET_SYMBOL - 230)) |
									(1 << (SQLSelectParser.COALESCE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.COLLATION_SYMBOL - 230)) |
									(1 << (SQLSelectParser.DATABASE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.IF_SYMBOL - 230)) |
									(1 << (SQLSelectParser.FORMAT_SYMBOL - 230)) |
									(1 << (SQLSelectParser.MICROSECOND_SYMBOL - 230)) |
									(1 << (SQLSelectParser.OLD_PASSWORD_SYMBOL - 230)) |
									(1 << (SQLSelectParser.PASSWORD_SYMBOL - 230)) |
									(1 << (SQLSelectParser.REPEAT_SYMBOL - 230)) |
									(1 << (SQLSelectParser.REPLACE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.REVERSE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.ROW_COUNT_SYMBOL - 230)) |
									(1 << (SQLSelectParser.TRUNCATE_SYMBOL - 230)) |
									(1 << (SQLSelectParser.WEIGHT_STRING_SYMBOL - 230)) |
									(1 << (SQLSelectParser.CONTAINS_SYMBOL - 230)) |
									(1 << (SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL - 230)) |
									(1 << (SQLSelectParser.LINESTRING_SYMBOL - 230)) |
									(1 << (SQLSelectParser.MULTILINESTRING_SYMBOL - 230)))) !==
								0) ||
						(((_la - 262) & ~0x1f) == 0 &&
							((1 << (_la - 262)) &
								((1 << (SQLSelectParser.MULTIPOINT_SYMBOL - 262)) |
									(1 << (SQLSelectParser.MULTIPOLYGON_SYMBOL - 262)) |
									(1 << (SQLSelectParser.POINT_SYMBOL - 262)) |
									(1 << (SQLSelectParser.POLYGON_SYMBOL - 262)) |
									(1 << (SQLSelectParser.LEVEL_SYMBOL - 262)) |
									(1 << (SQLSelectParser.DATETIME_SYMBOL - 262)) |
									(1 << (SQLSelectParser.TRIM_SYMBOL - 262)) |
									(1 << (SQLSelectParser.LEADING_SYMBOL - 262)) |
									(1 << (SQLSelectParser.TRAILING_SYMBOL - 262)) |
									(1 << (SQLSelectParser.BOTH_SYMBOL - 262)) |
									(1 << (SQLSelectParser.STRING_SYMBOL - 262)) |
									(1 << (SQLSelectParser.SUBSTRING_SYMBOL - 262)) |
									(1 << (SQLSelectParser.WHEN_SYMBOL - 262)) |
									(1 << (SQLSelectParser.THEN_SYMBOL - 262)) |
									(1 << (SQLSelectParser.ELSE_SYMBOL - 262)) |
									(1 << (SQLSelectParser.SIGNED_SYMBOL - 262)) |
									(1 << (SQLSelectParser.UNSIGNED_SYMBOL - 262)) |
									(1 << (SQLSelectParser.DECIMAL_SYMBOL - 262)) |
									(1 << (SQLSelectParser.JSON_SYMBOL - 262)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL - 262)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL_4 - 262)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL_8 - 262)) |
									(1 << (SQLSelectParser.SET_SYMBOL - 262)) |
									(1 << (SQLSelectParser.SECOND_MICROSECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.MINUTE_MICROSECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.MINUTE_SECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.HOUR_MICROSECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.HOUR_SECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.HOUR_MINUTE_SYMBOL - 262)) |
									(1 << (SQLSelectParser.DAY_MICROSECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.DAY_SECOND_SYMBOL - 262)) |
									(1 << (SQLSelectParser.DAY_MINUTE_SYMBOL - 262)))) !==
								0) ||
						(((_la - 294) & ~0x1f) == 0 &&
							((1 << (_la - 294)) &
								((1 << (SQLSelectParser.DAY_HOUR_SYMBOL - 294)) |
									(1 << (SQLSelectParser.YEAR_MONTH_SYMBOL - 294)) |
									(1 << (SQLSelectParser.BTREE_SYMBOL - 294)) |
									(1 << (SQLSelectParser.RTREE_SYMBOL - 294)) |
									(1 << (SQLSelectParser.HASH_SYMBOL - 294)) |
									(1 << (SQLSelectParser.REAL_SYMBOL - 294)) |
									(1 << (SQLSelectParser.DOUBLE_SYMBOL - 294)) |
									(1 << (SQLSelectParser.PRECISION_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NUMERIC_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NUMBER_SYMBOL - 294)) |
									(1 << (SQLSelectParser.FIXED_SYMBOL - 294)) |
									(1 << (SQLSelectParser.BIT_SYMBOL - 294)) |
									(1 << (SQLSelectParser.BOOL_SYMBOL - 294)) |
									(1 << (SQLSelectParser.VARYING_SYMBOL - 294)) |
									(1 << (SQLSelectParser.VARCHAR_SYMBOL - 294)) |
									(1 << (SQLSelectParser.VARCHAR2_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NATIONAL_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NVARCHAR_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NVARCHAR2_SYMBOL - 294)) |
									(1 << (SQLSelectParser.NCHAR_SYMBOL - 294)) |
									(1 << (SQLSelectParser.VARBINARY_SYMBOL - 294)) |
									(1 << (SQLSelectParser.TINYBLOB_SYMBOL - 294)) |
									(1 << (SQLSelectParser.BLOB_SYMBOL - 294)) |
									(1 << (SQLSelectParser.CLOB_SYMBOL - 294)) |
									(1 << (SQLSelectParser.BFILE_SYMBOL - 294)) |
									(1 << (SQLSelectParser.RAW_SYMBOL - 294)) |
									(1 << (SQLSelectParser.MEDIUMBLOB_SYMBOL - 294)) |
									(1 << (SQLSelectParser.LONGBLOB_SYMBOL - 294)) |
									(1 << (SQLSelectParser.LONG_SYMBOL - 294)) |
									(1 << (SQLSelectParser.TINYTEXT_SYMBOL - 294)) |
									(1 << (SQLSelectParser.TEXT_SYMBOL - 294)) |
									(1 << (SQLSelectParser.MEDIUMTEXT_SYMBOL - 294)))) !==
								0) ||
						(((_la - 326) & ~0x1f) == 0 &&
							((1 << (_la - 326)) &
								((1 << (SQLSelectParser.LONGTEXT_SYMBOL - 326)) |
									(1 << (SQLSelectParser.ENUM_SYMBOL - 326)) |
									(1 << (SQLSelectParser.SERIAL_SYMBOL - 326)) |
									(1 << (SQLSelectParser.GEOMETRY_SYMBOL - 326)) |
									(1 << (SQLSelectParser.ZEROFILL_SYMBOL - 326)) |
									(1 << (SQLSelectParser.BYTE_SYMBOL - 326)) |
									(1 << (SQLSelectParser.UNICODE_SYMBOL - 326)) |
									(1 << (SQLSelectParser.TERMINATED_SYMBOL - 326)) |
									(1 << (SQLSelectParser.OPTIONALLY_SYMBOL - 326)) |
									(1 << (SQLSelectParser.ENCLOSED_SYMBOL - 326)) |
									(1 << (SQLSelectParser.ESCAPED_SYMBOL - 326)) |
									(1 << (SQLSelectParser.LINES_SYMBOL - 326)) |
									(1 << (SQLSelectParser.STARTING_SYMBOL - 326)) |
									(1 << (SQLSelectParser.GLOBAL_SYMBOL - 326)) |
									(1 << (SQLSelectParser.LOCAL_SYMBOL - 326)) |
									(1 << (SQLSelectParser.SESSION_SYMBOL - 326)) |
									(1 << (SQLSelectParser.VARIANT_SYMBOL - 326)) |
									(1 << (SQLSelectParser.OBJECT_SYMBOL - 326)) |
									(1 << (SQLSelectParser.GEOGRAPHY_SYMBOL - 326)) |
									(1 << (SQLSelectParser.UNDERSCORE_CHARSET - 326)) |
									(1 << (SQLSelectParser.IDENTIFIER - 326)) |
									(1 << (SQLSelectParser.NCHAR_TEXT - 326)) |
									(1 << (SQLSelectParser.BACK_TICK_QUOTED_ID - 326)) |
									(1 << (SQLSelectParser.DOUBLE_QUOTED_TEXT - 326)) |
									(1 << (SQLSelectParser.SINGLE_QUOTED_TEXT - 326)) |
									(1 << (SQLSelectParser.BRACKET_QUOTED_TEXT - 326)) |
									(1 << (SQLSelectParser.CURLY_BRACES_QUOTED_TEXT - 326)))) !==
								0)
					) {
						this.state = 1929;
						this.udfExprList();
					}

					this.state = 1932;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 1934;
					this.qualifiedIdentifier();
					this.state = 1935;
					this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
					this.state = 1942;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 231, this._ctx);
					switch (la_) {
						case 1:
							this.state = 1937;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (
								((_la & ~0x1f) == 0 &&
									((1 << _la) &
										((1 << SQLSelectParser.PLUS_OPERATOR) |
											(1 << SQLSelectParser.MINUS_OPERATOR) |
											(1 << SQLSelectParser.LOGICAL_NOT_OPERATOR) |
											(1 << SQLSelectParser.BITWISE_NOT_OPERATOR) |
											(1 << SQLSelectParser.OPEN_PAR_SYMBOL) |
											(1 << SQLSelectParser.OPEN_CURLY_SYMBOL))) !==
										0) ||
								(((_la - 38) & ~0x1f) == 0 &&
									((1 << (_la - 38)) &
										((1 << (SQLSelectParser.AT_SIGN_SYMBOL - 38)) |
											(1 << (SQLSelectParser.AT_TEXT_SUFFIX - 38)) |
											(1 << (SQLSelectParser.AT_AT_SIGN_SYMBOL - 38)) |
											(1 << (SQLSelectParser.NULL2_SYMBOL - 38)) |
											(1 << (SQLSelectParser.PARAM_MARKER - 38)) |
											(1 << (SQLSelectParser.HEX_NUMBER - 38)) |
											(1 << (SQLSelectParser.BIN_NUMBER - 38)) |
											(1 << (SQLSelectParser.INT_NUMBER - 38)) |
											(1 << (SQLSelectParser.DECIMAL_NUMBER - 38)) |
											(1 << (SQLSelectParser.FLOAT_NUMBER - 38)) |
											(1 << (SQLSelectParser.TINYINT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.SMALLINT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.MEDIUMINT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.BYTE_INT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.INT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.BIGINT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.SECOND_SYMBOL - 38)) |
											(1 << (SQLSelectParser.MINUTE_SYMBOL - 38)) |
											(1 << (SQLSelectParser.HOUR_SYMBOL - 38)) |
											(1 << (SQLSelectParser.DAY_SYMBOL - 38)) |
											(1 << (SQLSelectParser.WEEK_SYMBOL - 38)) |
											(1 << (SQLSelectParser.MONTH_SYMBOL - 38)) |
											(1 << (SQLSelectParser.QUARTER_SYMBOL - 38)) |
											(1 << (SQLSelectParser.YEAR_SYMBOL - 38)) |
											(1 << (SQLSelectParser.DEFAULT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.UNION_SYMBOL - 38)) |
											(1 << (SQLSelectParser.SELECT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.ALL_SYMBOL - 38)) |
											(1 << (SQLSelectParser.DISTINCT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.STRAIGHT_JOIN_SYMBOL - 38)) |
											(1 << (SQLSelectParser.HIGH_PRIORITY_SYMBOL - 38)))) !==
										0) ||
								(((_la - 70) & ~0x1f) == 0 &&
									((1 << (_la - 70)) &
										((1 << (SQLSelectParser.SQL_SMALL_RESULT_SYMBOL - 70)) |
											(1 << (SQLSelectParser.SQL_BIG_RESULT_SYMBOL - 70)) |
											(1 << (SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL - 70)) |
											(1 << (SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL - 70)) |
											(1 << (SQLSelectParser.LIMIT_SYMBOL - 70)) |
											(1 << (SQLSelectParser.OFFSET_SYMBOL - 70)) |
											(1 << (SQLSelectParser.INTO_SYMBOL - 70)) |
											(1 << (SQLSelectParser.OUTFILE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.DUMPFILE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.PROCEDURE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.ANALYSE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.HAVING_SYMBOL - 70)) |
											(1 << (SQLSelectParser.WINDOW_SYMBOL - 70)) |
											(1 << (SQLSelectParser.AS_SYMBOL - 70)) |
											(1 << (SQLSelectParser.PARTITION_SYMBOL - 70)) |
											(1 << (SQLSelectParser.BY_SYMBOL - 70)) |
											(1 << (SQLSelectParser.ROWS_SYMBOL - 70)) |
											(1 << (SQLSelectParser.RANGE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.GROUPS_SYMBOL - 70)) |
											(1 << (SQLSelectParser.UNBOUNDED_SYMBOL - 70)) |
											(1 << (SQLSelectParser.PRECEDING_SYMBOL - 70)) |
											(1 << (SQLSelectParser.INTERVAL_SYMBOL - 70)) |
											(1 << (SQLSelectParser.CURRENT_SYMBOL - 70)) |
											(1 << (SQLSelectParser.ROW_SYMBOL - 70)) |
											(1 << (SQLSelectParser.BETWEEN_SYMBOL - 70)) |
											(1 << (SQLSelectParser.AND_SYMBOL - 70)) |
											(1 << (SQLSelectParser.FOLLOWING_SYMBOL - 70)) |
											(1 << (SQLSelectParser.EXCLUDE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.GROUP_SYMBOL - 70)) |
											(1 << (SQLSelectParser.TIES_SYMBOL - 70)) |
											(1 << (SQLSelectParser.NO_SYMBOL - 70)) |
											(1 << (SQLSelectParser.OTHERS_SYMBOL - 70)))) !==
										0) ||
								(((_la - 102) & ~0x1f) == 0 &&
									((1 << (_la - 102)) &
										((1 << (SQLSelectParser.WITH_SYMBOL - 102)) |
											(1 << (SQLSelectParser.WITHOUT_SYMBOL - 102)) |
											(1 << (SQLSelectParser.RECURSIVE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.ROLLUP_SYMBOL - 102)) |
											(1 << (SQLSelectParser.CUBE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.ORDER_SYMBOL - 102)) |
											(1 << (SQLSelectParser.ASC_SYMBOL - 102)) |
											(1 << (SQLSelectParser.DESC_SYMBOL - 102)) |
											(1 << (SQLSelectParser.FROM_SYMBOL - 102)) |
											(1 << (SQLSelectParser.DUAL_SYMBOL - 102)) |
											(1 << (SQLSelectParser.VALUES_SYMBOL - 102)) |
											(1 << (SQLSelectParser.TABLE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.SQL_NO_CACHE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.SQL_CACHE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL - 102)) |
											(1 << (SQLSelectParser.FOR_SYMBOL - 102)) |
											(1 << (SQLSelectParser.OF_SYMBOL - 102)) |
											(1 << (SQLSelectParser.LOCK_SYMBOL - 102)) |
											(1 << (SQLSelectParser.IN_SYMBOL - 102)) |
											(1 << (SQLSelectParser.SHARE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.MODE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.UPDATE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.SKIP_SYMBOL - 102)) |
											(1 << (SQLSelectParser.LOCKED_SYMBOL - 102)) |
											(1 << (SQLSelectParser.NOWAIT_SYMBOL - 102)) |
											(1 << (SQLSelectParser.WHERE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.OJ_SYMBOL - 102)) |
											(1 << (SQLSelectParser.ON_SYMBOL - 102)) |
											(1 << (SQLSelectParser.USING_SYMBOL - 102)) |
											(1 << (SQLSelectParser.NATURAL_SYMBOL - 102)) |
											(1 << (SQLSelectParser.INNER_SYMBOL - 102)))) !==
										0) ||
								(((_la - 134) & ~0x1f) == 0 &&
									((1 << (_la - 134)) &
										((1 << (SQLSelectParser.JOIN_SYMBOL - 134)) |
											(1 << (SQLSelectParser.LEFT_SYMBOL - 134)) |
											(1 << (SQLSelectParser.RIGHT_SYMBOL - 134)) |
											(1 << (SQLSelectParser.OUTER_SYMBOL - 134)) |
											(1 << (SQLSelectParser.CROSS_SYMBOL - 134)) |
											(1 << (SQLSelectParser.LATERAL_SYMBOL - 134)) |
											(1 << (SQLSelectParser.JSON_TABLE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.COLUMNS_SYMBOL - 134)) |
											(1 << (SQLSelectParser.ORDINALITY_SYMBOL - 134)) |
											(1 << (SQLSelectParser.EXISTS_SYMBOL - 134)) |
											(1 << (SQLSelectParser.PATH_SYMBOL - 134)) |
											(1 << (SQLSelectParser.NESTED_SYMBOL - 134)) |
											(1 << (SQLSelectParser.EMPTY_SYMBOL - 134)) |
											(1 << (SQLSelectParser.ERROR_SYMBOL - 134)) |
											(1 << (SQLSelectParser.NULL_SYMBOL - 134)) |
											(1 << (SQLSelectParser.USE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.FORCE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.IGNORE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.KEY_SYMBOL - 134)) |
											(1 << (SQLSelectParser.INDEX_SYMBOL - 134)) |
											(1 << (SQLSelectParser.PRIMARY_SYMBOL - 134)) |
											(1 << (SQLSelectParser.IS_SYMBOL - 134)) |
											(1 << (SQLSelectParser.TRUE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.FALSE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.UNKNOWN_SYMBOL - 134)) |
											(1 << (SQLSelectParser.NOT_SYMBOL - 134)) |
											(1 << (SQLSelectParser.XOR_SYMBOL - 134)) |
											(1 << (SQLSelectParser.OR_SYMBOL - 134)) |
											(1 << (SQLSelectParser.ANY_SYMBOL - 134)) |
											(1 << (SQLSelectParser.MEMBER_SYMBOL - 134)) |
											(1 << (SQLSelectParser.SOUNDS_SYMBOL - 134)) |
											(1 << (SQLSelectParser.LIKE_SYMBOL - 134)))) !==
										0) ||
								(((_la - 166) & ~0x1f) == 0 &&
									((1 << (_la - 166)) &
										((1 << (SQLSelectParser.ESCAPE_SYMBOL - 166)) |
											(1 << (SQLSelectParser.REGEXP_SYMBOL - 166)) |
											(1 << (SQLSelectParser.DIV_SYMBOL - 166)) |
											(1 << (SQLSelectParser.MOD_SYMBOL - 166)) |
											(1 << (SQLSelectParser.MATCH_SYMBOL - 166)) |
											(1 << (SQLSelectParser.AGAINST_SYMBOL - 166)) |
											(1 << (SQLSelectParser.BINARY_SYMBOL - 166)) |
											(1 << (SQLSelectParser.CAST_SYMBOL - 166)) |
											(1 << (SQLSelectParser.ARRAY_SYMBOL - 166)) |
											(1 << (SQLSelectParser.CASE_SYMBOL - 166)) |
											(1 << (SQLSelectParser.END_SYMBOL - 166)) |
											(1 << (SQLSelectParser.CONVERT_SYMBOL - 166)) |
											(1 << (SQLSelectParser.COLLATE_SYMBOL - 166)) |
											(1 << (SQLSelectParser.AVG_SYMBOL - 166)) |
											(1 << (SQLSelectParser.BIT_AND_SYMBOL - 166)) |
											(1 << (SQLSelectParser.BIT_OR_SYMBOL - 166)) |
											(1 << (SQLSelectParser.BIT_XOR_SYMBOL - 166)) |
											(1 << (SQLSelectParser.COUNT_SYMBOL - 166)) |
											(1 << (SQLSelectParser.MIN_SYMBOL - 166)) |
											(1 << (SQLSelectParser.MAX_SYMBOL - 166)) |
											(1 << (SQLSelectParser.STD_SYMBOL - 166)) |
											(1 << (SQLSelectParser.VARIANCE_SYMBOL - 166)) |
											(1 << (SQLSelectParser.STDDEV_SAMP_SYMBOL - 166)) |
											(1 << (SQLSelectParser.VAR_SAMP_SYMBOL - 166)) |
											(1 << (SQLSelectParser.SUM_SYMBOL - 166)) |
											(1 << (SQLSelectParser.GROUP_CONCAT_SYMBOL - 166)) |
											(1 << (SQLSelectParser.SEPARATOR_SYMBOL - 166)) |
											(1 << (SQLSelectParser.GROUPING_SYMBOL - 166)) |
											(1 << (SQLSelectParser.ROW_NUMBER_SYMBOL - 166)) |
											(1 << (SQLSelectParser.RANK_SYMBOL - 166)) |
											(1 << (SQLSelectParser.DENSE_RANK_SYMBOL - 166)) |
											(1 << (SQLSelectParser.CUME_DIST_SYMBOL - 166)))) !==
										0) ||
								(((_la - 198) & ~0x1f) == 0 &&
									((1 << (_la - 198)) &
										((1 << (SQLSelectParser.PERCENT_RANK_SYMBOL - 198)) |
											(1 << (SQLSelectParser.NTILE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.LEAD_SYMBOL - 198)) |
											(1 << (SQLSelectParser.LAG_SYMBOL - 198)) |
											(1 << (SQLSelectParser.FIRST_VALUE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.LAST_VALUE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.NTH_VALUE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.FIRST_SYMBOL - 198)) |
											(1 << (SQLSelectParser.LAST_SYMBOL - 198)) |
											(1 << (SQLSelectParser.OVER_SYMBOL - 198)) |
											(1 << (SQLSelectParser.RESPECT_SYMBOL - 198)) |
											(1 << (SQLSelectParser.NULLS_SYMBOL - 198)) |
											(1 << (SQLSelectParser.JSON_ARRAYAGG_SYMBOL - 198)) |
											(1 << (SQLSelectParser.JSON_OBJECTAGG_SYMBOL - 198)) |
											(1 << (SQLSelectParser.BOOLEAN_SYMBOL - 198)) |
											(1 << (SQLSelectParser.LANGUAGE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.QUERY_SYMBOL - 198)) |
											(1 << (SQLSelectParser.EXPANSION_SYMBOL - 198)) |
											(1 << (SQLSelectParser.CHAR_SYMBOL - 198)) |
											(1 << (SQLSelectParser.CURRENT_USER_SYMBOL - 198)) |
											(1 << (SQLSelectParser.DATE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.INSERT_SYMBOL - 198)) |
											(1 << (SQLSelectParser.TIME_SYMBOL - 198)) |
											(1 << (SQLSelectParser.TIMESTAMP_SYMBOL - 198)) |
											(1 << (SQLSelectParser.TIMESTAMP_LTZ_SYMBOL - 198)) |
											(1 << (SQLSelectParser.TIMESTAMP_NTZ_SYMBOL - 198)) |
											(1 << (SQLSelectParser.ZONE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.USER_SYMBOL - 198)) |
											(1 << (SQLSelectParser.ADDDATE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.SUBDATE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.CURDATE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.CURTIME_SYMBOL - 198)))) !==
										0) ||
								(((_la - 230) & ~0x1f) == 0 &&
									((1 << (_la - 230)) &
										((1 << (SQLSelectParser.DATE_ADD_SYMBOL - 230)) |
											(1 << (SQLSelectParser.DATE_SUB_SYMBOL - 230)) |
											(1 << (SQLSelectParser.EXTRACT_SYMBOL - 230)) |
											(1 << (SQLSelectParser.GET_FORMAT_SYMBOL - 230)) |
											(1 << (SQLSelectParser.NOW_SYMBOL - 230)) |
											(1 << (SQLSelectParser.POSITION_SYMBOL - 230)) |
											(1 << (SQLSelectParser.SYSDATE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.TIMESTAMP_ADD_SYMBOL - 230)) |
											(1 << (SQLSelectParser.TIMESTAMP_DIFF_SYMBOL - 230)) |
											(1 << (SQLSelectParser.UTC_DATE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.UTC_TIME_SYMBOL - 230)) |
											(1 << (SQLSelectParser.UTC_TIMESTAMP_SYMBOL - 230)) |
											(1 << (SQLSelectParser.ASCII_SYMBOL - 230)) |
											(1 << (SQLSelectParser.CHARSET_SYMBOL - 230)) |
											(1 << (SQLSelectParser.COALESCE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.COLLATION_SYMBOL - 230)) |
											(1 << (SQLSelectParser.DATABASE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.IF_SYMBOL - 230)) |
											(1 << (SQLSelectParser.FORMAT_SYMBOL - 230)) |
											(1 << (SQLSelectParser.MICROSECOND_SYMBOL - 230)) |
											(1 << (SQLSelectParser.OLD_PASSWORD_SYMBOL - 230)) |
											(1 << (SQLSelectParser.PASSWORD_SYMBOL - 230)) |
											(1 << (SQLSelectParser.REPEAT_SYMBOL - 230)) |
											(1 << (SQLSelectParser.REPLACE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.REVERSE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.ROW_COUNT_SYMBOL - 230)) |
											(1 << (SQLSelectParser.TRUNCATE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.WEIGHT_STRING_SYMBOL - 230)) |
											(1 << (SQLSelectParser.CONTAINS_SYMBOL - 230)) |
											(1 << (SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL - 230)) |
											(1 << (SQLSelectParser.LINESTRING_SYMBOL - 230)) |
											(1 << (SQLSelectParser.MULTILINESTRING_SYMBOL - 230)))) !==
										0) ||
								(((_la - 262) & ~0x1f) == 0 &&
									((1 << (_la - 262)) &
										((1 << (SQLSelectParser.MULTIPOINT_SYMBOL - 262)) |
											(1 << (SQLSelectParser.MULTIPOLYGON_SYMBOL - 262)) |
											(1 << (SQLSelectParser.POINT_SYMBOL - 262)) |
											(1 << (SQLSelectParser.POLYGON_SYMBOL - 262)) |
											(1 << (SQLSelectParser.LEVEL_SYMBOL - 262)) |
											(1 << (SQLSelectParser.DATETIME_SYMBOL - 262)) |
											(1 << (SQLSelectParser.TRIM_SYMBOL - 262)) |
											(1 << (SQLSelectParser.LEADING_SYMBOL - 262)) |
											(1 << (SQLSelectParser.TRAILING_SYMBOL - 262)) |
											(1 << (SQLSelectParser.BOTH_SYMBOL - 262)) |
											(1 << (SQLSelectParser.STRING_SYMBOL - 262)) |
											(1 << (SQLSelectParser.SUBSTRING_SYMBOL - 262)) |
											(1 << (SQLSelectParser.WHEN_SYMBOL - 262)) |
											(1 << (SQLSelectParser.THEN_SYMBOL - 262)) |
											(1 << (SQLSelectParser.ELSE_SYMBOL - 262)) |
											(1 << (SQLSelectParser.SIGNED_SYMBOL - 262)) |
											(1 << (SQLSelectParser.UNSIGNED_SYMBOL - 262)) |
											(1 << (SQLSelectParser.DECIMAL_SYMBOL - 262)) |
											(1 << (SQLSelectParser.JSON_SYMBOL - 262)) |
											(1 << (SQLSelectParser.FLOAT_SYMBOL - 262)) |
											(1 << (SQLSelectParser.FLOAT_SYMBOL_4 - 262)) |
											(1 << (SQLSelectParser.FLOAT_SYMBOL_8 - 262)) |
											(1 << (SQLSelectParser.SET_SYMBOL - 262)) |
											(1 << (SQLSelectParser.SECOND_MICROSECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.MINUTE_MICROSECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.MINUTE_SECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.HOUR_MICROSECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.HOUR_SECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.HOUR_MINUTE_SYMBOL - 262)) |
											(1 << (SQLSelectParser.DAY_MICROSECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.DAY_SECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.DAY_MINUTE_SYMBOL - 262)))) !==
										0) ||
								(((_la - 294) & ~0x1f) == 0 &&
									((1 << (_la - 294)) &
										((1 << (SQLSelectParser.DAY_HOUR_SYMBOL - 294)) |
											(1 << (SQLSelectParser.YEAR_MONTH_SYMBOL - 294)) |
											(1 << (SQLSelectParser.BTREE_SYMBOL - 294)) |
											(1 << (SQLSelectParser.RTREE_SYMBOL - 294)) |
											(1 << (SQLSelectParser.HASH_SYMBOL - 294)) |
											(1 << (SQLSelectParser.REAL_SYMBOL - 294)) |
											(1 << (SQLSelectParser.DOUBLE_SYMBOL - 294)) |
											(1 << (SQLSelectParser.PRECISION_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NUMERIC_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NUMBER_SYMBOL - 294)) |
											(1 << (SQLSelectParser.FIXED_SYMBOL - 294)) |
											(1 << (SQLSelectParser.BIT_SYMBOL - 294)) |
											(1 << (SQLSelectParser.BOOL_SYMBOL - 294)) |
											(1 << (SQLSelectParser.VARYING_SYMBOL - 294)) |
											(1 << (SQLSelectParser.VARCHAR_SYMBOL - 294)) |
											(1 << (SQLSelectParser.VARCHAR2_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NATIONAL_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NVARCHAR_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NVARCHAR2_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NCHAR_SYMBOL - 294)) |
											(1 << (SQLSelectParser.VARBINARY_SYMBOL - 294)) |
											(1 << (SQLSelectParser.TINYBLOB_SYMBOL - 294)) |
											(1 << (SQLSelectParser.BLOB_SYMBOL - 294)) |
											(1 << (SQLSelectParser.CLOB_SYMBOL - 294)) |
											(1 << (SQLSelectParser.BFILE_SYMBOL - 294)) |
											(1 << (SQLSelectParser.RAW_SYMBOL - 294)) |
											(1 << (SQLSelectParser.MEDIUMBLOB_SYMBOL - 294)) |
											(1 << (SQLSelectParser.LONGBLOB_SYMBOL - 294)) |
											(1 << (SQLSelectParser.LONG_SYMBOL - 294)) |
											(1 << (SQLSelectParser.TINYTEXT_SYMBOL - 294)) |
											(1 << (SQLSelectParser.TEXT_SYMBOL - 294)) |
											(1 << (SQLSelectParser.MEDIUMTEXT_SYMBOL - 294)))) !==
										0) ||
								(((_la - 326) & ~0x1f) == 0 &&
									((1 << (_la - 326)) &
										((1 << (SQLSelectParser.LONGTEXT_SYMBOL - 326)) |
											(1 << (SQLSelectParser.ENUM_SYMBOL - 326)) |
											(1 << (SQLSelectParser.SERIAL_SYMBOL - 326)) |
											(1 << (SQLSelectParser.GEOMETRY_SYMBOL - 326)) |
											(1 << (SQLSelectParser.ZEROFILL_SYMBOL - 326)) |
											(1 << (SQLSelectParser.BYTE_SYMBOL - 326)) |
											(1 << (SQLSelectParser.UNICODE_SYMBOL - 326)) |
											(1 << (SQLSelectParser.TERMINATED_SYMBOL - 326)) |
											(1 << (SQLSelectParser.OPTIONALLY_SYMBOL - 326)) |
											(1 << (SQLSelectParser.ENCLOSED_SYMBOL - 326)) |
											(1 << (SQLSelectParser.ESCAPED_SYMBOL - 326)) |
											(1 << (SQLSelectParser.LINES_SYMBOL - 326)) |
											(1 << (SQLSelectParser.STARTING_SYMBOL - 326)) |
											(1 << (SQLSelectParser.GLOBAL_SYMBOL - 326)) |
											(1 << (SQLSelectParser.LOCAL_SYMBOL - 326)) |
											(1 << (SQLSelectParser.SESSION_SYMBOL - 326)) |
											(1 << (SQLSelectParser.VARIANT_SYMBOL - 326)) |
											(1 << (SQLSelectParser.OBJECT_SYMBOL - 326)) |
											(1 << (SQLSelectParser.GEOGRAPHY_SYMBOL - 326)) |
											(1 << (SQLSelectParser.UNDERSCORE_CHARSET - 326)) |
											(1 << (SQLSelectParser.IDENTIFIER - 326)) |
											(1 << (SQLSelectParser.NCHAR_TEXT - 326)) |
											(1 << (SQLSelectParser.BACK_TICK_QUOTED_ID - 326)) |
											(1 << (SQLSelectParser.DOUBLE_QUOTED_TEXT - 326)) |
											(1 << (SQLSelectParser.SINGLE_QUOTED_TEXT - 326)) |
											(1 << (SQLSelectParser.BRACKET_QUOTED_TEXT - 326)) |
											(1 << (SQLSelectParser.CURLY_BRACES_QUOTED_TEXT - 326)))) !==
										0)
							) {
								this.state = 1936;
								this.exprList();
							}

							break;

						case 2:
							this.state = 1940;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (
								((_la & ~0x1f) == 0 &&
									((1 << _la) &
										((1 << SQLSelectParser.PLUS_OPERATOR) |
											(1 << SQLSelectParser.MINUS_OPERATOR) |
											(1 << SQLSelectParser.LOGICAL_NOT_OPERATOR) |
											(1 << SQLSelectParser.BITWISE_NOT_OPERATOR) |
											(1 << SQLSelectParser.OPEN_PAR_SYMBOL) |
											(1 << SQLSelectParser.OPEN_CURLY_SYMBOL))) !==
										0) ||
								(((_la - 38) & ~0x1f) == 0 &&
									((1 << (_la - 38)) &
										((1 << (SQLSelectParser.AT_SIGN_SYMBOL - 38)) |
											(1 << (SQLSelectParser.AT_TEXT_SUFFIX - 38)) |
											(1 << (SQLSelectParser.AT_AT_SIGN_SYMBOL - 38)) |
											(1 << (SQLSelectParser.NULL2_SYMBOL - 38)) |
											(1 << (SQLSelectParser.PARAM_MARKER - 38)) |
											(1 << (SQLSelectParser.HEX_NUMBER - 38)) |
											(1 << (SQLSelectParser.BIN_NUMBER - 38)) |
											(1 << (SQLSelectParser.INT_NUMBER - 38)) |
											(1 << (SQLSelectParser.DECIMAL_NUMBER - 38)) |
											(1 << (SQLSelectParser.FLOAT_NUMBER - 38)) |
											(1 << (SQLSelectParser.TINYINT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.SMALLINT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.MEDIUMINT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.BYTE_INT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.INT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.BIGINT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.SECOND_SYMBOL - 38)) |
											(1 << (SQLSelectParser.MINUTE_SYMBOL - 38)) |
											(1 << (SQLSelectParser.HOUR_SYMBOL - 38)) |
											(1 << (SQLSelectParser.DAY_SYMBOL - 38)) |
											(1 << (SQLSelectParser.WEEK_SYMBOL - 38)) |
											(1 << (SQLSelectParser.MONTH_SYMBOL - 38)) |
											(1 << (SQLSelectParser.QUARTER_SYMBOL - 38)) |
											(1 << (SQLSelectParser.YEAR_SYMBOL - 38)) |
											(1 << (SQLSelectParser.DEFAULT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.UNION_SYMBOL - 38)) |
											(1 << (SQLSelectParser.SELECT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.ALL_SYMBOL - 38)) |
											(1 << (SQLSelectParser.DISTINCT_SYMBOL - 38)) |
											(1 << (SQLSelectParser.STRAIGHT_JOIN_SYMBOL - 38)) |
											(1 << (SQLSelectParser.HIGH_PRIORITY_SYMBOL - 38)))) !==
										0) ||
								(((_la - 70) & ~0x1f) == 0 &&
									((1 << (_la - 70)) &
										((1 << (SQLSelectParser.SQL_SMALL_RESULT_SYMBOL - 70)) |
											(1 << (SQLSelectParser.SQL_BIG_RESULT_SYMBOL - 70)) |
											(1 << (SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL - 70)) |
											(1 << (SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL - 70)) |
											(1 << (SQLSelectParser.LIMIT_SYMBOL - 70)) |
											(1 << (SQLSelectParser.OFFSET_SYMBOL - 70)) |
											(1 << (SQLSelectParser.INTO_SYMBOL - 70)) |
											(1 << (SQLSelectParser.OUTFILE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.DUMPFILE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.PROCEDURE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.ANALYSE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.HAVING_SYMBOL - 70)) |
											(1 << (SQLSelectParser.WINDOW_SYMBOL - 70)) |
											(1 << (SQLSelectParser.AS_SYMBOL - 70)) |
											(1 << (SQLSelectParser.PARTITION_SYMBOL - 70)) |
											(1 << (SQLSelectParser.BY_SYMBOL - 70)) |
											(1 << (SQLSelectParser.ROWS_SYMBOL - 70)) |
											(1 << (SQLSelectParser.RANGE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.GROUPS_SYMBOL - 70)) |
											(1 << (SQLSelectParser.UNBOUNDED_SYMBOL - 70)) |
											(1 << (SQLSelectParser.PRECEDING_SYMBOL - 70)) |
											(1 << (SQLSelectParser.INTERVAL_SYMBOL - 70)) |
											(1 << (SQLSelectParser.CURRENT_SYMBOL - 70)) |
											(1 << (SQLSelectParser.ROW_SYMBOL - 70)) |
											(1 << (SQLSelectParser.BETWEEN_SYMBOL - 70)) |
											(1 << (SQLSelectParser.AND_SYMBOL - 70)) |
											(1 << (SQLSelectParser.FOLLOWING_SYMBOL - 70)) |
											(1 << (SQLSelectParser.EXCLUDE_SYMBOL - 70)) |
											(1 << (SQLSelectParser.GROUP_SYMBOL - 70)) |
											(1 << (SQLSelectParser.TIES_SYMBOL - 70)) |
											(1 << (SQLSelectParser.NO_SYMBOL - 70)) |
											(1 << (SQLSelectParser.OTHERS_SYMBOL - 70)))) !==
										0) ||
								(((_la - 102) & ~0x1f) == 0 &&
									((1 << (_la - 102)) &
										((1 << (SQLSelectParser.WITH_SYMBOL - 102)) |
											(1 << (SQLSelectParser.WITHOUT_SYMBOL - 102)) |
											(1 << (SQLSelectParser.RECURSIVE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.ROLLUP_SYMBOL - 102)) |
											(1 << (SQLSelectParser.CUBE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.ORDER_SYMBOL - 102)) |
											(1 << (SQLSelectParser.ASC_SYMBOL - 102)) |
											(1 << (SQLSelectParser.DESC_SYMBOL - 102)) |
											(1 << (SQLSelectParser.FROM_SYMBOL - 102)) |
											(1 << (SQLSelectParser.DUAL_SYMBOL - 102)) |
											(1 << (SQLSelectParser.VALUES_SYMBOL - 102)) |
											(1 << (SQLSelectParser.TABLE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.SQL_NO_CACHE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.SQL_CACHE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL - 102)) |
											(1 << (SQLSelectParser.FOR_SYMBOL - 102)) |
											(1 << (SQLSelectParser.OF_SYMBOL - 102)) |
											(1 << (SQLSelectParser.LOCK_SYMBOL - 102)) |
											(1 << (SQLSelectParser.IN_SYMBOL - 102)) |
											(1 << (SQLSelectParser.SHARE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.MODE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.UPDATE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.SKIP_SYMBOL - 102)) |
											(1 << (SQLSelectParser.LOCKED_SYMBOL - 102)) |
											(1 << (SQLSelectParser.NOWAIT_SYMBOL - 102)) |
											(1 << (SQLSelectParser.WHERE_SYMBOL - 102)) |
											(1 << (SQLSelectParser.OJ_SYMBOL - 102)) |
											(1 << (SQLSelectParser.ON_SYMBOL - 102)) |
											(1 << (SQLSelectParser.USING_SYMBOL - 102)) |
											(1 << (SQLSelectParser.NATURAL_SYMBOL - 102)) |
											(1 << (SQLSelectParser.INNER_SYMBOL - 102)))) !==
										0) ||
								(((_la - 134) & ~0x1f) == 0 &&
									((1 << (_la - 134)) &
										((1 << (SQLSelectParser.JOIN_SYMBOL - 134)) |
											(1 << (SQLSelectParser.LEFT_SYMBOL - 134)) |
											(1 << (SQLSelectParser.RIGHT_SYMBOL - 134)) |
											(1 << (SQLSelectParser.OUTER_SYMBOL - 134)) |
											(1 << (SQLSelectParser.CROSS_SYMBOL - 134)) |
											(1 << (SQLSelectParser.LATERAL_SYMBOL - 134)) |
											(1 << (SQLSelectParser.JSON_TABLE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.COLUMNS_SYMBOL - 134)) |
											(1 << (SQLSelectParser.ORDINALITY_SYMBOL - 134)) |
											(1 << (SQLSelectParser.EXISTS_SYMBOL - 134)) |
											(1 << (SQLSelectParser.PATH_SYMBOL - 134)) |
											(1 << (SQLSelectParser.NESTED_SYMBOL - 134)) |
											(1 << (SQLSelectParser.EMPTY_SYMBOL - 134)) |
											(1 << (SQLSelectParser.ERROR_SYMBOL - 134)) |
											(1 << (SQLSelectParser.NULL_SYMBOL - 134)) |
											(1 << (SQLSelectParser.USE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.FORCE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.IGNORE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.KEY_SYMBOL - 134)) |
											(1 << (SQLSelectParser.INDEX_SYMBOL - 134)) |
											(1 << (SQLSelectParser.PRIMARY_SYMBOL - 134)) |
											(1 << (SQLSelectParser.IS_SYMBOL - 134)) |
											(1 << (SQLSelectParser.TRUE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.FALSE_SYMBOL - 134)) |
											(1 << (SQLSelectParser.UNKNOWN_SYMBOL - 134)) |
											(1 << (SQLSelectParser.NOT_SYMBOL - 134)) |
											(1 << (SQLSelectParser.XOR_SYMBOL - 134)) |
											(1 << (SQLSelectParser.OR_SYMBOL - 134)) |
											(1 << (SQLSelectParser.ANY_SYMBOL - 134)) |
											(1 << (SQLSelectParser.MEMBER_SYMBOL - 134)) |
											(1 << (SQLSelectParser.SOUNDS_SYMBOL - 134)) |
											(1 << (SQLSelectParser.LIKE_SYMBOL - 134)))) !==
										0) ||
								(((_la - 166) & ~0x1f) == 0 &&
									((1 << (_la - 166)) &
										((1 << (SQLSelectParser.ESCAPE_SYMBOL - 166)) |
											(1 << (SQLSelectParser.REGEXP_SYMBOL - 166)) |
											(1 << (SQLSelectParser.DIV_SYMBOL - 166)) |
											(1 << (SQLSelectParser.MOD_SYMBOL - 166)) |
											(1 << (SQLSelectParser.MATCH_SYMBOL - 166)) |
											(1 << (SQLSelectParser.AGAINST_SYMBOL - 166)) |
											(1 << (SQLSelectParser.BINARY_SYMBOL - 166)) |
											(1 << (SQLSelectParser.CAST_SYMBOL - 166)) |
											(1 << (SQLSelectParser.ARRAY_SYMBOL - 166)) |
											(1 << (SQLSelectParser.CASE_SYMBOL - 166)) |
											(1 << (SQLSelectParser.END_SYMBOL - 166)) |
											(1 << (SQLSelectParser.CONVERT_SYMBOL - 166)) |
											(1 << (SQLSelectParser.COLLATE_SYMBOL - 166)) |
											(1 << (SQLSelectParser.AVG_SYMBOL - 166)) |
											(1 << (SQLSelectParser.BIT_AND_SYMBOL - 166)) |
											(1 << (SQLSelectParser.BIT_OR_SYMBOL - 166)) |
											(1 << (SQLSelectParser.BIT_XOR_SYMBOL - 166)) |
											(1 << (SQLSelectParser.COUNT_SYMBOL - 166)) |
											(1 << (SQLSelectParser.MIN_SYMBOL - 166)) |
											(1 << (SQLSelectParser.MAX_SYMBOL - 166)) |
											(1 << (SQLSelectParser.STD_SYMBOL - 166)) |
											(1 << (SQLSelectParser.VARIANCE_SYMBOL - 166)) |
											(1 << (SQLSelectParser.STDDEV_SAMP_SYMBOL - 166)) |
											(1 << (SQLSelectParser.VAR_SAMP_SYMBOL - 166)) |
											(1 << (SQLSelectParser.SUM_SYMBOL - 166)) |
											(1 << (SQLSelectParser.GROUP_CONCAT_SYMBOL - 166)) |
											(1 << (SQLSelectParser.SEPARATOR_SYMBOL - 166)) |
											(1 << (SQLSelectParser.GROUPING_SYMBOL - 166)) |
											(1 << (SQLSelectParser.ROW_NUMBER_SYMBOL - 166)) |
											(1 << (SQLSelectParser.RANK_SYMBOL - 166)) |
											(1 << (SQLSelectParser.DENSE_RANK_SYMBOL - 166)) |
											(1 << (SQLSelectParser.CUME_DIST_SYMBOL - 166)))) !==
										0) ||
								(((_la - 198) & ~0x1f) == 0 &&
									((1 << (_la - 198)) &
										((1 << (SQLSelectParser.PERCENT_RANK_SYMBOL - 198)) |
											(1 << (SQLSelectParser.NTILE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.LEAD_SYMBOL - 198)) |
											(1 << (SQLSelectParser.LAG_SYMBOL - 198)) |
											(1 << (SQLSelectParser.FIRST_VALUE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.LAST_VALUE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.NTH_VALUE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.FIRST_SYMBOL - 198)) |
											(1 << (SQLSelectParser.LAST_SYMBOL - 198)) |
											(1 << (SQLSelectParser.OVER_SYMBOL - 198)) |
											(1 << (SQLSelectParser.RESPECT_SYMBOL - 198)) |
											(1 << (SQLSelectParser.NULLS_SYMBOL - 198)) |
											(1 << (SQLSelectParser.JSON_ARRAYAGG_SYMBOL - 198)) |
											(1 << (SQLSelectParser.JSON_OBJECTAGG_SYMBOL - 198)) |
											(1 << (SQLSelectParser.BOOLEAN_SYMBOL - 198)) |
											(1 << (SQLSelectParser.LANGUAGE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.QUERY_SYMBOL - 198)) |
											(1 << (SQLSelectParser.EXPANSION_SYMBOL - 198)) |
											(1 << (SQLSelectParser.CHAR_SYMBOL - 198)) |
											(1 << (SQLSelectParser.CURRENT_USER_SYMBOL - 198)) |
											(1 << (SQLSelectParser.DATE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.INSERT_SYMBOL - 198)) |
											(1 << (SQLSelectParser.TIME_SYMBOL - 198)) |
											(1 << (SQLSelectParser.TIMESTAMP_SYMBOL - 198)) |
											(1 << (SQLSelectParser.TIMESTAMP_LTZ_SYMBOL - 198)) |
											(1 << (SQLSelectParser.TIMESTAMP_NTZ_SYMBOL - 198)) |
											(1 << (SQLSelectParser.ZONE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.USER_SYMBOL - 198)) |
											(1 << (SQLSelectParser.ADDDATE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.SUBDATE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.CURDATE_SYMBOL - 198)) |
											(1 << (SQLSelectParser.CURTIME_SYMBOL - 198)))) !==
										0) ||
								(((_la - 230) & ~0x1f) == 0 &&
									((1 << (_la - 230)) &
										((1 << (SQLSelectParser.DATE_ADD_SYMBOL - 230)) |
											(1 << (SQLSelectParser.DATE_SUB_SYMBOL - 230)) |
											(1 << (SQLSelectParser.EXTRACT_SYMBOL - 230)) |
											(1 << (SQLSelectParser.GET_FORMAT_SYMBOL - 230)) |
											(1 << (SQLSelectParser.NOW_SYMBOL - 230)) |
											(1 << (SQLSelectParser.POSITION_SYMBOL - 230)) |
											(1 << (SQLSelectParser.SYSDATE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.TIMESTAMP_ADD_SYMBOL - 230)) |
											(1 << (SQLSelectParser.TIMESTAMP_DIFF_SYMBOL - 230)) |
											(1 << (SQLSelectParser.UTC_DATE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.UTC_TIME_SYMBOL - 230)) |
											(1 << (SQLSelectParser.UTC_TIMESTAMP_SYMBOL - 230)) |
											(1 << (SQLSelectParser.ASCII_SYMBOL - 230)) |
											(1 << (SQLSelectParser.CHARSET_SYMBOL - 230)) |
											(1 << (SQLSelectParser.COALESCE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.COLLATION_SYMBOL - 230)) |
											(1 << (SQLSelectParser.DATABASE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.IF_SYMBOL - 230)) |
											(1 << (SQLSelectParser.FORMAT_SYMBOL - 230)) |
											(1 << (SQLSelectParser.MICROSECOND_SYMBOL - 230)) |
											(1 << (SQLSelectParser.OLD_PASSWORD_SYMBOL - 230)) |
											(1 << (SQLSelectParser.PASSWORD_SYMBOL - 230)) |
											(1 << (SQLSelectParser.REPEAT_SYMBOL - 230)) |
											(1 << (SQLSelectParser.REPLACE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.REVERSE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.ROW_COUNT_SYMBOL - 230)) |
											(1 << (SQLSelectParser.TRUNCATE_SYMBOL - 230)) |
											(1 << (SQLSelectParser.WEIGHT_STRING_SYMBOL - 230)) |
											(1 << (SQLSelectParser.CONTAINS_SYMBOL - 230)) |
											(1 << (SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL - 230)) |
											(1 << (SQLSelectParser.LINESTRING_SYMBOL - 230)) |
											(1 << (SQLSelectParser.MULTILINESTRING_SYMBOL - 230)))) !==
										0) ||
								(((_la - 262) & ~0x1f) == 0 &&
									((1 << (_la - 262)) &
										((1 << (SQLSelectParser.MULTIPOINT_SYMBOL - 262)) |
											(1 << (SQLSelectParser.MULTIPOLYGON_SYMBOL - 262)) |
											(1 << (SQLSelectParser.POINT_SYMBOL - 262)) |
											(1 << (SQLSelectParser.POLYGON_SYMBOL - 262)) |
											(1 << (SQLSelectParser.LEVEL_SYMBOL - 262)) |
											(1 << (SQLSelectParser.DATETIME_SYMBOL - 262)) |
											(1 << (SQLSelectParser.TRIM_SYMBOL - 262)) |
											(1 << (SQLSelectParser.LEADING_SYMBOL - 262)) |
											(1 << (SQLSelectParser.TRAILING_SYMBOL - 262)) |
											(1 << (SQLSelectParser.BOTH_SYMBOL - 262)) |
											(1 << (SQLSelectParser.STRING_SYMBOL - 262)) |
											(1 << (SQLSelectParser.SUBSTRING_SYMBOL - 262)) |
											(1 << (SQLSelectParser.WHEN_SYMBOL - 262)) |
											(1 << (SQLSelectParser.THEN_SYMBOL - 262)) |
											(1 << (SQLSelectParser.ELSE_SYMBOL - 262)) |
											(1 << (SQLSelectParser.SIGNED_SYMBOL - 262)) |
											(1 << (SQLSelectParser.UNSIGNED_SYMBOL - 262)) |
											(1 << (SQLSelectParser.DECIMAL_SYMBOL - 262)) |
											(1 << (SQLSelectParser.JSON_SYMBOL - 262)) |
											(1 << (SQLSelectParser.FLOAT_SYMBOL - 262)) |
											(1 << (SQLSelectParser.FLOAT_SYMBOL_4 - 262)) |
											(1 << (SQLSelectParser.FLOAT_SYMBOL_8 - 262)) |
											(1 << (SQLSelectParser.SET_SYMBOL - 262)) |
											(1 << (SQLSelectParser.SECOND_MICROSECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.MINUTE_MICROSECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.MINUTE_SECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.HOUR_MICROSECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.HOUR_SECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.HOUR_MINUTE_SYMBOL - 262)) |
											(1 << (SQLSelectParser.DAY_MICROSECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.DAY_SECOND_SYMBOL - 262)) |
											(1 << (SQLSelectParser.DAY_MINUTE_SYMBOL - 262)))) !==
										0) ||
								(((_la - 294) & ~0x1f) == 0 &&
									((1 << (_la - 294)) &
										((1 << (SQLSelectParser.DAY_HOUR_SYMBOL - 294)) |
											(1 << (SQLSelectParser.YEAR_MONTH_SYMBOL - 294)) |
											(1 << (SQLSelectParser.BTREE_SYMBOL - 294)) |
											(1 << (SQLSelectParser.RTREE_SYMBOL - 294)) |
											(1 << (SQLSelectParser.HASH_SYMBOL - 294)) |
											(1 << (SQLSelectParser.REAL_SYMBOL - 294)) |
											(1 << (SQLSelectParser.DOUBLE_SYMBOL - 294)) |
											(1 << (SQLSelectParser.PRECISION_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NUMERIC_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NUMBER_SYMBOL - 294)) |
											(1 << (SQLSelectParser.FIXED_SYMBOL - 294)) |
											(1 << (SQLSelectParser.BIT_SYMBOL - 294)) |
											(1 << (SQLSelectParser.BOOL_SYMBOL - 294)) |
											(1 << (SQLSelectParser.VARYING_SYMBOL - 294)) |
											(1 << (SQLSelectParser.VARCHAR_SYMBOL - 294)) |
											(1 << (SQLSelectParser.VARCHAR2_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NATIONAL_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NVARCHAR_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NVARCHAR2_SYMBOL - 294)) |
											(1 << (SQLSelectParser.NCHAR_SYMBOL - 294)) |
											(1 << (SQLSelectParser.VARBINARY_SYMBOL - 294)) |
											(1 << (SQLSelectParser.TINYBLOB_SYMBOL - 294)) |
											(1 << (SQLSelectParser.BLOB_SYMBOL - 294)) |
											(1 << (SQLSelectParser.CLOB_SYMBOL - 294)) |
											(1 << (SQLSelectParser.BFILE_SYMBOL - 294)) |
											(1 << (SQLSelectParser.RAW_SYMBOL - 294)) |
											(1 << (SQLSelectParser.MEDIUMBLOB_SYMBOL - 294)) |
											(1 << (SQLSelectParser.LONGBLOB_SYMBOL - 294)) |
											(1 << (SQLSelectParser.LONG_SYMBOL - 294)) |
											(1 << (SQLSelectParser.TINYTEXT_SYMBOL - 294)) |
											(1 << (SQLSelectParser.TEXT_SYMBOL - 294)) |
											(1 << (SQLSelectParser.MEDIUMTEXT_SYMBOL - 294)))) !==
										0) ||
								(((_la - 326) & ~0x1f) == 0 &&
									((1 << (_la - 326)) &
										((1 << (SQLSelectParser.LONGTEXT_SYMBOL - 326)) |
											(1 << (SQLSelectParser.ENUM_SYMBOL - 326)) |
											(1 << (SQLSelectParser.SERIAL_SYMBOL - 326)) |
											(1 << (SQLSelectParser.GEOMETRY_SYMBOL - 326)) |
											(1 << (SQLSelectParser.ZEROFILL_SYMBOL - 326)) |
											(1 << (SQLSelectParser.BYTE_SYMBOL - 326)) |
											(1 << (SQLSelectParser.UNICODE_SYMBOL - 326)) |
											(1 << (SQLSelectParser.TERMINATED_SYMBOL - 326)) |
											(1 << (SQLSelectParser.OPTIONALLY_SYMBOL - 326)) |
											(1 << (SQLSelectParser.ENCLOSED_SYMBOL - 326)) |
											(1 << (SQLSelectParser.ESCAPED_SYMBOL - 326)) |
											(1 << (SQLSelectParser.LINES_SYMBOL - 326)) |
											(1 << (SQLSelectParser.STARTING_SYMBOL - 326)) |
											(1 << (SQLSelectParser.GLOBAL_SYMBOL - 326)) |
											(1 << (SQLSelectParser.LOCAL_SYMBOL - 326)) |
											(1 << (SQLSelectParser.SESSION_SYMBOL - 326)) |
											(1 << (SQLSelectParser.VARIANT_SYMBOL - 326)) |
											(1 << (SQLSelectParser.OBJECT_SYMBOL - 326)) |
											(1 << (SQLSelectParser.GEOGRAPHY_SYMBOL - 326)) |
											(1 << (SQLSelectParser.UNDERSCORE_CHARSET - 326)) |
											(1 << (SQLSelectParser.IDENTIFIER - 326)) |
											(1 << (SQLSelectParser.NCHAR_TEXT - 326)) |
											(1 << (SQLSelectParser.BACK_TICK_QUOTED_ID - 326)) |
											(1 << (SQLSelectParser.DOUBLE_QUOTED_TEXT - 326)) |
											(1 << (SQLSelectParser.SINGLE_QUOTED_TEXT - 326)) |
											(1 << (SQLSelectParser.BRACKET_QUOTED_TEXT - 326)) |
											(1 << (SQLSelectParser.CURLY_BRACES_QUOTED_TEXT - 326)))) !==
										0)
							) {
								this.state = 1939;
								this.selectItem();
							}

							break;
					}
					this.state = 1944;
					this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	udfExprList() {
		let localctx = new UdfExprListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 210, SQLSelectParser.RULE_udfExprList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1948;
			this.udfExpr();
			this.state = 1953;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 1949;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 1950;
				this.udfExpr();
				this.state = 1955;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	udfExpr() {
		let localctx = new UdfExprContext(this, this._ctx, this.state);
		this.enterRule(localctx, 212, SQLSelectParser.RULE_udfExpr);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1956;
			this.expr(0);
			this.state = 1958;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 234, this._ctx);
			if (la_ === 1) {
				this.state = 1957;
				this.qualifiedIdentifier();
			}
			this.state = 1961;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (
				(((_la - 49) & ~0x1f) == 0 &&
					((1 << (_la - 49)) &
						((1 << (SQLSelectParser.TINYINT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.SMALLINT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.MEDIUMINT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.BYTE_INT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.INT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.BIGINT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.SECOND_SYMBOL - 49)) |
							(1 << (SQLSelectParser.MINUTE_SYMBOL - 49)) |
							(1 << (SQLSelectParser.HOUR_SYMBOL - 49)) |
							(1 << (SQLSelectParser.DAY_SYMBOL - 49)) |
							(1 << (SQLSelectParser.WEEK_SYMBOL - 49)) |
							(1 << (SQLSelectParser.MONTH_SYMBOL - 49)) |
							(1 << (SQLSelectParser.QUARTER_SYMBOL - 49)) |
							(1 << (SQLSelectParser.YEAR_SYMBOL - 49)) |
							(1 << (SQLSelectParser.DEFAULT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.UNION_SYMBOL - 49)) |
							(1 << (SQLSelectParser.SELECT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.ALL_SYMBOL - 49)) |
							(1 << (SQLSelectParser.DISTINCT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.STRAIGHT_JOIN_SYMBOL - 49)) |
							(1 << (SQLSelectParser.HIGH_PRIORITY_SYMBOL - 49)) |
							(1 << (SQLSelectParser.SQL_SMALL_RESULT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.SQL_BIG_RESULT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL - 49)) |
							(1 << (SQLSelectParser.LIMIT_SYMBOL - 49)) |
							(1 << (SQLSelectParser.OFFSET_SYMBOL - 49)) |
							(1 << (SQLSelectParser.INTO_SYMBOL - 49)) |
							(1 << (SQLSelectParser.OUTFILE_SYMBOL - 49)) |
							(1 << (SQLSelectParser.DUMPFILE_SYMBOL - 49)) |
							(1 << (SQLSelectParser.PROCEDURE_SYMBOL - 49)) |
							(1 << (SQLSelectParser.ANALYSE_SYMBOL - 49)))) !==
						0) ||
				(((_la - 81) & ~0x1f) == 0 &&
					((1 << (_la - 81)) &
						((1 << (SQLSelectParser.HAVING_SYMBOL - 81)) |
							(1 << (SQLSelectParser.WINDOW_SYMBOL - 81)) |
							(1 << (SQLSelectParser.AS_SYMBOL - 81)) |
							(1 << (SQLSelectParser.PARTITION_SYMBOL - 81)) |
							(1 << (SQLSelectParser.BY_SYMBOL - 81)) |
							(1 << (SQLSelectParser.ROWS_SYMBOL - 81)) |
							(1 << (SQLSelectParser.RANGE_SYMBOL - 81)) |
							(1 << (SQLSelectParser.GROUPS_SYMBOL - 81)) |
							(1 << (SQLSelectParser.UNBOUNDED_SYMBOL - 81)) |
							(1 << (SQLSelectParser.PRECEDING_SYMBOL - 81)) |
							(1 << (SQLSelectParser.INTERVAL_SYMBOL - 81)) |
							(1 << (SQLSelectParser.CURRENT_SYMBOL - 81)) |
							(1 << (SQLSelectParser.ROW_SYMBOL - 81)) |
							(1 << (SQLSelectParser.BETWEEN_SYMBOL - 81)) |
							(1 << (SQLSelectParser.AND_SYMBOL - 81)) |
							(1 << (SQLSelectParser.FOLLOWING_SYMBOL - 81)) |
							(1 << (SQLSelectParser.EXCLUDE_SYMBOL - 81)) |
							(1 << (SQLSelectParser.GROUP_SYMBOL - 81)) |
							(1 << (SQLSelectParser.TIES_SYMBOL - 81)) |
							(1 << (SQLSelectParser.NO_SYMBOL - 81)) |
							(1 << (SQLSelectParser.OTHERS_SYMBOL - 81)) |
							(1 << (SQLSelectParser.WITH_SYMBOL - 81)) |
							(1 << (SQLSelectParser.WITHOUT_SYMBOL - 81)) |
							(1 << (SQLSelectParser.RECURSIVE_SYMBOL - 81)) |
							(1 << (SQLSelectParser.ROLLUP_SYMBOL - 81)) |
							(1 << (SQLSelectParser.CUBE_SYMBOL - 81)) |
							(1 << (SQLSelectParser.ORDER_SYMBOL - 81)) |
							(1 << (SQLSelectParser.ASC_SYMBOL - 81)) |
							(1 << (SQLSelectParser.DESC_SYMBOL - 81)) |
							(1 << (SQLSelectParser.FROM_SYMBOL - 81)) |
							(1 << (SQLSelectParser.DUAL_SYMBOL - 81)) |
							(1 << (SQLSelectParser.VALUES_SYMBOL - 81)))) !==
						0) ||
				(((_la - 113) & ~0x1f) == 0 &&
					((1 << (_la - 113)) &
						((1 << (SQLSelectParser.TABLE_SYMBOL - 113)) |
							(1 << (SQLSelectParser.SQL_NO_CACHE_SYMBOL - 113)) |
							(1 << (SQLSelectParser.SQL_CACHE_SYMBOL - 113)) |
							(1 << (SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL - 113)) |
							(1 << (SQLSelectParser.FOR_SYMBOL - 113)) |
							(1 << (SQLSelectParser.OF_SYMBOL - 113)) |
							(1 << (SQLSelectParser.LOCK_SYMBOL - 113)) |
							(1 << (SQLSelectParser.IN_SYMBOL - 113)) |
							(1 << (SQLSelectParser.SHARE_SYMBOL - 113)) |
							(1 << (SQLSelectParser.MODE_SYMBOL - 113)) |
							(1 << (SQLSelectParser.UPDATE_SYMBOL - 113)) |
							(1 << (SQLSelectParser.SKIP_SYMBOL - 113)) |
							(1 << (SQLSelectParser.LOCKED_SYMBOL - 113)) |
							(1 << (SQLSelectParser.NOWAIT_SYMBOL - 113)) |
							(1 << (SQLSelectParser.WHERE_SYMBOL - 113)) |
							(1 << (SQLSelectParser.OJ_SYMBOL - 113)) |
							(1 << (SQLSelectParser.ON_SYMBOL - 113)) |
							(1 << (SQLSelectParser.USING_SYMBOL - 113)) |
							(1 << (SQLSelectParser.NATURAL_SYMBOL - 113)) |
							(1 << (SQLSelectParser.INNER_SYMBOL - 113)) |
							(1 << (SQLSelectParser.JOIN_SYMBOL - 113)) |
							(1 << (SQLSelectParser.LEFT_SYMBOL - 113)) |
							(1 << (SQLSelectParser.RIGHT_SYMBOL - 113)) |
							(1 << (SQLSelectParser.OUTER_SYMBOL - 113)) |
							(1 << (SQLSelectParser.CROSS_SYMBOL - 113)) |
							(1 << (SQLSelectParser.LATERAL_SYMBOL - 113)) |
							(1 << (SQLSelectParser.JSON_TABLE_SYMBOL - 113)) |
							(1 << (SQLSelectParser.COLUMNS_SYMBOL - 113)) |
							(1 << (SQLSelectParser.ORDINALITY_SYMBOL - 113)) |
							(1 << (SQLSelectParser.EXISTS_SYMBOL - 113)) |
							(1 << (SQLSelectParser.PATH_SYMBOL - 113)))) !==
						0) ||
				(((_la - 145) & ~0x1f) == 0 &&
					((1 << (_la - 145)) &
						((1 << (SQLSelectParser.NESTED_SYMBOL - 145)) |
							(1 << (SQLSelectParser.EMPTY_SYMBOL - 145)) |
							(1 << (SQLSelectParser.ERROR_SYMBOL - 145)) |
							(1 << (SQLSelectParser.NULL_SYMBOL - 145)) |
							(1 << (SQLSelectParser.USE_SYMBOL - 145)) |
							(1 << (SQLSelectParser.FORCE_SYMBOL - 145)) |
							(1 << (SQLSelectParser.IGNORE_SYMBOL - 145)) |
							(1 << (SQLSelectParser.KEY_SYMBOL - 145)) |
							(1 << (SQLSelectParser.INDEX_SYMBOL - 145)) |
							(1 << (SQLSelectParser.PRIMARY_SYMBOL - 145)) |
							(1 << (SQLSelectParser.IS_SYMBOL - 145)) |
							(1 << (SQLSelectParser.TRUE_SYMBOL - 145)) |
							(1 << (SQLSelectParser.FALSE_SYMBOL - 145)) |
							(1 << (SQLSelectParser.UNKNOWN_SYMBOL - 145)) |
							(1 << (SQLSelectParser.NOT_SYMBOL - 145)) |
							(1 << (SQLSelectParser.XOR_SYMBOL - 145)) |
							(1 << (SQLSelectParser.OR_SYMBOL - 145)) |
							(1 << (SQLSelectParser.ANY_SYMBOL - 145)) |
							(1 << (SQLSelectParser.MEMBER_SYMBOL - 145)) |
							(1 << (SQLSelectParser.SOUNDS_SYMBOL - 145)) |
							(1 << (SQLSelectParser.LIKE_SYMBOL - 145)) |
							(1 << (SQLSelectParser.ESCAPE_SYMBOL - 145)) |
							(1 << (SQLSelectParser.REGEXP_SYMBOL - 145)) |
							(1 << (SQLSelectParser.DIV_SYMBOL - 145)) |
							(1 << (SQLSelectParser.MOD_SYMBOL - 145)) |
							(1 << (SQLSelectParser.MATCH_SYMBOL - 145)) |
							(1 << (SQLSelectParser.AGAINST_SYMBOL - 145)) |
							(1 << (SQLSelectParser.BINARY_SYMBOL - 145)) |
							(1 << (SQLSelectParser.CAST_SYMBOL - 145)) |
							(1 << (SQLSelectParser.ARRAY_SYMBOL - 145)) |
							(1 << (SQLSelectParser.CASE_SYMBOL - 145)) |
							(1 << (SQLSelectParser.END_SYMBOL - 145)))) !==
						0) ||
				(((_la - 177) & ~0x1f) == 0 &&
					((1 << (_la - 177)) &
						((1 << (SQLSelectParser.CONVERT_SYMBOL - 177)) |
							(1 << (SQLSelectParser.COLLATE_SYMBOL - 177)) |
							(1 << (SQLSelectParser.AVG_SYMBOL - 177)) |
							(1 << (SQLSelectParser.BIT_AND_SYMBOL - 177)) |
							(1 << (SQLSelectParser.BIT_OR_SYMBOL - 177)) |
							(1 << (SQLSelectParser.BIT_XOR_SYMBOL - 177)) |
							(1 << (SQLSelectParser.COUNT_SYMBOL - 177)) |
							(1 << (SQLSelectParser.MIN_SYMBOL - 177)) |
							(1 << (SQLSelectParser.MAX_SYMBOL - 177)) |
							(1 << (SQLSelectParser.STD_SYMBOL - 177)) |
							(1 << (SQLSelectParser.VARIANCE_SYMBOL - 177)) |
							(1 << (SQLSelectParser.STDDEV_SAMP_SYMBOL - 177)) |
							(1 << (SQLSelectParser.VAR_SAMP_SYMBOL - 177)) |
							(1 << (SQLSelectParser.SUM_SYMBOL - 177)) |
							(1 << (SQLSelectParser.GROUP_CONCAT_SYMBOL - 177)) |
							(1 << (SQLSelectParser.SEPARATOR_SYMBOL - 177)) |
							(1 << (SQLSelectParser.GROUPING_SYMBOL - 177)) |
							(1 << (SQLSelectParser.ROW_NUMBER_SYMBOL - 177)) |
							(1 << (SQLSelectParser.RANK_SYMBOL - 177)) |
							(1 << (SQLSelectParser.DENSE_RANK_SYMBOL - 177)) |
							(1 << (SQLSelectParser.CUME_DIST_SYMBOL - 177)) |
							(1 << (SQLSelectParser.PERCENT_RANK_SYMBOL - 177)) |
							(1 << (SQLSelectParser.NTILE_SYMBOL - 177)) |
							(1 << (SQLSelectParser.LEAD_SYMBOL - 177)) |
							(1 << (SQLSelectParser.LAG_SYMBOL - 177)) |
							(1 << (SQLSelectParser.FIRST_VALUE_SYMBOL - 177)) |
							(1 << (SQLSelectParser.LAST_VALUE_SYMBOL - 177)) |
							(1 << (SQLSelectParser.NTH_VALUE_SYMBOL - 177)) |
							(1 << (SQLSelectParser.FIRST_SYMBOL - 177)) |
							(1 << (SQLSelectParser.LAST_SYMBOL - 177)) |
							(1 << (SQLSelectParser.OVER_SYMBOL - 177)) |
							(1 << (SQLSelectParser.RESPECT_SYMBOL - 177)))) !==
						0) ||
				(((_la - 209) & ~0x1f) == 0 &&
					((1 << (_la - 209)) &
						((1 << (SQLSelectParser.NULLS_SYMBOL - 209)) |
							(1 << (SQLSelectParser.JSON_ARRAYAGG_SYMBOL - 209)) |
							(1 << (SQLSelectParser.JSON_OBJECTAGG_SYMBOL - 209)) |
							(1 << (SQLSelectParser.BOOLEAN_SYMBOL - 209)) |
							(1 << (SQLSelectParser.LANGUAGE_SYMBOL - 209)) |
							(1 << (SQLSelectParser.QUERY_SYMBOL - 209)) |
							(1 << (SQLSelectParser.EXPANSION_SYMBOL - 209)) |
							(1 << (SQLSelectParser.CHAR_SYMBOL - 209)) |
							(1 << (SQLSelectParser.CURRENT_USER_SYMBOL - 209)) |
							(1 << (SQLSelectParser.DATE_SYMBOL - 209)) |
							(1 << (SQLSelectParser.INSERT_SYMBOL - 209)) |
							(1 << (SQLSelectParser.TIME_SYMBOL - 209)) |
							(1 << (SQLSelectParser.TIMESTAMP_SYMBOL - 209)) |
							(1 << (SQLSelectParser.TIMESTAMP_LTZ_SYMBOL - 209)) |
							(1 << (SQLSelectParser.TIMESTAMP_NTZ_SYMBOL - 209)) |
							(1 << (SQLSelectParser.ZONE_SYMBOL - 209)) |
							(1 << (SQLSelectParser.USER_SYMBOL - 209)) |
							(1 << (SQLSelectParser.ADDDATE_SYMBOL - 209)) |
							(1 << (SQLSelectParser.SUBDATE_SYMBOL - 209)) |
							(1 << (SQLSelectParser.CURDATE_SYMBOL - 209)) |
							(1 << (SQLSelectParser.CURTIME_SYMBOL - 209)) |
							(1 << (SQLSelectParser.DATE_ADD_SYMBOL - 209)) |
							(1 << (SQLSelectParser.DATE_SUB_SYMBOL - 209)) |
							(1 << (SQLSelectParser.EXTRACT_SYMBOL - 209)) |
							(1 << (SQLSelectParser.GET_FORMAT_SYMBOL - 209)) |
							(1 << (SQLSelectParser.NOW_SYMBOL - 209)) |
							(1 << (SQLSelectParser.POSITION_SYMBOL - 209)) |
							(1 << (SQLSelectParser.SYSDATE_SYMBOL - 209)) |
							(1 << (SQLSelectParser.TIMESTAMP_ADD_SYMBOL - 209)) |
							(1 << (SQLSelectParser.TIMESTAMP_DIFF_SYMBOL - 209)) |
							(1 << (SQLSelectParser.UTC_DATE_SYMBOL - 209)) |
							(1 << (SQLSelectParser.UTC_TIME_SYMBOL - 209)))) !==
						0) ||
				(((_la - 241) & ~0x1f) == 0 &&
					((1 << (_la - 241)) &
						((1 << (SQLSelectParser.UTC_TIMESTAMP_SYMBOL - 241)) |
							(1 << (SQLSelectParser.ASCII_SYMBOL - 241)) |
							(1 << (SQLSelectParser.CHARSET_SYMBOL - 241)) |
							(1 << (SQLSelectParser.COALESCE_SYMBOL - 241)) |
							(1 << (SQLSelectParser.COLLATION_SYMBOL - 241)) |
							(1 << (SQLSelectParser.DATABASE_SYMBOL - 241)) |
							(1 << (SQLSelectParser.IF_SYMBOL - 241)) |
							(1 << (SQLSelectParser.FORMAT_SYMBOL - 241)) |
							(1 << (SQLSelectParser.MICROSECOND_SYMBOL - 241)) |
							(1 << (SQLSelectParser.OLD_PASSWORD_SYMBOL - 241)) |
							(1 << (SQLSelectParser.PASSWORD_SYMBOL - 241)) |
							(1 << (SQLSelectParser.REPEAT_SYMBOL - 241)) |
							(1 << (SQLSelectParser.REPLACE_SYMBOL - 241)) |
							(1 << (SQLSelectParser.REVERSE_SYMBOL - 241)) |
							(1 << (SQLSelectParser.ROW_COUNT_SYMBOL - 241)) |
							(1 << (SQLSelectParser.TRUNCATE_SYMBOL - 241)) |
							(1 << (SQLSelectParser.WEIGHT_STRING_SYMBOL - 241)) |
							(1 << (SQLSelectParser.CONTAINS_SYMBOL - 241)) |
							(1 << (SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL - 241)) |
							(1 << (SQLSelectParser.LINESTRING_SYMBOL - 241)) |
							(1 << (SQLSelectParser.MULTILINESTRING_SYMBOL - 241)) |
							(1 << (SQLSelectParser.MULTIPOINT_SYMBOL - 241)) |
							(1 << (SQLSelectParser.MULTIPOLYGON_SYMBOL - 241)) |
							(1 << (SQLSelectParser.POINT_SYMBOL - 241)) |
							(1 << (SQLSelectParser.POLYGON_SYMBOL - 241)) |
							(1 << (SQLSelectParser.LEVEL_SYMBOL - 241)) |
							(1 << (SQLSelectParser.DATETIME_SYMBOL - 241)) |
							(1 << (SQLSelectParser.TRIM_SYMBOL - 241)) |
							(1 << (SQLSelectParser.LEADING_SYMBOL - 241)) |
							(1 << (SQLSelectParser.TRAILING_SYMBOL - 241)) |
							(1 << (SQLSelectParser.BOTH_SYMBOL - 241)) |
							(1 << (SQLSelectParser.STRING_SYMBOL - 241)))) !==
						0) ||
				(((_la - 273) & ~0x1f) == 0 &&
					((1 << (_la - 273)) &
						((1 << (SQLSelectParser.SUBSTRING_SYMBOL - 273)) |
							(1 << (SQLSelectParser.WHEN_SYMBOL - 273)) |
							(1 << (SQLSelectParser.THEN_SYMBOL - 273)) |
							(1 << (SQLSelectParser.ELSE_SYMBOL - 273)) |
							(1 << (SQLSelectParser.SIGNED_SYMBOL - 273)) |
							(1 << (SQLSelectParser.UNSIGNED_SYMBOL - 273)) |
							(1 << (SQLSelectParser.DECIMAL_SYMBOL - 273)) |
							(1 << (SQLSelectParser.JSON_SYMBOL - 273)) |
							(1 << (SQLSelectParser.FLOAT_SYMBOL - 273)) |
							(1 << (SQLSelectParser.FLOAT_SYMBOL_4 - 273)) |
							(1 << (SQLSelectParser.FLOAT_SYMBOL_8 - 273)) |
							(1 << (SQLSelectParser.SET_SYMBOL - 273)) |
							(1 << (SQLSelectParser.SECOND_MICROSECOND_SYMBOL - 273)) |
							(1 << (SQLSelectParser.MINUTE_MICROSECOND_SYMBOL - 273)) |
							(1 << (SQLSelectParser.MINUTE_SECOND_SYMBOL - 273)) |
							(1 << (SQLSelectParser.HOUR_MICROSECOND_SYMBOL - 273)) |
							(1 << (SQLSelectParser.HOUR_SECOND_SYMBOL - 273)) |
							(1 << (SQLSelectParser.HOUR_MINUTE_SYMBOL - 273)) |
							(1 << (SQLSelectParser.DAY_MICROSECOND_SYMBOL - 273)) |
							(1 << (SQLSelectParser.DAY_SECOND_SYMBOL - 273)) |
							(1 << (SQLSelectParser.DAY_MINUTE_SYMBOL - 273)) |
							(1 << (SQLSelectParser.DAY_HOUR_SYMBOL - 273)) |
							(1 << (SQLSelectParser.YEAR_MONTH_SYMBOL - 273)) |
							(1 << (SQLSelectParser.BTREE_SYMBOL - 273)) |
							(1 << (SQLSelectParser.RTREE_SYMBOL - 273)) |
							(1 << (SQLSelectParser.HASH_SYMBOL - 273)) |
							(1 << (SQLSelectParser.REAL_SYMBOL - 273)) |
							(1 << (SQLSelectParser.DOUBLE_SYMBOL - 273)) |
							(1 << (SQLSelectParser.PRECISION_SYMBOL - 273)) |
							(1 << (SQLSelectParser.NUMERIC_SYMBOL - 273)) |
							(1 << (SQLSelectParser.NUMBER_SYMBOL - 273)) |
							(1 << (SQLSelectParser.FIXED_SYMBOL - 273)))) !==
						0) ||
				(((_la - 305) & ~0x1f) == 0 &&
					((1 << (_la - 305)) &
						((1 << (SQLSelectParser.BIT_SYMBOL - 305)) |
							(1 << (SQLSelectParser.BOOL_SYMBOL - 305)) |
							(1 << (SQLSelectParser.VARYING_SYMBOL - 305)) |
							(1 << (SQLSelectParser.VARCHAR_SYMBOL - 305)) |
							(1 << (SQLSelectParser.VARCHAR2_SYMBOL - 305)) |
							(1 << (SQLSelectParser.NATIONAL_SYMBOL - 305)) |
							(1 << (SQLSelectParser.NVARCHAR_SYMBOL - 305)) |
							(1 << (SQLSelectParser.NVARCHAR2_SYMBOL - 305)) |
							(1 << (SQLSelectParser.NCHAR_SYMBOL - 305)) |
							(1 << (SQLSelectParser.VARBINARY_SYMBOL - 305)) |
							(1 << (SQLSelectParser.TINYBLOB_SYMBOL - 305)) |
							(1 << (SQLSelectParser.BLOB_SYMBOL - 305)) |
							(1 << (SQLSelectParser.CLOB_SYMBOL - 305)) |
							(1 << (SQLSelectParser.BFILE_SYMBOL - 305)) |
							(1 << (SQLSelectParser.RAW_SYMBOL - 305)) |
							(1 << (SQLSelectParser.MEDIUMBLOB_SYMBOL - 305)) |
							(1 << (SQLSelectParser.LONGBLOB_SYMBOL - 305)) |
							(1 << (SQLSelectParser.LONG_SYMBOL - 305)) |
							(1 << (SQLSelectParser.TINYTEXT_SYMBOL - 305)) |
							(1 << (SQLSelectParser.TEXT_SYMBOL - 305)) |
							(1 << (SQLSelectParser.MEDIUMTEXT_SYMBOL - 305)) |
							(1 << (SQLSelectParser.LONGTEXT_SYMBOL - 305)) |
							(1 << (SQLSelectParser.ENUM_SYMBOL - 305)) |
							(1 << (SQLSelectParser.SERIAL_SYMBOL - 305)) |
							(1 << (SQLSelectParser.GEOMETRY_SYMBOL - 305)) |
							(1 << (SQLSelectParser.ZEROFILL_SYMBOL - 305)) |
							(1 << (SQLSelectParser.BYTE_SYMBOL - 305)) |
							(1 << (SQLSelectParser.UNICODE_SYMBOL - 305)) |
							(1 << (SQLSelectParser.TERMINATED_SYMBOL - 305)) |
							(1 << (SQLSelectParser.OPTIONALLY_SYMBOL - 305)) |
							(1 << (SQLSelectParser.ENCLOSED_SYMBOL - 305)) |
							(1 << (SQLSelectParser.ESCAPED_SYMBOL - 305)))) !==
						0) ||
				(((_la - 337) & ~0x1f) == 0 &&
					((1 << (_la - 337)) &
						((1 << (SQLSelectParser.LINES_SYMBOL - 337)) |
							(1 << (SQLSelectParser.STARTING_SYMBOL - 337)) |
							(1 << (SQLSelectParser.GLOBAL_SYMBOL - 337)) |
							(1 << (SQLSelectParser.LOCAL_SYMBOL - 337)) |
							(1 << (SQLSelectParser.SESSION_SYMBOL - 337)) |
							(1 << (SQLSelectParser.VARIANT_SYMBOL - 337)) |
							(1 << (SQLSelectParser.OBJECT_SYMBOL - 337)) |
							(1 << (SQLSelectParser.GEOGRAPHY_SYMBOL - 337)) |
							(1 << (SQLSelectParser.UNDERSCORE_CHARSET - 337)) |
							(1 << (SQLSelectParser.IDENTIFIER - 337)) |
							(1 << (SQLSelectParser.BACK_TICK_QUOTED_ID - 337)) |
							(1 << (SQLSelectParser.DOUBLE_QUOTED_TEXT - 337)) |
							(1 << (SQLSelectParser.SINGLE_QUOTED_TEXT - 337)) |
							(1 << (SQLSelectParser.BRACKET_QUOTED_TEXT - 337)) |
							(1 << (SQLSelectParser.CURLY_BRACES_QUOTED_TEXT - 337)))) !==
						0)
			) {
				this.state = 1960;
				this.selectAlias();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	unpivotClause() {
		let localctx = new UnpivotClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 214, SQLSelectParser.RULE_unpivotClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1963;
			this.match(SQLSelectParser.UNPIVOT_SYMBOL);
			this.state = 1964;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 1965;
			this.identifier();
			this.state = 1968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.FOR_SYMBOL) {
				this.state = 1966;
				this.match(SQLSelectParser.FOR_SYMBOL);
				this.state = 1967;
				this.identifier();
			}

			this.state = 1970;
			this.match(SQLSelectParser.IN_SYMBOL);
			this.state = 1971;
			this.identifierListWithParentheses();
			this.state = 1972;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
			this.state = 1976;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.WHERE_SYMBOL) {
				this.state = 1973;
				this.whereClause();
				this.state = 1978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	variable() {
		let localctx = new VariableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 216, SQLSelectParser.RULE_variable);
		try {
			this.state = 1981;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.AT_SIGN_SYMBOL:
				case SQLSelectParser.AT_TEXT_SUFFIX:
					this.enterOuterAlt(localctx, 1);
					this.state = 1979;
					this.userVariable();
					break;
				case SQLSelectParser.AT_AT_SIGN_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 1980;
					this.systemVariable();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	userVariable() {
		let localctx = new UserVariableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 218, SQLSelectParser.RULE_userVariable);
		try {
			this.state = 1986;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.AT_SIGN_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 1983;
					this.match(SQLSelectParser.AT_SIGN_SYMBOL);
					this.state = 1984;
					this.textOrIdentifier();
					break;
				case SQLSelectParser.AT_TEXT_SUFFIX:
					this.enterOuterAlt(localctx, 2);
					this.state = 1985;
					this.match(SQLSelectParser.AT_TEXT_SUFFIX);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	systemVariable() {
		let localctx = new SystemVariableContext(this, this._ctx, this.state);
		this.enterRule(localctx, 220, SQLSelectParser.RULE_systemVariable);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1988;
			this.match(SQLSelectParser.AT_AT_SIGN_SYMBOL);
			this.state = 1990;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 240, this._ctx);
			if (la_ === 1) {
				this.state = 1989;
				this.varIdentType();
			}
			this.state = 1992;
			this.textOrIdentifier();
			this.state = 1994;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 241, this._ctx);
			if (la_ === 1) {
				this.state = 1993;
				this.dotIdentifier();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	whenExpression() {
		let localctx = new WhenExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 222, SQLSelectParser.RULE_whenExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1996;
			this.match(SQLSelectParser.WHEN_SYMBOL);
			this.state = 1997;
			this.expr(0);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	thenExpression() {
		let localctx = new ThenExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 224, SQLSelectParser.RULE_thenExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 1999;
			this.match(SQLSelectParser.THEN_SYMBOL);
			this.state = 2000;
			this.expr(0);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	elseExpression() {
		let localctx = new ElseExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 226, SQLSelectParser.RULE_elseExpression);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2002;
			this.match(SQLSelectParser.ELSE_SYMBOL);
			this.state = 2003;
			this.expr(0);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	exprList() {
		let localctx = new ExprListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 228, SQLSelectParser.RULE_exprList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2005;
			this.expr(0);
			this.state = 2010;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 2006;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 2007;
				this.expr(0);
				this.state = 2012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	charset() {
		let localctx = new CharsetContext(this, this._ctx, this.state);
		this.enterRule(localctx, 230, SQLSelectParser.RULE_charset);
		try {
			this.state = 2016;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.CHAR_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 2013;
					this.match(SQLSelectParser.CHAR_SYMBOL);
					this.state = 2014;
					this.match(SQLSelectParser.SET_SYMBOL);
					break;
				case SQLSelectParser.CHARSET_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 2015;
					this.match(SQLSelectParser.CHARSET_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	notRule() {
		let localctx = new NotRuleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 232, SQLSelectParser.RULE_notRule);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2018;
			this.match(SQLSelectParser.NOT_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	not2Rule() {
		let localctx = new Not2RuleContext(this, this._ctx, this.state);
		this.enterRule(localctx, 234, SQLSelectParser.RULE_not2Rule);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2020;
			this.match(SQLSelectParser.LOGICAL_NOT_OPERATOR);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	interval() {
		let localctx = new IntervalContext(this, this._ctx, this.state);
		this.enterRule(localctx, 236, SQLSelectParser.RULE_interval);
		var _la = 0; // Token type
		try {
			this.state = 2024;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.SECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SYMBOL:
				case SQLSelectParser.HOUR_SYMBOL:
				case SQLSelectParser.DAY_SYMBOL:
				case SQLSelectParser.WEEK_SYMBOL:
				case SQLSelectParser.MONTH_SYMBOL:
				case SQLSelectParser.QUARTER_SYMBOL:
				case SQLSelectParser.YEAR_SYMBOL:
				case SQLSelectParser.MICROSECOND_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 2022;
					this.intervalTimeStamp();
					break;
				case SQLSelectParser.SECOND_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MICROSECOND_SYMBOL:
				case SQLSelectParser.HOUR_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_MICROSECOND_SYMBOL:
				case SQLSelectParser.DAY_SECOND_SYMBOL:
				case SQLSelectParser.DAY_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_HOUR_SYMBOL:
				case SQLSelectParser.YEAR_MONTH_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 2023;
					_la = this._input.LA(1);
					if (
						!(
							((_la - 285) & ~0x1f) == 0 &&
							((1 << (_la - 285)) &
								((1 << (SQLSelectParser.SECOND_MICROSECOND_SYMBOL - 285)) |
									(1 << (SQLSelectParser.MINUTE_MICROSECOND_SYMBOL - 285)) |
									(1 << (SQLSelectParser.MINUTE_SECOND_SYMBOL - 285)) |
									(1 << (SQLSelectParser.HOUR_MICROSECOND_SYMBOL - 285)) |
									(1 << (SQLSelectParser.HOUR_SECOND_SYMBOL - 285)) |
									(1 << (SQLSelectParser.HOUR_MINUTE_SYMBOL - 285)) |
									(1 << (SQLSelectParser.DAY_MICROSECOND_SYMBOL - 285)) |
									(1 << (SQLSelectParser.DAY_SECOND_SYMBOL - 285)) |
									(1 << (SQLSelectParser.DAY_MINUTE_SYMBOL - 285)) |
									(1 << (SQLSelectParser.DAY_HOUR_SYMBOL - 285)) |
									(1 << (SQLSelectParser.YEAR_MONTH_SYMBOL - 285)))) !==
								0
						)
					) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	intervalTimeStamp() {
		let localctx = new IntervalTimeStampContext(this, this._ctx, this.state);
		this.enterRule(localctx, 238, SQLSelectParser.RULE_intervalTimeStamp);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2026;
			_la = this._input.LA(1);
			if (
				!(
					(((_la - 55) & ~0x1f) == 0 &&
						((1 << (_la - 55)) &
							((1 << (SQLSelectParser.SECOND_SYMBOL - 55)) |
								(1 << (SQLSelectParser.MINUTE_SYMBOL - 55)) |
								(1 << (SQLSelectParser.HOUR_SYMBOL - 55)) |
								(1 << (SQLSelectParser.DAY_SYMBOL - 55)) |
								(1 << (SQLSelectParser.WEEK_SYMBOL - 55)) |
								(1 << (SQLSelectParser.MONTH_SYMBOL - 55)) |
								(1 << (SQLSelectParser.QUARTER_SYMBOL - 55)) |
								(1 << (SQLSelectParser.YEAR_SYMBOL - 55)))) !==
							0) ||
					_la === SQLSelectParser.MICROSECOND_SYMBOL
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	exprListWithParentheses() {
		let localctx = new ExprListWithParenthesesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 240, SQLSelectParser.RULE_exprListWithParentheses);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2028;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2029;
			this.exprList();
			this.state = 2030;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	exprWithParentheses() {
		let localctx = new ExprWithParenthesesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 242, SQLSelectParser.RULE_exprWithParentheses);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2032;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2033;
			this.expr(0);
			this.state = 2034;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	simpleExprWithParentheses() {
		let localctx = new SimpleExprWithParenthesesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 244, SQLSelectParser.RULE_simpleExprWithParentheses);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2036;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2037;
			this.simpleExpr(0);
			this.state = 2038;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	orderList() {
		let localctx = new OrderListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 246, SQLSelectParser.RULE_orderList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2040;
			this.orderExpression();
			this.state = 2045;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 2041;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 2042;
				this.orderExpression();
				this.state = 2047;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	nullsOrder() {
		let localctx = new NullsOrderContext(this, this._ctx, this.state);
		this.enterRule(localctx, 248, SQLSelectParser.RULE_nullsOrder);
		try {
			this.state = 2052;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 246, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 2048;
					this.match(SQLSelectParser.NULLS_SYMBOL);
					this.state = 2049;
					this.match(SQLSelectParser.FIRST_SYMBOL);
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 2050;
					this.match(SQLSelectParser.NULLS_SYMBOL);
					this.state = 2051;
					this.match(SQLSelectParser.LAST_SYMBOL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	orderExpression() {
		let localctx = new OrderExpressionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 250, SQLSelectParser.RULE_orderExpression);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2054;
			this.expr(0);
			this.state = 2056;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.ASC_SYMBOL || _la === SQLSelectParser.DESC_SYMBOL) {
				this.state = 2055;
				this.direction();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	indexType() {
		let localctx = new IndexTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 252, SQLSelectParser.RULE_indexType);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2058;
			_la = this._input.LA(1);
			if (
				!(
					((_la - 296) & ~0x1f) == 0 &&
					((1 << (_la - 296)) &
						((1 << (SQLSelectParser.BTREE_SYMBOL - 296)) |
							(1 << (SQLSelectParser.RTREE_SYMBOL - 296)) |
							(1 << (SQLSelectParser.HASH_SYMBOL - 296)))) !==
						0
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	dataType() {
		let localctx = new DataTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 254, SQLSelectParser.RULE_dataType);
		var _la = 0; // Token type
		try {
			this.state = 2269;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 289, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 2060;
					_la = this._input.LA(1);
					if (
						!(
							(((_la - 49) & ~0x1f) == 0 &&
								((1 << (_la - 49)) &
									((1 << (SQLSelectParser.TINYINT_SYMBOL - 49)) |
										(1 << (SQLSelectParser.SMALLINT_SYMBOL - 49)) |
										(1 << (SQLSelectParser.MEDIUMINT_SYMBOL - 49)) |
										(1 << (SQLSelectParser.BYTE_INT_SYMBOL - 49)) |
										(1 << (SQLSelectParser.INT_SYMBOL - 49)) |
										(1 << (SQLSelectParser.BIGINT_SYMBOL - 49)))) !==
									0) ||
							(((_la - 279) & ~0x1f) == 0 &&
								((1 << (_la - 279)) &
									((1 << (SQLSelectParser.DECIMAL_SYMBOL - 279)) |
										(1 << (SQLSelectParser.NUMERIC_SYMBOL - 279)) |
										(1 << (SQLSelectParser.NUMBER_SYMBOL - 279)))) !==
									0)
						)
					) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2062;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 248, this._ctx);
					if (la_ === 1) {
						this.state = 2061;
						this.fieldLength();
					}
					this.state = 2065;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 249, this._ctx);
					if (la_ === 1) {
						this.state = 2064;
						this.fieldOptions();
					}
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 2072;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLSelectParser.REAL_SYMBOL:
							this.state = 2067;
							this.match(SQLSelectParser.REAL_SYMBOL);
							break;
						case SQLSelectParser.DOUBLE_SYMBOL:
							this.state = 2068;
							this.match(SQLSelectParser.DOUBLE_SYMBOL);
							this.state = 2070;
							this._errHandler.sync(this);
							var la_ = this._interp.adaptivePredict(this._input, 250, this._ctx);
							if (la_ === 1) {
								this.state = 2069;
								this.match(SQLSelectParser.PRECISION_SYMBOL);
							}
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					this.state = 2075;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 252, this._ctx);
					if (la_ === 1) {
						this.state = 2074;
						this.precision();
					}
					this.state = 2078;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 253, this._ctx);
					if (la_ === 1) {
						this.state = 2077;
						this.fieldOptions();
					}
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 2080;
					_la = this._input.LA(1);
					if (
						!(
							((_la - 279) & ~0x1f) == 0 &&
							((1 << (_la - 279)) &
								((1 << (SQLSelectParser.DECIMAL_SYMBOL - 279)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL - 279)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL_4 - 279)) |
									(1 << (SQLSelectParser.FLOAT_SYMBOL_8 - 279)) |
									(1 << (SQLSelectParser.NUMERIC_SYMBOL - 279)) |
									(1 << (SQLSelectParser.FIXED_SYMBOL - 279)))) !==
								0
						)
					) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2082;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 254, this._ctx);
					if (la_ === 1) {
						this.state = 2081;
						this.floatOptions();
					}
					this.state = 2085;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 255, this._ctx);
					if (la_ === 1) {
						this.state = 2084;
						this.fieldOptions();
					}
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 2087;
					this.match(SQLSelectParser.BIT_SYMBOL);
					this.state = 2089;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 256, this._ctx);
					if (la_ === 1) {
						this.state = 2088;
						this.fieldLength();
					}
					break;

				case 5:
					this.enterOuterAlt(localctx, 5);
					this.state = 2091;
					_la = this._input.LA(1);
					if (!(_la === SQLSelectParser.BOOLEAN_SYMBOL || _la === SQLSelectParser.BOOL_SYMBOL)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					break;

				case 6:
					this.enterOuterAlt(localctx, 6);
					this.state = 2092;
					this.nchar();
					this.state = 2094;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 257, this._ctx);
					if (la_ === 1) {
						this.state = 2093;
						this.fieldLength();
					}
					this.state = 2097;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 258, this._ctx);
					if (la_ === 1) {
						this.state = 2096;
						this.match(SQLSelectParser.BINARY_SYMBOL);
					}
					break;

				case 7:
					this.enterOuterAlt(localctx, 7);
					this.state = 2099;
					this.match(SQLSelectParser.BINARY_SYMBOL);
					this.state = 2101;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 259, this._ctx);
					if (la_ === 1) {
						this.state = 2100;
						this.fieldLength();
					}
					break;

				case 8:
					this.enterOuterAlt(localctx, 8);
					this.state = 2103;
					this.match(SQLSelectParser.CHAR_SYMBOL);
					this.state = 2104;
					this.match(SQLSelectParser.VARYING_SYMBOL);
					break;

				case 9:
					this.enterOuterAlt(localctx, 9);
					this.state = 2105;
					_la = this._input.LA(1);
					if (
						!(
							_la === SQLSelectParser.CHAR_SYMBOL ||
							_la === SQLSelectParser.STRING_SYMBOL ||
							(((_la - 308) & ~0x1f) == 0 &&
								((1 << (_la - 308)) &
									((1 << (SQLSelectParser.VARCHAR_SYMBOL - 308)) |
										(1 << (SQLSelectParser.VARCHAR2_SYMBOL - 308)) |
										(1 << (SQLSelectParser.TEXT_SYMBOL - 308)))) !==
									0)
						)
					) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2106;
					this.fieldLength();
					this.state = 2108;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 260, this._ctx);
					if (la_ === 1) {
						this.state = 2107;
						this.charsetWithOptBinary();
					}
					break;

				case 10:
					this.enterOuterAlt(localctx, 10);
					this.state = 2123;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 261, this._ctx);
					switch (la_) {
						case 1:
							this.state = 2110;
							this.match(SQLSelectParser.NATIONAL_SYMBOL);
							this.state = 2111;
							this.match(SQLSelectParser.VARCHAR_SYMBOL);
							break;

						case 2:
							this.state = 2112;
							this.match(SQLSelectParser.NVARCHAR2_SYMBOL);
							break;

						case 3:
							this.state = 2113;
							this.match(SQLSelectParser.NVARCHAR_SYMBOL);
							break;

						case 4:
							this.state = 2114;
							this.match(SQLSelectParser.NCHAR_SYMBOL);
							this.state = 2115;
							this.match(SQLSelectParser.VARCHAR2_SYMBOL);
							break;

						case 5:
							this.state = 2116;
							this.match(SQLSelectParser.NCHAR_SYMBOL);
							this.state = 2117;
							this.match(SQLSelectParser.VARCHAR_SYMBOL);
							break;

						case 6:
							this.state = 2118;
							this.match(SQLSelectParser.NATIONAL_SYMBOL);
							this.state = 2119;
							this.match(SQLSelectParser.CHAR_SYMBOL);
							this.state = 2120;
							this.match(SQLSelectParser.VARYING_SYMBOL);
							break;

						case 7:
							this.state = 2121;
							this.match(SQLSelectParser.NCHAR_SYMBOL);
							this.state = 2122;
							this.match(SQLSelectParser.VARYING_SYMBOL);
							break;
					}
					this.state = 2125;
					this.fieldLength();
					this.state = 2127;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 262, this._ctx);
					if (la_ === 1) {
						this.state = 2126;
						this.match(SQLSelectParser.BINARY_SYMBOL);
					}
					break;

				case 11:
					this.enterOuterAlt(localctx, 11);
					this.state = 2129;
					this.match(SQLSelectParser.VARBINARY_SYMBOL);
					this.state = 2130;
					this.fieldLength();
					break;

				case 12:
					this.enterOuterAlt(localctx, 12);
					this.state = 2131;
					this.match(SQLSelectParser.YEAR_SYMBOL);
					this.state = 2133;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 263, this._ctx);
					if (la_ === 1) {
						this.state = 2132;
						this.fieldLength();
					}
					this.state = 2136;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 264, this._ctx);
					if (la_ === 1) {
						this.state = 2135;
						this.fieldOptions();
					}
					break;

				case 13:
					this.enterOuterAlt(localctx, 13);
					this.state = 2138;
					this.match(SQLSelectParser.DATE_SYMBOL);
					break;

				case 14:
					this.enterOuterAlt(localctx, 14);
					this.state = 2139;
					this.match(SQLSelectParser.TIME_SYMBOL);
					this.state = 2141;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 265, this._ctx);
					if (la_ === 1) {
						this.state = 2140;
						this.typeDatetimePrecision();
					}
					break;

				case 15:
					this.enterOuterAlt(localctx, 15);
					this.state = 2143;
					this.match(SQLSelectParser.TIMESTAMP_SYMBOL);
					this.state = 2145;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 266, this._ctx);
					if (la_ === 1) {
						this.state = 2144;
						this.typeDatetimePrecision();
					}
					break;

				case 16:
					this.enterOuterAlt(localctx, 16);
					this.state = 2147;
					this.match(SQLSelectParser.TIMESTAMP_NTZ_SYMBOL);
					this.state = 2149;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 267, this._ctx);
					if (la_ === 1) {
						this.state = 2148;
						this.typeDatetimePrecision();
					}
					break;

				case 17:
					this.enterOuterAlt(localctx, 17);
					this.state = 2151;
					this.match(SQLSelectParser.TIMESTAMP_LTZ_SYMBOL);
					this.state = 2153;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 268, this._ctx);
					if (la_ === 1) {
						this.state = 2152;
						this.typeDatetimePrecision();
					}
					break;

				case 18:
					this.enterOuterAlt(localctx, 18);
					this.state = 2155;
					this.match(SQLSelectParser.TIMESTAMP_SYMBOL);
					this.state = 2156;
					this.match(SQLSelectParser.WITH_SYMBOL);
					this.state = 2157;
					this.match(SQLSelectParser.LOCAL_SYMBOL);
					this.state = 2158;
					this.match(SQLSelectParser.TIME_SYMBOL);
					this.state = 2159;
					this.match(SQLSelectParser.ZONE_SYMBOL);
					this.state = 2161;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 269, this._ctx);
					if (la_ === 1) {
						this.state = 2160;
						this.typeDatetimePrecision();
					}
					break;

				case 19:
					this.enterOuterAlt(localctx, 19);
					this.state = 2163;
					this.match(SQLSelectParser.TIMESTAMP_SYMBOL);
					this.state = 2164;
					this.match(SQLSelectParser.WITHOUT_SYMBOL);
					this.state = 2165;
					this.match(SQLSelectParser.LOCAL_SYMBOL);
					this.state = 2166;
					this.match(SQLSelectParser.TIME_SYMBOL);
					this.state = 2167;
					this.match(SQLSelectParser.ZONE_SYMBOL);
					this.state = 2169;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 270, this._ctx);
					if (la_ === 1) {
						this.state = 2168;
						this.typeDatetimePrecision();
					}
					break;

				case 20:
					this.enterOuterAlt(localctx, 20);
					this.state = 2171;
					this.match(SQLSelectParser.TIMESTAMP_SYMBOL);
					this.state = 2172;
					this.match(SQLSelectParser.WITH_SYMBOL);
					this.state = 2173;
					this.match(SQLSelectParser.TIME_SYMBOL);
					this.state = 2174;
					this.match(SQLSelectParser.ZONE_SYMBOL);
					this.state = 2176;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 271, this._ctx);
					if (la_ === 1) {
						this.state = 2175;
						this.typeDatetimePrecision();
					}
					break;

				case 21:
					this.enterOuterAlt(localctx, 21);
					this.state = 2178;
					this.match(SQLSelectParser.DATETIME_SYMBOL);
					this.state = 2180;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 272, this._ctx);
					if (la_ === 1) {
						this.state = 2179;
						this.typeDatetimePrecision();
					}
					break;

				case 22:
					this.enterOuterAlt(localctx, 22);
					this.state = 2182;
					this.match(SQLSelectParser.TINYBLOB_SYMBOL);
					break;

				case 23:
					this.enterOuterAlt(localctx, 23);
					this.state = 2189;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLSelectParser.BLOB_SYMBOL:
							this.state = 2183;
							this.match(SQLSelectParser.BLOB_SYMBOL);
							break;
						case SQLSelectParser.CLOB_SYMBOL:
							this.state = 2184;
							this.match(SQLSelectParser.CLOB_SYMBOL);
							break;
						case SQLSelectParser.BFILE_SYMBOL:
							this.state = 2185;
							this.match(SQLSelectParser.BFILE_SYMBOL);
							break;
						case SQLSelectParser.LONG_SYMBOL:
							this.state = 2186;
							this.match(SQLSelectParser.LONG_SYMBOL);
							this.state = 2187;
							this.match(SQLSelectParser.RAW_SYMBOL);
							break;
						case SQLSelectParser.RAW_SYMBOL:
							this.state = 2188;
							this.match(SQLSelectParser.RAW_SYMBOL);
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
					this.state = 2192;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 274, this._ctx);
					if (la_ === 1) {
						this.state = 2191;
						this.fieldLength();
					}
					break;

				case 24:
					this.enterOuterAlt(localctx, 24);
					this.state = 2194;
					_la = this._input.LA(1);
					if (!(_la === SQLSelectParser.MEDIUMBLOB_SYMBOL || _la === SQLSelectParser.LONGBLOB_SYMBOL)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					break;

				case 25:
					this.enterOuterAlt(localctx, 25);
					this.state = 2195;
					this.match(SQLSelectParser.LONG_SYMBOL);
					this.state = 2196;
					this.match(SQLSelectParser.VARBINARY_SYMBOL);
					break;

				case 26:
					this.enterOuterAlt(localctx, 26);
					this.state = 2197;
					this.match(SQLSelectParser.LONG_SYMBOL);
					this.state = 2202;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 275, this._ctx);
					if (la_ === 1) {
						this.state = 2198;
						this.match(SQLSelectParser.CHAR_SYMBOL);
						this.state = 2199;
						this.match(SQLSelectParser.VARYING_SYMBOL);
					} else if (la_ === 2) {
						this.state = 2200;
						this.match(SQLSelectParser.VARCHAR_SYMBOL);
					} else if (la_ === 3) {
						this.state = 2201;
						this.match(SQLSelectParser.VARCHAR2_SYMBOL);
					}
					this.state = 2205;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 276, this._ctx);
					if (la_ === 1) {
						this.state = 2204;
						this.charsetWithOptBinary();
					}
					break;

				case 27:
					this.enterOuterAlt(localctx, 27);
					this.state = 2207;
					this.match(SQLSelectParser.TINYTEXT_SYMBOL);
					this.state = 2209;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 277, this._ctx);
					if (la_ === 1) {
						this.state = 2208;
						this.charsetWithOptBinary();
					}
					break;

				case 28:
					this.enterOuterAlt(localctx, 28);
					this.state = 2211;
					this.match(SQLSelectParser.TEXT_SYMBOL);
					this.state = 2213;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 278, this._ctx);
					if (la_ === 1) {
						this.state = 2212;
						this.fieldLength();
					}
					this.state = 2216;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 279, this._ctx);
					if (la_ === 1) {
						this.state = 2215;
						this.charsetWithOptBinary();
					}
					break;

				case 29:
					this.enterOuterAlt(localctx, 29);
					this.state = 2218;
					this.match(SQLSelectParser.MEDIUMTEXT_SYMBOL);
					this.state = 2220;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 280, this._ctx);
					if (la_ === 1) {
						this.state = 2219;
						this.charsetWithOptBinary();
					}
					break;

				case 30:
					this.enterOuterAlt(localctx, 30);
					this.state = 2222;
					this.match(SQLSelectParser.LONGTEXT_SYMBOL);
					this.state = 2224;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 281, this._ctx);
					if (la_ === 1) {
						this.state = 2223;
						this.charsetWithOptBinary();
					}
					break;

				case 31:
					this.enterOuterAlt(localctx, 31);
					this.state = 2226;
					this.match(SQLSelectParser.ENUM_SYMBOL);
					this.state = 2227;
					this.stringList();
					this.state = 2229;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 282, this._ctx);
					if (la_ === 1) {
						this.state = 2228;
						this.charsetWithOptBinary();
					}
					break;

				case 32:
					this.enterOuterAlt(localctx, 32);
					this.state = 2231;
					this.match(SQLSelectParser.SET_SYMBOL);
					this.state = 2232;
					this.stringList();
					this.state = 2234;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 283, this._ctx);
					if (la_ === 1) {
						this.state = 2233;
						this.charsetWithOptBinary();
					}
					break;

				case 33:
					this.enterOuterAlt(localctx, 33);
					this.state = 2236;
					this.match(SQLSelectParser.SERIAL_SYMBOL);
					break;

				case 34:
					this.enterOuterAlt(localctx, 34);
					this.state = 2237;
					this.match(SQLSelectParser.JSON_SYMBOL);
					break;

				case 35:
					this.enterOuterAlt(localctx, 35);
					this.state = 2238;
					_la = this._input.LA(1);
					if (
						!(
							(((_la - 259) & ~0x1f) == 0 &&
								((1 << (_la - 259)) &
									((1 << (SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL - 259)) |
										(1 << (SQLSelectParser.LINESTRING_SYMBOL - 259)) |
										(1 << (SQLSelectParser.MULTILINESTRING_SYMBOL - 259)) |
										(1 << (SQLSelectParser.MULTIPOINT_SYMBOL - 259)) |
										(1 << (SQLSelectParser.MULTIPOLYGON_SYMBOL - 259)) |
										(1 << (SQLSelectParser.POINT_SYMBOL - 259)) |
										(1 << (SQLSelectParser.POLYGON_SYMBOL - 259)))) !==
									0) ||
							_la === SQLSelectParser.GEOMETRY_SYMBOL
						)
					) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					break;

				case 36:
					this.enterOuterAlt(localctx, 36);
					this.state = 2239;
					this.match(SQLSelectParser.GEOGRAPHY_SYMBOL);
					break;

				case 37:
					this.enterOuterAlt(localctx, 37);
					this.state = 2240;
					this.match(SQLSelectParser.VARIANT_SYMBOL);
					break;

				case 38:
					this.enterOuterAlt(localctx, 38);
					this.state = 2241;
					this.match(SQLSelectParser.OBJECT_SYMBOL);
					break;

				case 39:
					this.enterOuterAlt(localctx, 39);
					this.state = 2242;
					this.match(SQLSelectParser.ARRAY_SYMBOL);
					break;

				case 40:
					this.enterOuterAlt(localctx, 40);
					this.state = 2243;
					this.match(SQLSelectParser.ENUM_SYMBOL);
					this.state = 2252;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 285, this._ctx);
					if (la_ === 1) {
						this.state = 2244;
						this.expr(0);
						this.state = 2249;
						this._errHandler.sync(this);
						var _alt = this._interp.adaptivePredict(this._input, 284, this._ctx);
						while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								this.state = 2245;
								this.match(SQLSelectParser.COMMA_SYMBOL);
								this.state = 2246;
								this.expr(0);
							}
							this.state = 2251;
							this._errHandler.sync(this);
							_alt = this._interp.adaptivePredict(this._input, 284, this._ctx);
						}
					}
					break;

				case 41:
					this.enterOuterAlt(localctx, 41);
					this.state = 2254;
					this.match(SQLSelectParser.SET_SYMBOL);
					this.state = 2263;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 287, this._ctx);
					if (la_ === 1) {
						this.state = 2255;
						this.expr(0);
						this.state = 2260;
						this._errHandler.sync(this);
						var _alt = this._interp.adaptivePredict(this._input, 286, this._ctx);
						while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
							if (_alt === 1) {
								this.state = 2256;
								this.match(SQLSelectParser.COMMA_SYMBOL);
								this.state = 2257;
								this.expr(0);
							}
							this.state = 2262;
							this._errHandler.sync(this);
							_alt = this._interp.adaptivePredict(this._input, 286, this._ctx);
						}
					}
					break;

				case 42:
					this.enterOuterAlt(localctx, 42);
					this.state = 2265;
					this.identifier();
					this.state = 2267;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 288, this._ctx);
					if (la_ === 1) {
						this.state = 2266;
						this.precision();
					}
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	nchar() {
		let localctx = new NcharContext(this, this._ctx, this.state);
		this.enterRule(localctx, 256, SQLSelectParser.RULE_nchar);
		try {
			this.state = 2274;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.NCHAR_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 2271;
					this.match(SQLSelectParser.NCHAR_SYMBOL);
					break;
				case SQLSelectParser.NATIONAL_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 2272;
					this.match(SQLSelectParser.NATIONAL_SYMBOL);
					this.state = 2273;
					this.match(SQLSelectParser.CHAR_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	fieldLength() {
		let localctx = new FieldLengthContext(this, this._ctx, this.state);
		this.enterRule(localctx, 258, SQLSelectParser.RULE_fieldLength);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2276;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2279;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.HEX_NUMBER:
				case SQLSelectParser.INT_NUMBER:
					this.state = 2277;
					this.real_ulonglong_number();
					break;
				case SQLSelectParser.DECIMAL_NUMBER:
					this.state = 2278;
					this.match(SQLSelectParser.DECIMAL_NUMBER);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 2282;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === SQLSelectParser.CHAR_SYMBOL) {
				this.state = 2281;
				this.match(SQLSelectParser.CHAR_SYMBOL);
			}

			this.state = 2284;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	fieldOptions() {
		let localctx = new FieldOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 260, SQLSelectParser.RULE_fieldOptions);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2287;
			this._errHandler.sync(this);
			var _alt = 1;
			do {
				switch (_alt) {
					case 1:
						this.state = 2286;
						_la = this._input.LA(1);
						if (
							!(
								_la === SQLSelectParser.SIGNED_SYMBOL ||
								_la === SQLSelectParser.UNSIGNED_SYMBOL ||
								_la === SQLSelectParser.ZEROFILL_SYMBOL
							)
						) {
							this._errHandler.recoverInline(this);
						} else {
							this._errHandler.reportMatch(this);
							this.consume();
						}
						break;
					default:
						throw new antlr4.error.NoViableAltException(this);
				}
				this.state = 2289;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 293, this._ctx);
			} while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	charsetWithOptBinary() {
		let localctx = new CharsetWithOptBinaryContext(this, this._ctx, this.state);
		this.enterRule(localctx, 262, SQLSelectParser.RULE_charsetWithOptBinary);
		try {
			this.state = 2305;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 296, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 2291;
					this.ascii();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 2292;
					this.unicode();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 2293;
					this.match(SQLSelectParser.BYTE_SYMBOL);
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 2294;
					this.charset();
					this.state = 2295;
					this.charsetName();
					this.state = 2297;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 294, this._ctx);
					if (la_ === 1) {
						this.state = 2296;
						this.match(SQLSelectParser.BINARY_SYMBOL);
					}
					break;

				case 5:
					this.enterOuterAlt(localctx, 5);
					this.state = 2299;
					this.match(SQLSelectParser.BINARY_SYMBOL);
					this.state = 2303;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 295, this._ctx);
					if (la_ === 1) {
						this.state = 2300;
						this.charset();
						this.state = 2301;
						this.charsetName();
					}
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	ascii() {
		let localctx = new AsciiContext(this, this._ctx, this.state);
		this.enterRule(localctx, 264, SQLSelectParser.RULE_ascii);
		try {
			this.state = 2313;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.ASCII_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 2307;
					this.match(SQLSelectParser.ASCII_SYMBOL);
					this.state = 2309;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 297, this._ctx);
					if (la_ === 1) {
						this.state = 2308;
						this.match(SQLSelectParser.BINARY_SYMBOL);
					}
					break;
				case SQLSelectParser.BINARY_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 2311;
					this.match(SQLSelectParser.BINARY_SYMBOL);
					this.state = 2312;
					this.match(SQLSelectParser.ASCII_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	unicode() {
		let localctx = new UnicodeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 266, SQLSelectParser.RULE_unicode);
		try {
			this.state = 2321;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.UNICODE_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 2315;
					this.match(SQLSelectParser.UNICODE_SYMBOL);
					this.state = 2317;
					this._errHandler.sync(this);
					var la_ = this._interp.adaptivePredict(this._input, 299, this._ctx);
					if (la_ === 1) {
						this.state = 2316;
						this.match(SQLSelectParser.BINARY_SYMBOL);
					}
					break;
				case SQLSelectParser.BINARY_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 2319;
					this.match(SQLSelectParser.BINARY_SYMBOL);
					this.state = 2320;
					this.match(SQLSelectParser.UNICODE_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	wsNumCodepoints() {
		let localctx = new WsNumCodepointsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 268, SQLSelectParser.RULE_wsNumCodepoints);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2323;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2324;
			this.real_ulong_number();
			this.state = 2325;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	typeDatetimePrecision() {
		let localctx = new TypeDatetimePrecisionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 270, SQLSelectParser.RULE_typeDatetimePrecision);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2327;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2328;
			this.match(SQLSelectParser.INT_NUMBER);
			this.state = 2329;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	charsetName() {
		let localctx = new CharsetNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 272, SQLSelectParser.RULE_charsetName);
		try {
			this.state = 2334;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 301, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 2331;
					this.textOrIdentifier();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 2332;
					this.match(SQLSelectParser.BINARY_SYMBOL);
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 2333;
					this.match(SQLSelectParser.DEFAULT_SYMBOL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	collationName() {
		let localctx = new CollationNameContext(this, this._ctx, this.state);
		this.enterRule(localctx, 274, SQLSelectParser.RULE_collationName);
		try {
			this.state = 2339;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 302, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 2336;
					this.textOrIdentifier();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 2337;
					this.match(SQLSelectParser.DEFAULT_SYMBOL);
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 2338;
					this.match(SQLSelectParser.BINARY_SYMBOL);
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	collate() {
		let localctx = new CollateContext(this, this._ctx, this.state);
		this.enterRule(localctx, 276, SQLSelectParser.RULE_collate);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2341;
			this.match(SQLSelectParser.COLLATE_SYMBOL);
			this.state = 2342;
			this.collationName();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	charsetClause() {
		let localctx = new CharsetClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 278, SQLSelectParser.RULE_charsetClause);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2344;
			this.charset();
			this.state = 2345;
			this.charsetName();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	fieldsClause() {
		let localctx = new FieldsClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 280, SQLSelectParser.RULE_fieldsClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2347;
			this.match(SQLSelectParser.COLUMNS_SYMBOL);
			this.state = 2349;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				this.state = 2348;
				this.fieldTerm();
				this.state = 2351;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (
				((_la - 333) & ~0x1f) == 0 &&
				((1 << (_la - 333)) &
					((1 << (SQLSelectParser.TERMINATED_SYMBOL - 333)) |
						(1 << (SQLSelectParser.OPTIONALLY_SYMBOL - 333)) |
						(1 << (SQLSelectParser.ENCLOSED_SYMBOL - 333)) |
						(1 << (SQLSelectParser.ESCAPED_SYMBOL - 333)))) !==
					0
			);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	fieldTerm() {
		let localctx = new FieldTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 282, SQLSelectParser.RULE_fieldTerm);
		var _la = 0; // Token type
		try {
			this.state = 2365;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.TERMINATED_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 2353;
					this.match(SQLSelectParser.TERMINATED_SYMBOL);
					this.state = 2354;
					this.match(SQLSelectParser.BY_SYMBOL);
					this.state = 2355;
					this.textString();
					break;
				case SQLSelectParser.OPTIONALLY_SYMBOL:
				case SQLSelectParser.ENCLOSED_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 2357;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.OPTIONALLY_SYMBOL) {
						this.state = 2356;
						this.match(SQLSelectParser.OPTIONALLY_SYMBOL);
					}

					this.state = 2359;
					this.match(SQLSelectParser.ENCLOSED_SYMBOL);
					this.state = 2360;
					this.match(SQLSelectParser.BY_SYMBOL);
					this.state = 2361;
					this.textString();
					break;
				case SQLSelectParser.ESCAPED_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 2362;
					this.match(SQLSelectParser.ESCAPED_SYMBOL);
					this.state = 2363;
					this.match(SQLSelectParser.BY_SYMBOL);
					this.state = 2364;
					this.textString();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	linesClause() {
		let localctx = new LinesClauseContext(this, this._ctx, this.state);
		this.enterRule(localctx, 284, SQLSelectParser.RULE_linesClause);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2367;
			this.match(SQLSelectParser.LINES_SYMBOL);
			this.state = 2369;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				this.state = 2368;
				this.lineTerm();
				this.state = 2371;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === SQLSelectParser.TERMINATED_SYMBOL || _la === SQLSelectParser.STARTING_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	lineTerm() {
		let localctx = new LineTermContext(this, this._ctx, this.state);
		this.enterRule(localctx, 286, SQLSelectParser.RULE_lineTerm);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2373;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.TERMINATED_SYMBOL || _la === SQLSelectParser.STARTING_SYMBOL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2374;
			this.match(SQLSelectParser.BY_SYMBOL);
			this.state = 2375;
			this.textString();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	usePartition() {
		let localctx = new UsePartitionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 288, SQLSelectParser.RULE_usePartition);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2377;
			this.match(SQLSelectParser.PARTITION_SYMBOL);
			this.state = 2378;
			this.identifierListWithParentheses();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	columnInternalRefList() {
		let localctx = new ColumnInternalRefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 290, SQLSelectParser.RULE_columnInternalRefList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2380;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2381;
			this.identifier();
			this.state = 2386;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 2382;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 2383;
				this.identifier();
				this.state = 2388;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2389;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	tableAliasRefList() {
		let localctx = new TableAliasRefListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 292, SQLSelectParser.RULE_tableAliasRefList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2391;
			this.qualifiedIdentifier();
			this.state = 2396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 2392;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 2393;
				this.qualifiedIdentifier();
				this.state = 2398;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	pureIdentifier() {
		let localctx = new PureIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 294, SQLSelectParser.RULE_pureIdentifier);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2399;
			_la = this._input.LA(1);
			if (
				!(
					((_la - 348) & ~0x1f) == 0 &&
					((1 << (_la - 348)) &
						((1 << (SQLSelectParser.UNDERSCORE_CHARSET - 348)) |
							(1 << (SQLSelectParser.IDENTIFIER - 348)) |
							(1 << (SQLSelectParser.BACK_TICK_QUOTED_ID - 348)) |
							(1 << (SQLSelectParser.DOUBLE_QUOTED_TEXT - 348)) |
							(1 << (SQLSelectParser.SINGLE_QUOTED_TEXT - 348)) |
							(1 << (SQLSelectParser.BRACKET_QUOTED_TEXT - 348)) |
							(1 << (SQLSelectParser.CURLY_BRACES_QUOTED_TEXT - 348)))) !==
						0
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	identifier() {
		let localctx = new IdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 296, SQLSelectParser.RULE_identifier);
		try {
			this.state = 2403;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.UNDERSCORE_CHARSET:
				case SQLSelectParser.IDENTIFIER:
				case SQLSelectParser.BACK_TICK_QUOTED_ID:
				case SQLSelectParser.DOUBLE_QUOTED_TEXT:
				case SQLSelectParser.SINGLE_QUOTED_TEXT:
				case SQLSelectParser.BRACKET_QUOTED_TEXT:
				case SQLSelectParser.CURLY_BRACES_QUOTED_TEXT:
					this.enterOuterAlt(localctx, 1);
					this.state = 2401;
					this.pureIdentifier();
					break;
				case SQLSelectParser.TINYINT_SYMBOL:
				case SQLSelectParser.SMALLINT_SYMBOL:
				case SQLSelectParser.MEDIUMINT_SYMBOL:
				case SQLSelectParser.BYTE_INT_SYMBOL:
				case SQLSelectParser.INT_SYMBOL:
				case SQLSelectParser.BIGINT_SYMBOL:
				case SQLSelectParser.SECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SYMBOL:
				case SQLSelectParser.HOUR_SYMBOL:
				case SQLSelectParser.DAY_SYMBOL:
				case SQLSelectParser.WEEK_SYMBOL:
				case SQLSelectParser.MONTH_SYMBOL:
				case SQLSelectParser.QUARTER_SYMBOL:
				case SQLSelectParser.YEAR_SYMBOL:
				case SQLSelectParser.DEFAULT_SYMBOL:
				case SQLSelectParser.UNION_SYMBOL:
				case SQLSelectParser.SELECT_SYMBOL:
				case SQLSelectParser.ALL_SYMBOL:
				case SQLSelectParser.DISTINCT_SYMBOL:
				case SQLSelectParser.STRAIGHT_JOIN_SYMBOL:
				case SQLSelectParser.HIGH_PRIORITY_SYMBOL:
				case SQLSelectParser.SQL_SMALL_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BIG_RESULT_SYMBOL:
				case SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL:
				case SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL:
				case SQLSelectParser.LIMIT_SYMBOL:
				case SQLSelectParser.OFFSET_SYMBOL:
				case SQLSelectParser.INTO_SYMBOL:
				case SQLSelectParser.OUTFILE_SYMBOL:
				case SQLSelectParser.DUMPFILE_SYMBOL:
				case SQLSelectParser.PROCEDURE_SYMBOL:
				case SQLSelectParser.ANALYSE_SYMBOL:
				case SQLSelectParser.HAVING_SYMBOL:
				case SQLSelectParser.WINDOW_SYMBOL:
				case SQLSelectParser.AS_SYMBOL:
				case SQLSelectParser.PARTITION_SYMBOL:
				case SQLSelectParser.BY_SYMBOL:
				case SQLSelectParser.ROWS_SYMBOL:
				case SQLSelectParser.RANGE_SYMBOL:
				case SQLSelectParser.GROUPS_SYMBOL:
				case SQLSelectParser.UNBOUNDED_SYMBOL:
				case SQLSelectParser.PRECEDING_SYMBOL:
				case SQLSelectParser.INTERVAL_SYMBOL:
				case SQLSelectParser.CURRENT_SYMBOL:
				case SQLSelectParser.ROW_SYMBOL:
				case SQLSelectParser.BETWEEN_SYMBOL:
				case SQLSelectParser.AND_SYMBOL:
				case SQLSelectParser.FOLLOWING_SYMBOL:
				case SQLSelectParser.EXCLUDE_SYMBOL:
				case SQLSelectParser.GROUP_SYMBOL:
				case SQLSelectParser.TIES_SYMBOL:
				case SQLSelectParser.NO_SYMBOL:
				case SQLSelectParser.OTHERS_SYMBOL:
				case SQLSelectParser.WITH_SYMBOL:
				case SQLSelectParser.WITHOUT_SYMBOL:
				case SQLSelectParser.RECURSIVE_SYMBOL:
				case SQLSelectParser.ROLLUP_SYMBOL:
				case SQLSelectParser.CUBE_SYMBOL:
				case SQLSelectParser.ORDER_SYMBOL:
				case SQLSelectParser.ASC_SYMBOL:
				case SQLSelectParser.DESC_SYMBOL:
				case SQLSelectParser.FROM_SYMBOL:
				case SQLSelectParser.DUAL_SYMBOL:
				case SQLSelectParser.VALUES_SYMBOL:
				case SQLSelectParser.TABLE_SYMBOL:
				case SQLSelectParser.SQL_NO_CACHE_SYMBOL:
				case SQLSelectParser.SQL_CACHE_SYMBOL:
				case SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL:
				case SQLSelectParser.FOR_SYMBOL:
				case SQLSelectParser.OF_SYMBOL:
				case SQLSelectParser.LOCK_SYMBOL:
				case SQLSelectParser.IN_SYMBOL:
				case SQLSelectParser.SHARE_SYMBOL:
				case SQLSelectParser.MODE_SYMBOL:
				case SQLSelectParser.UPDATE_SYMBOL:
				case SQLSelectParser.SKIP_SYMBOL:
				case SQLSelectParser.LOCKED_SYMBOL:
				case SQLSelectParser.NOWAIT_SYMBOL:
				case SQLSelectParser.WHERE_SYMBOL:
				case SQLSelectParser.OJ_SYMBOL:
				case SQLSelectParser.ON_SYMBOL:
				case SQLSelectParser.USING_SYMBOL:
				case SQLSelectParser.NATURAL_SYMBOL:
				case SQLSelectParser.INNER_SYMBOL:
				case SQLSelectParser.JOIN_SYMBOL:
				case SQLSelectParser.LEFT_SYMBOL:
				case SQLSelectParser.RIGHT_SYMBOL:
				case SQLSelectParser.OUTER_SYMBOL:
				case SQLSelectParser.CROSS_SYMBOL:
				case SQLSelectParser.LATERAL_SYMBOL:
				case SQLSelectParser.JSON_TABLE_SYMBOL:
				case SQLSelectParser.COLUMNS_SYMBOL:
				case SQLSelectParser.ORDINALITY_SYMBOL:
				case SQLSelectParser.EXISTS_SYMBOL:
				case SQLSelectParser.PATH_SYMBOL:
				case SQLSelectParser.NESTED_SYMBOL:
				case SQLSelectParser.EMPTY_SYMBOL:
				case SQLSelectParser.ERROR_SYMBOL:
				case SQLSelectParser.NULL_SYMBOL:
				case SQLSelectParser.USE_SYMBOL:
				case SQLSelectParser.FORCE_SYMBOL:
				case SQLSelectParser.IGNORE_SYMBOL:
				case SQLSelectParser.KEY_SYMBOL:
				case SQLSelectParser.INDEX_SYMBOL:
				case SQLSelectParser.PRIMARY_SYMBOL:
				case SQLSelectParser.IS_SYMBOL:
				case SQLSelectParser.TRUE_SYMBOL:
				case SQLSelectParser.FALSE_SYMBOL:
				case SQLSelectParser.UNKNOWN_SYMBOL:
				case SQLSelectParser.NOT_SYMBOL:
				case SQLSelectParser.XOR_SYMBOL:
				case SQLSelectParser.OR_SYMBOL:
				case SQLSelectParser.ANY_SYMBOL:
				case SQLSelectParser.MEMBER_SYMBOL:
				case SQLSelectParser.SOUNDS_SYMBOL:
				case SQLSelectParser.LIKE_SYMBOL:
				case SQLSelectParser.ESCAPE_SYMBOL:
				case SQLSelectParser.REGEXP_SYMBOL:
				case SQLSelectParser.DIV_SYMBOL:
				case SQLSelectParser.MOD_SYMBOL:
				case SQLSelectParser.MATCH_SYMBOL:
				case SQLSelectParser.AGAINST_SYMBOL:
				case SQLSelectParser.BINARY_SYMBOL:
				case SQLSelectParser.CAST_SYMBOL:
				case SQLSelectParser.ARRAY_SYMBOL:
				case SQLSelectParser.CASE_SYMBOL:
				case SQLSelectParser.END_SYMBOL:
				case SQLSelectParser.CONVERT_SYMBOL:
				case SQLSelectParser.COLLATE_SYMBOL:
				case SQLSelectParser.AVG_SYMBOL:
				case SQLSelectParser.BIT_AND_SYMBOL:
				case SQLSelectParser.BIT_OR_SYMBOL:
				case SQLSelectParser.BIT_XOR_SYMBOL:
				case SQLSelectParser.COUNT_SYMBOL:
				case SQLSelectParser.MIN_SYMBOL:
				case SQLSelectParser.MAX_SYMBOL:
				case SQLSelectParser.STD_SYMBOL:
				case SQLSelectParser.VARIANCE_SYMBOL:
				case SQLSelectParser.STDDEV_SAMP_SYMBOL:
				case SQLSelectParser.VAR_SAMP_SYMBOL:
				case SQLSelectParser.SUM_SYMBOL:
				case SQLSelectParser.GROUP_CONCAT_SYMBOL:
				case SQLSelectParser.SEPARATOR_SYMBOL:
				case SQLSelectParser.GROUPING_SYMBOL:
				case SQLSelectParser.ROW_NUMBER_SYMBOL:
				case SQLSelectParser.RANK_SYMBOL:
				case SQLSelectParser.DENSE_RANK_SYMBOL:
				case SQLSelectParser.CUME_DIST_SYMBOL:
				case SQLSelectParser.PERCENT_RANK_SYMBOL:
				case SQLSelectParser.NTILE_SYMBOL:
				case SQLSelectParser.LEAD_SYMBOL:
				case SQLSelectParser.LAG_SYMBOL:
				case SQLSelectParser.FIRST_VALUE_SYMBOL:
				case SQLSelectParser.LAST_VALUE_SYMBOL:
				case SQLSelectParser.NTH_VALUE_SYMBOL:
				case SQLSelectParser.FIRST_SYMBOL:
				case SQLSelectParser.LAST_SYMBOL:
				case SQLSelectParser.OVER_SYMBOL:
				case SQLSelectParser.RESPECT_SYMBOL:
				case SQLSelectParser.NULLS_SYMBOL:
				case SQLSelectParser.JSON_ARRAYAGG_SYMBOL:
				case SQLSelectParser.JSON_OBJECTAGG_SYMBOL:
				case SQLSelectParser.BOOLEAN_SYMBOL:
				case SQLSelectParser.LANGUAGE_SYMBOL:
				case SQLSelectParser.QUERY_SYMBOL:
				case SQLSelectParser.EXPANSION_SYMBOL:
				case SQLSelectParser.CHAR_SYMBOL:
				case SQLSelectParser.CURRENT_USER_SYMBOL:
				case SQLSelectParser.DATE_SYMBOL:
				case SQLSelectParser.INSERT_SYMBOL:
				case SQLSelectParser.TIME_SYMBOL:
				case SQLSelectParser.TIMESTAMP_SYMBOL:
				case SQLSelectParser.TIMESTAMP_LTZ_SYMBOL:
				case SQLSelectParser.TIMESTAMP_NTZ_SYMBOL:
				case SQLSelectParser.ZONE_SYMBOL:
				case SQLSelectParser.USER_SYMBOL:
				case SQLSelectParser.ADDDATE_SYMBOL:
				case SQLSelectParser.SUBDATE_SYMBOL:
				case SQLSelectParser.CURDATE_SYMBOL:
				case SQLSelectParser.CURTIME_SYMBOL:
				case SQLSelectParser.DATE_ADD_SYMBOL:
				case SQLSelectParser.DATE_SUB_SYMBOL:
				case SQLSelectParser.EXTRACT_SYMBOL:
				case SQLSelectParser.GET_FORMAT_SYMBOL:
				case SQLSelectParser.NOW_SYMBOL:
				case SQLSelectParser.POSITION_SYMBOL:
				case SQLSelectParser.SYSDATE_SYMBOL:
				case SQLSelectParser.TIMESTAMP_ADD_SYMBOL:
				case SQLSelectParser.TIMESTAMP_DIFF_SYMBOL:
				case SQLSelectParser.UTC_DATE_SYMBOL:
				case SQLSelectParser.UTC_TIME_SYMBOL:
				case SQLSelectParser.UTC_TIMESTAMP_SYMBOL:
				case SQLSelectParser.ASCII_SYMBOL:
				case SQLSelectParser.CHARSET_SYMBOL:
				case SQLSelectParser.COALESCE_SYMBOL:
				case SQLSelectParser.COLLATION_SYMBOL:
				case SQLSelectParser.DATABASE_SYMBOL:
				case SQLSelectParser.IF_SYMBOL:
				case SQLSelectParser.FORMAT_SYMBOL:
				case SQLSelectParser.MICROSECOND_SYMBOL:
				case SQLSelectParser.OLD_PASSWORD_SYMBOL:
				case SQLSelectParser.PASSWORD_SYMBOL:
				case SQLSelectParser.REPEAT_SYMBOL:
				case SQLSelectParser.REPLACE_SYMBOL:
				case SQLSelectParser.REVERSE_SYMBOL:
				case SQLSelectParser.ROW_COUNT_SYMBOL:
				case SQLSelectParser.TRUNCATE_SYMBOL:
				case SQLSelectParser.WEIGHT_STRING_SYMBOL:
				case SQLSelectParser.CONTAINS_SYMBOL:
				case SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL:
				case SQLSelectParser.LINESTRING_SYMBOL:
				case SQLSelectParser.MULTILINESTRING_SYMBOL:
				case SQLSelectParser.MULTIPOINT_SYMBOL:
				case SQLSelectParser.MULTIPOLYGON_SYMBOL:
				case SQLSelectParser.POINT_SYMBOL:
				case SQLSelectParser.POLYGON_SYMBOL:
				case SQLSelectParser.LEVEL_SYMBOL:
				case SQLSelectParser.DATETIME_SYMBOL:
				case SQLSelectParser.TRIM_SYMBOL:
				case SQLSelectParser.LEADING_SYMBOL:
				case SQLSelectParser.TRAILING_SYMBOL:
				case SQLSelectParser.BOTH_SYMBOL:
				case SQLSelectParser.STRING_SYMBOL:
				case SQLSelectParser.SUBSTRING_SYMBOL:
				case SQLSelectParser.WHEN_SYMBOL:
				case SQLSelectParser.THEN_SYMBOL:
				case SQLSelectParser.ELSE_SYMBOL:
				case SQLSelectParser.SIGNED_SYMBOL:
				case SQLSelectParser.UNSIGNED_SYMBOL:
				case SQLSelectParser.DECIMAL_SYMBOL:
				case SQLSelectParser.JSON_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL:
				case SQLSelectParser.FLOAT_SYMBOL_4:
				case SQLSelectParser.FLOAT_SYMBOL_8:
				case SQLSelectParser.SET_SYMBOL:
				case SQLSelectParser.SECOND_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_MICROSECOND_SYMBOL:
				case SQLSelectParser.MINUTE_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MICROSECOND_SYMBOL:
				case SQLSelectParser.HOUR_SECOND_SYMBOL:
				case SQLSelectParser.HOUR_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_MICROSECOND_SYMBOL:
				case SQLSelectParser.DAY_SECOND_SYMBOL:
				case SQLSelectParser.DAY_MINUTE_SYMBOL:
				case SQLSelectParser.DAY_HOUR_SYMBOL:
				case SQLSelectParser.YEAR_MONTH_SYMBOL:
				case SQLSelectParser.BTREE_SYMBOL:
				case SQLSelectParser.RTREE_SYMBOL:
				case SQLSelectParser.HASH_SYMBOL:
				case SQLSelectParser.REAL_SYMBOL:
				case SQLSelectParser.DOUBLE_SYMBOL:
				case SQLSelectParser.PRECISION_SYMBOL:
				case SQLSelectParser.NUMERIC_SYMBOL:
				case SQLSelectParser.NUMBER_SYMBOL:
				case SQLSelectParser.FIXED_SYMBOL:
				case SQLSelectParser.BIT_SYMBOL:
				case SQLSelectParser.BOOL_SYMBOL:
				case SQLSelectParser.VARYING_SYMBOL:
				case SQLSelectParser.VARCHAR_SYMBOL:
				case SQLSelectParser.VARCHAR2_SYMBOL:
				case SQLSelectParser.NATIONAL_SYMBOL:
				case SQLSelectParser.NVARCHAR_SYMBOL:
				case SQLSelectParser.NVARCHAR2_SYMBOL:
				case SQLSelectParser.NCHAR_SYMBOL:
				case SQLSelectParser.VARBINARY_SYMBOL:
				case SQLSelectParser.TINYBLOB_SYMBOL:
				case SQLSelectParser.BLOB_SYMBOL:
				case SQLSelectParser.CLOB_SYMBOL:
				case SQLSelectParser.BFILE_SYMBOL:
				case SQLSelectParser.RAW_SYMBOL:
				case SQLSelectParser.MEDIUMBLOB_SYMBOL:
				case SQLSelectParser.LONGBLOB_SYMBOL:
				case SQLSelectParser.LONG_SYMBOL:
				case SQLSelectParser.TINYTEXT_SYMBOL:
				case SQLSelectParser.TEXT_SYMBOL:
				case SQLSelectParser.MEDIUMTEXT_SYMBOL:
				case SQLSelectParser.LONGTEXT_SYMBOL:
				case SQLSelectParser.ENUM_SYMBOL:
				case SQLSelectParser.SERIAL_SYMBOL:
				case SQLSelectParser.GEOMETRY_SYMBOL:
				case SQLSelectParser.ZEROFILL_SYMBOL:
				case SQLSelectParser.BYTE_SYMBOL:
				case SQLSelectParser.UNICODE_SYMBOL:
				case SQLSelectParser.TERMINATED_SYMBOL:
				case SQLSelectParser.OPTIONALLY_SYMBOL:
				case SQLSelectParser.ENCLOSED_SYMBOL:
				case SQLSelectParser.ESCAPED_SYMBOL:
				case SQLSelectParser.LINES_SYMBOL:
				case SQLSelectParser.STARTING_SYMBOL:
				case SQLSelectParser.GLOBAL_SYMBOL:
				case SQLSelectParser.LOCAL_SYMBOL:
				case SQLSelectParser.SESSION_SYMBOL:
				case SQLSelectParser.VARIANT_SYMBOL:
				case SQLSelectParser.OBJECT_SYMBOL:
				case SQLSelectParser.GEOGRAPHY_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 2402;
					this.identifierKeyword();
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	identifierList() {
		let localctx = new IdentifierListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 298, SQLSelectParser.RULE_identifierList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2405;
			this.identifier();
			this.state = 2410;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 2406;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 2407;
				this.identifier();
				this.state = 2412;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	identifierListWithParentheses() {
		let localctx = new IdentifierListWithParenthesesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 300, SQLSelectParser.RULE_identifierListWithParentheses);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2413;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2414;
			this.identifierList();
			this.state = 2415;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	qualifiedIdentifier() {
		let localctx = new QualifiedIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 302, SQLSelectParser.RULE_qualifiedIdentifier);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2417;
			this.identifier();
			this.state = 2422;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 311, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 2418;
					this.match(SQLSelectParser.DOT_SYMBOL);
					this.state = 2419;
					this.identifier();
				}
				this.state = 2424;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 311, this._ctx);
			}

			this.state = 2427;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 312, this._ctx);
			if (la_ === 1) {
				this.state = 2425;
				this.match(SQLSelectParser.DOT_SYMBOL);
				this.state = 2426;
				this.match(SQLSelectParser.MULT_OPERATOR);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	jsonPathIdentifier() {
		let localctx = new JsonPathIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 304, SQLSelectParser.RULE_jsonPathIdentifier);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2429;
			this.qualifiedIdentifier();
			this.state = 2430;
			this.match(SQLSelectParser.COLON_SYMBOL);
			this.state = 2431;
			this.identifier();
			this.state = 2437;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 314, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 2435;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
						case SQLSelectParser.DOT_SYMBOL:
						case SQLSelectParser.COLON_SYMBOL:
							this.state = 2432;
							_la = this._input.LA(1);
							if (!(_la === SQLSelectParser.DOT_SYMBOL || _la === SQLSelectParser.COLON_SYMBOL)) {
								this._errHandler.recoverInline(this);
							} else {
								this._errHandler.reportMatch(this);
								this.consume();
							}
							this.state = 2433;
							this.identifier();
							break;
						case SQLSelectParser.BRACKET_QUOTED_TEXT:
							this.state = 2434;
							this.match(SQLSelectParser.BRACKET_QUOTED_TEXT);
							break;
						default:
							throw new antlr4.error.NoViableAltException(this);
					}
				}
				this.state = 2439;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 314, this._ctx);
			}

			this.state = 2442;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 315, this._ctx);
			if (la_ === 1) {
				this.state = 2440;
				this.match(SQLSelectParser.CAST_COLON_SYMBOL);
				this.state = 2441;
				this.dataType();
			}
			this.state = 2448;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 317, this._ctx);
			if (la_ === 1) {
				this.state = 2444;
				this.match(SQLSelectParser.COLLATE_SYMBOL);
				this.state = 2446;
				this._errHandler.sync(this);
				var la_ = this._interp.adaptivePredict(this._input, 316, this._ctx);
				if (la_ === 1) {
					this.state = 2445;
					this.identifier();
				}
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	dotIdentifier() {
		let localctx = new DotIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 306, SQLSelectParser.RULE_dotIdentifier);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2450;
			this.match(SQLSelectParser.DOT_SYMBOL);
			this.state = 2451;
			this.identifier();
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	ulong_number() {
		let localctx = new Ulong_numberContext(this, this._ctx, this.state);
		this.enterRule(localctx, 308, SQLSelectParser.RULE_ulong_number);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2453;
			_la = this._input.LA(1);
			if (
				!(
					((_la - 44) & ~0x1f) == 0 &&
					((1 << (_la - 44)) &
						((1 << (SQLSelectParser.HEX_NUMBER - 44)) |
							(1 << (SQLSelectParser.INT_NUMBER - 44)) |
							(1 << (SQLSelectParser.DECIMAL_NUMBER - 44)) |
							(1 << (SQLSelectParser.FLOAT_NUMBER - 44)))) !==
						0
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	real_ulong_number() {
		let localctx = new Real_ulong_numberContext(this, this._ctx, this.state);
		this.enterRule(localctx, 310, SQLSelectParser.RULE_real_ulong_number);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2455;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.HEX_NUMBER || _la === SQLSelectParser.INT_NUMBER)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	ulonglong_number() {
		let localctx = new Ulonglong_numberContext(this, this._ctx, this.state);
		this.enterRule(localctx, 312, SQLSelectParser.RULE_ulonglong_number);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2457;
			_la = this._input.LA(1);
			if (
				!(
					((_la - 46) & ~0x1f) == 0 &&
					((1 << (_la - 46)) &
						((1 << (SQLSelectParser.INT_NUMBER - 46)) |
							(1 << (SQLSelectParser.DECIMAL_NUMBER - 46)) |
							(1 << (SQLSelectParser.FLOAT_NUMBER - 46)))) !==
						0
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	real_ulonglong_number() {
		let localctx = new Real_ulonglong_numberContext(this, this._ctx, this.state);
		this.enterRule(localctx, 314, SQLSelectParser.RULE_real_ulonglong_number);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2459;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.HEX_NUMBER || _la === SQLSelectParser.INT_NUMBER)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	literal() {
		let localctx = new LiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 316, SQLSelectParser.RULE_literal);
		var _la = 0; // Token type
		try {
			this.state = 2470;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 319, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 2461;
					this.textLiteral();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 2462;
					this.numLiteral();
					break;

				case 3:
					this.enterOuterAlt(localctx, 3);
					this.state = 2463;
					this.temporalLiteral();
					break;

				case 4:
					this.enterOuterAlt(localctx, 4);
					this.state = 2464;
					this.nullLiteral();
					break;

				case 5:
					this.enterOuterAlt(localctx, 5);
					this.state = 2465;
					this.boolLiteral();
					break;

				case 6:
					this.enterOuterAlt(localctx, 6);
					this.state = 2467;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.UNDERSCORE_CHARSET) {
						this.state = 2466;
						this.match(SQLSelectParser.UNDERSCORE_CHARSET);
					}

					this.state = 2469;
					_la = this._input.LA(1);
					if (!(_la === SQLSelectParser.HEX_NUMBER || _la === SQLSelectParser.BIN_NUMBER)) {
						this._errHandler.recoverInline(this);
					} else {
						this._errHandler.reportMatch(this);
						this.consume();
					}
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	stringList() {
		let localctx = new StringListContext(this, this._ctx, this.state);
		this.enterRule(localctx, 318, SQLSelectParser.RULE_stringList);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2472;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2473;
			this.textString();
			this.state = 2478;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === SQLSelectParser.COMMA_SYMBOL) {
				this.state = 2474;
				this.match(SQLSelectParser.COMMA_SYMBOL);
				this.state = 2475;
				this.textString();
				this.state = 2480;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2481;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	textStringLiteral() {
		let localctx = new TextStringLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 320, SQLSelectParser.RULE_textStringLiteral);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2483;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.DOUBLE_QUOTED_TEXT || _la === SQLSelectParser.SINGLE_QUOTED_TEXT)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	textString() {
		let localctx = new TextStringContext(this, this._ctx, this.state);
		this.enterRule(localctx, 322, SQLSelectParser.RULE_textString);
		try {
			this.state = 2488;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.DOUBLE_QUOTED_TEXT:
				case SQLSelectParser.SINGLE_QUOTED_TEXT:
					this.enterOuterAlt(localctx, 1);
					this.state = 2485;
					this.textStringLiteral();
					break;
				case SQLSelectParser.HEX_NUMBER:
					this.enterOuterAlt(localctx, 2);
					this.state = 2486;
					this.match(SQLSelectParser.HEX_NUMBER);
					break;
				case SQLSelectParser.BIN_NUMBER:
					this.enterOuterAlt(localctx, 3);
					this.state = 2487;
					this.match(SQLSelectParser.BIN_NUMBER);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	textLiteral() {
		let localctx = new TextLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 324, SQLSelectParser.RULE_textLiteral);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2495;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.UNDERSCORE_CHARSET:
				case SQLSelectParser.DOUBLE_QUOTED_TEXT:
				case SQLSelectParser.SINGLE_QUOTED_TEXT:
					this.state = 2491;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === SQLSelectParser.UNDERSCORE_CHARSET) {
						this.state = 2490;
						this.match(SQLSelectParser.UNDERSCORE_CHARSET);
					}

					this.state = 2493;
					this.textStringLiteral();
					break;
				case SQLSelectParser.NCHAR_TEXT:
					this.state = 2494;
					this.match(SQLSelectParser.NCHAR_TEXT);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
			this.state = 2500;
			this._errHandler.sync(this);
			var _alt = this._interp.adaptivePredict(this._input, 324, this._ctx);
			while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					this.state = 2497;
					this.textStringLiteral();
				}
				this.state = 2502;
				this._errHandler.sync(this);
				_alt = this._interp.adaptivePredict(this._input, 324, this._ctx);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	numLiteral() {
		let localctx = new NumLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 326, SQLSelectParser.RULE_numLiteral);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2503;
			_la = this._input.LA(1);
			if (
				!(
					((_la - 46) & ~0x1f) == 0 &&
					((1 << (_la - 46)) &
						((1 << (SQLSelectParser.INT_NUMBER - 46)) |
							(1 << (SQLSelectParser.DECIMAL_NUMBER - 46)) |
							(1 << (SQLSelectParser.FLOAT_NUMBER - 46)))) !==
						0
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	boolLiteral() {
		let localctx = new BoolLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 328, SQLSelectParser.RULE_boolLiteral);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2505;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.TRUE_SYMBOL || _la === SQLSelectParser.FALSE_SYMBOL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	nullLiteral() {
		let localctx = new NullLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 330, SQLSelectParser.RULE_nullLiteral);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2507;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.NULL2_SYMBOL || _la === SQLSelectParser.NULL_SYMBOL)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	temporalLiteral() {
		let localctx = new TemporalLiteralContext(this, this._ctx, this.state);
		this.enterRule(localctx, 332, SQLSelectParser.RULE_temporalLiteral);
		try {
			this.state = 2515;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.DATE_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 2509;
					this.match(SQLSelectParser.DATE_SYMBOL);
					this.state = 2510;
					this.match(SQLSelectParser.SINGLE_QUOTED_TEXT);
					break;
				case SQLSelectParser.TIME_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 2511;
					this.match(SQLSelectParser.TIME_SYMBOL);
					this.state = 2512;
					this.match(SQLSelectParser.SINGLE_QUOTED_TEXT);
					break;
				case SQLSelectParser.TIMESTAMP_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 2513;
					this.match(SQLSelectParser.TIMESTAMP_SYMBOL);
					this.state = 2514;
					this.match(SQLSelectParser.SINGLE_QUOTED_TEXT);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	floatOptions() {
		let localctx = new FloatOptionsContext(this, this._ctx, this.state);
		this.enterRule(localctx, 334, SQLSelectParser.RULE_floatOptions);
		try {
			this.state = 2519;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 326, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 2517;
					this.fieldLength();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 2518;
					this.precision();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	precision() {
		let localctx = new PrecisionContext(this, this._ctx, this.state);
		this.enterRule(localctx, 336, SQLSelectParser.RULE_precision);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2521;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2522;
			this.match(SQLSelectParser.INT_NUMBER);
			this.state = 2523;
			this.match(SQLSelectParser.COMMA_SYMBOL);
			this.state = 2524;
			this.match(SQLSelectParser.INT_NUMBER);
			this.state = 2525;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	textOrIdentifier() {
		let localctx = new TextOrIdentifierContext(this, this._ctx, this.state);
		this.enterRule(localctx, 338, SQLSelectParser.RULE_textOrIdentifier);
		try {
			this.state = 2529;
			this._errHandler.sync(this);
			var la_ = this._interp.adaptivePredict(this._input, 327, this._ctx);
			switch (la_) {
				case 1:
					this.enterOuterAlt(localctx, 1);
					this.state = 2527;
					this.identifier();
					break;

				case 2:
					this.enterOuterAlt(localctx, 2);
					this.state = 2528;
					this.textStringLiteral();
					break;
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	parentheses() {
		let localctx = new ParenthesesContext(this, this._ctx, this.state);
		this.enterRule(localctx, 340, SQLSelectParser.RULE_parentheses);
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2531;
			this.match(SQLSelectParser.OPEN_PAR_SYMBOL);
			this.state = 2532;
			this.match(SQLSelectParser.CLOSE_PAR_SYMBOL);
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	equal() {
		let localctx = new EqualContext(this, this._ctx, this.state);
		this.enterRule(localctx, 342, SQLSelectParser.RULE_equal);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2534;
			_la = this._input.LA(1);
			if (!(_la === SQLSelectParser.EQUAL_OPERATOR || _la === SQLSelectParser.ASSIGN_OPERATOR)) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	varIdentType() {
		let localctx = new VarIdentTypeContext(this, this._ctx, this.state);
		this.enterRule(localctx, 344, SQLSelectParser.RULE_varIdentType);
		try {
			this.state = 2542;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
				case SQLSelectParser.GLOBAL_SYMBOL:
					this.enterOuterAlt(localctx, 1);
					this.state = 2536;
					this.match(SQLSelectParser.GLOBAL_SYMBOL);
					this.state = 2537;
					this.match(SQLSelectParser.DOT_SYMBOL);
					break;
				case SQLSelectParser.LOCAL_SYMBOL:
					this.enterOuterAlt(localctx, 2);
					this.state = 2538;
					this.match(SQLSelectParser.LOCAL_SYMBOL);
					this.state = 2539;
					this.match(SQLSelectParser.DOT_SYMBOL);
					break;
				case SQLSelectParser.SESSION_SYMBOL:
					this.enterOuterAlt(localctx, 3);
					this.state = 2540;
					this.match(SQLSelectParser.SESSION_SYMBOL);
					this.state = 2541;
					this.match(SQLSelectParser.DOT_SYMBOL);
					break;
				default:
					throw new antlr4.error.NoViableAltException(this);
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}

	identifierKeyword() {
		let localctx = new IdentifierKeywordContext(this, this._ctx, this.state);
		this.enterRule(localctx, 346, SQLSelectParser.RULE_identifierKeyword);
		var _la = 0; // Token type
		try {
			this.enterOuterAlt(localctx, 1);
			this.state = 2544;
			_la = this._input.LA(1);
			if (
				!(
					(((_la - 49) & ~0x1f) == 0 &&
						((1 << (_la - 49)) &
							((1 << (SQLSelectParser.TINYINT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.SMALLINT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.MEDIUMINT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.BYTE_INT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.INT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.BIGINT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.SECOND_SYMBOL - 49)) |
								(1 << (SQLSelectParser.MINUTE_SYMBOL - 49)) |
								(1 << (SQLSelectParser.HOUR_SYMBOL - 49)) |
								(1 << (SQLSelectParser.DAY_SYMBOL - 49)) |
								(1 << (SQLSelectParser.WEEK_SYMBOL - 49)) |
								(1 << (SQLSelectParser.MONTH_SYMBOL - 49)) |
								(1 << (SQLSelectParser.QUARTER_SYMBOL - 49)) |
								(1 << (SQLSelectParser.YEAR_SYMBOL - 49)) |
								(1 << (SQLSelectParser.DEFAULT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.UNION_SYMBOL - 49)) |
								(1 << (SQLSelectParser.SELECT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.ALL_SYMBOL - 49)) |
								(1 << (SQLSelectParser.DISTINCT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.STRAIGHT_JOIN_SYMBOL - 49)) |
								(1 << (SQLSelectParser.HIGH_PRIORITY_SYMBOL - 49)) |
								(1 << (SQLSelectParser.SQL_SMALL_RESULT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.SQL_BIG_RESULT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL - 49)) |
								(1 << (SQLSelectParser.LIMIT_SYMBOL - 49)) |
								(1 << (SQLSelectParser.OFFSET_SYMBOL - 49)) |
								(1 << (SQLSelectParser.INTO_SYMBOL - 49)) |
								(1 << (SQLSelectParser.OUTFILE_SYMBOL - 49)) |
								(1 << (SQLSelectParser.DUMPFILE_SYMBOL - 49)) |
								(1 << (SQLSelectParser.PROCEDURE_SYMBOL - 49)) |
								(1 << (SQLSelectParser.ANALYSE_SYMBOL - 49)))) !==
							0) ||
					(((_la - 81) & ~0x1f) == 0 &&
						((1 << (_la - 81)) &
							((1 << (SQLSelectParser.HAVING_SYMBOL - 81)) |
								(1 << (SQLSelectParser.WINDOW_SYMBOL - 81)) |
								(1 << (SQLSelectParser.AS_SYMBOL - 81)) |
								(1 << (SQLSelectParser.PARTITION_SYMBOL - 81)) |
								(1 << (SQLSelectParser.BY_SYMBOL - 81)) |
								(1 << (SQLSelectParser.ROWS_SYMBOL - 81)) |
								(1 << (SQLSelectParser.RANGE_SYMBOL - 81)) |
								(1 << (SQLSelectParser.GROUPS_SYMBOL - 81)) |
								(1 << (SQLSelectParser.UNBOUNDED_SYMBOL - 81)) |
								(1 << (SQLSelectParser.PRECEDING_SYMBOL - 81)) |
								(1 << (SQLSelectParser.INTERVAL_SYMBOL - 81)) |
								(1 << (SQLSelectParser.CURRENT_SYMBOL - 81)) |
								(1 << (SQLSelectParser.ROW_SYMBOL - 81)) |
								(1 << (SQLSelectParser.BETWEEN_SYMBOL - 81)) |
								(1 << (SQLSelectParser.AND_SYMBOL - 81)) |
								(1 << (SQLSelectParser.FOLLOWING_SYMBOL - 81)) |
								(1 << (SQLSelectParser.EXCLUDE_SYMBOL - 81)) |
								(1 << (SQLSelectParser.GROUP_SYMBOL - 81)) |
								(1 << (SQLSelectParser.TIES_SYMBOL - 81)) |
								(1 << (SQLSelectParser.NO_SYMBOL - 81)) |
								(1 << (SQLSelectParser.OTHERS_SYMBOL - 81)) |
								(1 << (SQLSelectParser.WITH_SYMBOL - 81)) |
								(1 << (SQLSelectParser.WITHOUT_SYMBOL - 81)) |
								(1 << (SQLSelectParser.RECURSIVE_SYMBOL - 81)) |
								(1 << (SQLSelectParser.ROLLUP_SYMBOL - 81)) |
								(1 << (SQLSelectParser.CUBE_SYMBOL - 81)) |
								(1 << (SQLSelectParser.ORDER_SYMBOL - 81)) |
								(1 << (SQLSelectParser.ASC_SYMBOL - 81)) |
								(1 << (SQLSelectParser.DESC_SYMBOL - 81)) |
								(1 << (SQLSelectParser.FROM_SYMBOL - 81)) |
								(1 << (SQLSelectParser.DUAL_SYMBOL - 81)) |
								(1 << (SQLSelectParser.VALUES_SYMBOL - 81)))) !==
							0) ||
					(((_la - 113) & ~0x1f) == 0 &&
						((1 << (_la - 113)) &
							((1 << (SQLSelectParser.TABLE_SYMBOL - 113)) |
								(1 << (SQLSelectParser.SQL_NO_CACHE_SYMBOL - 113)) |
								(1 << (SQLSelectParser.SQL_CACHE_SYMBOL - 113)) |
								(1 << (SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL - 113)) |
								(1 << (SQLSelectParser.FOR_SYMBOL - 113)) |
								(1 << (SQLSelectParser.OF_SYMBOL - 113)) |
								(1 << (SQLSelectParser.LOCK_SYMBOL - 113)) |
								(1 << (SQLSelectParser.IN_SYMBOL - 113)) |
								(1 << (SQLSelectParser.SHARE_SYMBOL - 113)) |
								(1 << (SQLSelectParser.MODE_SYMBOL - 113)) |
								(1 << (SQLSelectParser.UPDATE_SYMBOL - 113)) |
								(1 << (SQLSelectParser.SKIP_SYMBOL - 113)) |
								(1 << (SQLSelectParser.LOCKED_SYMBOL - 113)) |
								(1 << (SQLSelectParser.NOWAIT_SYMBOL - 113)) |
								(1 << (SQLSelectParser.WHERE_SYMBOL - 113)) |
								(1 << (SQLSelectParser.OJ_SYMBOL - 113)) |
								(1 << (SQLSelectParser.ON_SYMBOL - 113)) |
								(1 << (SQLSelectParser.USING_SYMBOL - 113)) |
								(1 << (SQLSelectParser.NATURAL_SYMBOL - 113)) |
								(1 << (SQLSelectParser.INNER_SYMBOL - 113)) |
								(1 << (SQLSelectParser.JOIN_SYMBOL - 113)) |
								(1 << (SQLSelectParser.LEFT_SYMBOL - 113)) |
								(1 << (SQLSelectParser.RIGHT_SYMBOL - 113)) |
								(1 << (SQLSelectParser.OUTER_SYMBOL - 113)) |
								(1 << (SQLSelectParser.CROSS_SYMBOL - 113)) |
								(1 << (SQLSelectParser.LATERAL_SYMBOL - 113)) |
								(1 << (SQLSelectParser.JSON_TABLE_SYMBOL - 113)) |
								(1 << (SQLSelectParser.COLUMNS_SYMBOL - 113)) |
								(1 << (SQLSelectParser.ORDINALITY_SYMBOL - 113)) |
								(1 << (SQLSelectParser.EXISTS_SYMBOL - 113)) |
								(1 << (SQLSelectParser.PATH_SYMBOL - 113)))) !==
							0) ||
					(((_la - 145) & ~0x1f) == 0 &&
						((1 << (_la - 145)) &
							((1 << (SQLSelectParser.NESTED_SYMBOL - 145)) |
								(1 << (SQLSelectParser.EMPTY_SYMBOL - 145)) |
								(1 << (SQLSelectParser.ERROR_SYMBOL - 145)) |
								(1 << (SQLSelectParser.NULL_SYMBOL - 145)) |
								(1 << (SQLSelectParser.USE_SYMBOL - 145)) |
								(1 << (SQLSelectParser.FORCE_SYMBOL - 145)) |
								(1 << (SQLSelectParser.IGNORE_SYMBOL - 145)) |
								(1 << (SQLSelectParser.KEY_SYMBOL - 145)) |
								(1 << (SQLSelectParser.INDEX_SYMBOL - 145)) |
								(1 << (SQLSelectParser.PRIMARY_SYMBOL - 145)) |
								(1 << (SQLSelectParser.IS_SYMBOL - 145)) |
								(1 << (SQLSelectParser.TRUE_SYMBOL - 145)) |
								(1 << (SQLSelectParser.FALSE_SYMBOL - 145)) |
								(1 << (SQLSelectParser.UNKNOWN_SYMBOL - 145)) |
								(1 << (SQLSelectParser.NOT_SYMBOL - 145)) |
								(1 << (SQLSelectParser.XOR_SYMBOL - 145)) |
								(1 << (SQLSelectParser.OR_SYMBOL - 145)) |
								(1 << (SQLSelectParser.ANY_SYMBOL - 145)) |
								(1 << (SQLSelectParser.MEMBER_SYMBOL - 145)) |
								(1 << (SQLSelectParser.SOUNDS_SYMBOL - 145)) |
								(1 << (SQLSelectParser.LIKE_SYMBOL - 145)) |
								(1 << (SQLSelectParser.ESCAPE_SYMBOL - 145)) |
								(1 << (SQLSelectParser.REGEXP_SYMBOL - 145)) |
								(1 << (SQLSelectParser.DIV_SYMBOL - 145)) |
								(1 << (SQLSelectParser.MOD_SYMBOL - 145)) |
								(1 << (SQLSelectParser.MATCH_SYMBOL - 145)) |
								(1 << (SQLSelectParser.AGAINST_SYMBOL - 145)) |
								(1 << (SQLSelectParser.BINARY_SYMBOL - 145)) |
								(1 << (SQLSelectParser.CAST_SYMBOL - 145)) |
								(1 << (SQLSelectParser.ARRAY_SYMBOL - 145)) |
								(1 << (SQLSelectParser.CASE_SYMBOL - 145)) |
								(1 << (SQLSelectParser.END_SYMBOL - 145)))) !==
							0) ||
					(((_la - 177) & ~0x1f) == 0 &&
						((1 << (_la - 177)) &
							((1 << (SQLSelectParser.CONVERT_SYMBOL - 177)) |
								(1 << (SQLSelectParser.COLLATE_SYMBOL - 177)) |
								(1 << (SQLSelectParser.AVG_SYMBOL - 177)) |
								(1 << (SQLSelectParser.BIT_AND_SYMBOL - 177)) |
								(1 << (SQLSelectParser.BIT_OR_SYMBOL - 177)) |
								(1 << (SQLSelectParser.BIT_XOR_SYMBOL - 177)) |
								(1 << (SQLSelectParser.COUNT_SYMBOL - 177)) |
								(1 << (SQLSelectParser.MIN_SYMBOL - 177)) |
								(1 << (SQLSelectParser.MAX_SYMBOL - 177)) |
								(1 << (SQLSelectParser.STD_SYMBOL - 177)) |
								(1 << (SQLSelectParser.VARIANCE_SYMBOL - 177)) |
								(1 << (SQLSelectParser.STDDEV_SAMP_SYMBOL - 177)) |
								(1 << (SQLSelectParser.VAR_SAMP_SYMBOL - 177)) |
								(1 << (SQLSelectParser.SUM_SYMBOL - 177)) |
								(1 << (SQLSelectParser.GROUP_CONCAT_SYMBOL - 177)) |
								(1 << (SQLSelectParser.SEPARATOR_SYMBOL - 177)) |
								(1 << (SQLSelectParser.GROUPING_SYMBOL - 177)) |
								(1 << (SQLSelectParser.ROW_NUMBER_SYMBOL - 177)) |
								(1 << (SQLSelectParser.RANK_SYMBOL - 177)) |
								(1 << (SQLSelectParser.DENSE_RANK_SYMBOL - 177)) |
								(1 << (SQLSelectParser.CUME_DIST_SYMBOL - 177)) |
								(1 << (SQLSelectParser.PERCENT_RANK_SYMBOL - 177)) |
								(1 << (SQLSelectParser.NTILE_SYMBOL - 177)) |
								(1 << (SQLSelectParser.LEAD_SYMBOL - 177)) |
								(1 << (SQLSelectParser.LAG_SYMBOL - 177)) |
								(1 << (SQLSelectParser.FIRST_VALUE_SYMBOL - 177)) |
								(1 << (SQLSelectParser.LAST_VALUE_SYMBOL - 177)) |
								(1 << (SQLSelectParser.NTH_VALUE_SYMBOL - 177)) |
								(1 << (SQLSelectParser.FIRST_SYMBOL - 177)) |
								(1 << (SQLSelectParser.LAST_SYMBOL - 177)) |
								(1 << (SQLSelectParser.OVER_SYMBOL - 177)) |
								(1 << (SQLSelectParser.RESPECT_SYMBOL - 177)))) !==
							0) ||
					(((_la - 209) & ~0x1f) == 0 &&
						((1 << (_la - 209)) &
							((1 << (SQLSelectParser.NULLS_SYMBOL - 209)) |
								(1 << (SQLSelectParser.JSON_ARRAYAGG_SYMBOL - 209)) |
								(1 << (SQLSelectParser.JSON_OBJECTAGG_SYMBOL - 209)) |
								(1 << (SQLSelectParser.BOOLEAN_SYMBOL - 209)) |
								(1 << (SQLSelectParser.LANGUAGE_SYMBOL - 209)) |
								(1 << (SQLSelectParser.QUERY_SYMBOL - 209)) |
								(1 << (SQLSelectParser.EXPANSION_SYMBOL - 209)) |
								(1 << (SQLSelectParser.CHAR_SYMBOL - 209)) |
								(1 << (SQLSelectParser.CURRENT_USER_SYMBOL - 209)) |
								(1 << (SQLSelectParser.DATE_SYMBOL - 209)) |
								(1 << (SQLSelectParser.INSERT_SYMBOL - 209)) |
								(1 << (SQLSelectParser.TIME_SYMBOL - 209)) |
								(1 << (SQLSelectParser.TIMESTAMP_SYMBOL - 209)) |
								(1 << (SQLSelectParser.TIMESTAMP_LTZ_SYMBOL - 209)) |
								(1 << (SQLSelectParser.TIMESTAMP_NTZ_SYMBOL - 209)) |
								(1 << (SQLSelectParser.ZONE_SYMBOL - 209)) |
								(1 << (SQLSelectParser.USER_SYMBOL - 209)) |
								(1 << (SQLSelectParser.ADDDATE_SYMBOL - 209)) |
								(1 << (SQLSelectParser.SUBDATE_SYMBOL - 209)) |
								(1 << (SQLSelectParser.CURDATE_SYMBOL - 209)) |
								(1 << (SQLSelectParser.CURTIME_SYMBOL - 209)) |
								(1 << (SQLSelectParser.DATE_ADD_SYMBOL - 209)) |
								(1 << (SQLSelectParser.DATE_SUB_SYMBOL - 209)) |
								(1 << (SQLSelectParser.EXTRACT_SYMBOL - 209)) |
								(1 << (SQLSelectParser.GET_FORMAT_SYMBOL - 209)) |
								(1 << (SQLSelectParser.NOW_SYMBOL - 209)) |
								(1 << (SQLSelectParser.POSITION_SYMBOL - 209)) |
								(1 << (SQLSelectParser.SYSDATE_SYMBOL - 209)) |
								(1 << (SQLSelectParser.TIMESTAMP_ADD_SYMBOL - 209)) |
								(1 << (SQLSelectParser.TIMESTAMP_DIFF_SYMBOL - 209)) |
								(1 << (SQLSelectParser.UTC_DATE_SYMBOL - 209)) |
								(1 << (SQLSelectParser.UTC_TIME_SYMBOL - 209)))) !==
							0) ||
					(((_la - 241) & ~0x1f) == 0 &&
						((1 << (_la - 241)) &
							((1 << (SQLSelectParser.UTC_TIMESTAMP_SYMBOL - 241)) |
								(1 << (SQLSelectParser.ASCII_SYMBOL - 241)) |
								(1 << (SQLSelectParser.CHARSET_SYMBOL - 241)) |
								(1 << (SQLSelectParser.COALESCE_SYMBOL - 241)) |
								(1 << (SQLSelectParser.COLLATION_SYMBOL - 241)) |
								(1 << (SQLSelectParser.DATABASE_SYMBOL - 241)) |
								(1 << (SQLSelectParser.IF_SYMBOL - 241)) |
								(1 << (SQLSelectParser.FORMAT_SYMBOL - 241)) |
								(1 << (SQLSelectParser.MICROSECOND_SYMBOL - 241)) |
								(1 << (SQLSelectParser.OLD_PASSWORD_SYMBOL - 241)) |
								(1 << (SQLSelectParser.PASSWORD_SYMBOL - 241)) |
								(1 << (SQLSelectParser.REPEAT_SYMBOL - 241)) |
								(1 << (SQLSelectParser.REPLACE_SYMBOL - 241)) |
								(1 << (SQLSelectParser.REVERSE_SYMBOL - 241)) |
								(1 << (SQLSelectParser.ROW_COUNT_SYMBOL - 241)) |
								(1 << (SQLSelectParser.TRUNCATE_SYMBOL - 241)) |
								(1 << (SQLSelectParser.WEIGHT_STRING_SYMBOL - 241)) |
								(1 << (SQLSelectParser.CONTAINS_SYMBOL - 241)) |
								(1 << (SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL - 241)) |
								(1 << (SQLSelectParser.LINESTRING_SYMBOL - 241)) |
								(1 << (SQLSelectParser.MULTILINESTRING_SYMBOL - 241)) |
								(1 << (SQLSelectParser.MULTIPOINT_SYMBOL - 241)) |
								(1 << (SQLSelectParser.MULTIPOLYGON_SYMBOL - 241)) |
								(1 << (SQLSelectParser.POINT_SYMBOL - 241)) |
								(1 << (SQLSelectParser.POLYGON_SYMBOL - 241)) |
								(1 << (SQLSelectParser.LEVEL_SYMBOL - 241)) |
								(1 << (SQLSelectParser.DATETIME_SYMBOL - 241)) |
								(1 << (SQLSelectParser.TRIM_SYMBOL - 241)) |
								(1 << (SQLSelectParser.LEADING_SYMBOL - 241)) |
								(1 << (SQLSelectParser.TRAILING_SYMBOL - 241)) |
								(1 << (SQLSelectParser.BOTH_SYMBOL - 241)) |
								(1 << (SQLSelectParser.STRING_SYMBOL - 241)))) !==
							0) ||
					(((_la - 273) & ~0x1f) == 0 &&
						((1 << (_la - 273)) &
							((1 << (SQLSelectParser.SUBSTRING_SYMBOL - 273)) |
								(1 << (SQLSelectParser.WHEN_SYMBOL - 273)) |
								(1 << (SQLSelectParser.THEN_SYMBOL - 273)) |
								(1 << (SQLSelectParser.ELSE_SYMBOL - 273)) |
								(1 << (SQLSelectParser.SIGNED_SYMBOL - 273)) |
								(1 << (SQLSelectParser.UNSIGNED_SYMBOL - 273)) |
								(1 << (SQLSelectParser.DECIMAL_SYMBOL - 273)) |
								(1 << (SQLSelectParser.JSON_SYMBOL - 273)) |
								(1 << (SQLSelectParser.FLOAT_SYMBOL - 273)) |
								(1 << (SQLSelectParser.FLOAT_SYMBOL_4 - 273)) |
								(1 << (SQLSelectParser.FLOAT_SYMBOL_8 - 273)) |
								(1 << (SQLSelectParser.SET_SYMBOL - 273)) |
								(1 << (SQLSelectParser.SECOND_MICROSECOND_SYMBOL - 273)) |
								(1 << (SQLSelectParser.MINUTE_MICROSECOND_SYMBOL - 273)) |
								(1 << (SQLSelectParser.MINUTE_SECOND_SYMBOL - 273)) |
								(1 << (SQLSelectParser.HOUR_MICROSECOND_SYMBOL - 273)) |
								(1 << (SQLSelectParser.HOUR_SECOND_SYMBOL - 273)) |
								(1 << (SQLSelectParser.HOUR_MINUTE_SYMBOL - 273)) |
								(1 << (SQLSelectParser.DAY_MICROSECOND_SYMBOL - 273)) |
								(1 << (SQLSelectParser.DAY_SECOND_SYMBOL - 273)) |
								(1 << (SQLSelectParser.DAY_MINUTE_SYMBOL - 273)) |
								(1 << (SQLSelectParser.DAY_HOUR_SYMBOL - 273)) |
								(1 << (SQLSelectParser.YEAR_MONTH_SYMBOL - 273)) |
								(1 << (SQLSelectParser.BTREE_SYMBOL - 273)) |
								(1 << (SQLSelectParser.RTREE_SYMBOL - 273)) |
								(1 << (SQLSelectParser.HASH_SYMBOL - 273)) |
								(1 << (SQLSelectParser.REAL_SYMBOL - 273)) |
								(1 << (SQLSelectParser.DOUBLE_SYMBOL - 273)) |
								(1 << (SQLSelectParser.PRECISION_SYMBOL - 273)) |
								(1 << (SQLSelectParser.NUMERIC_SYMBOL - 273)) |
								(1 << (SQLSelectParser.NUMBER_SYMBOL - 273)) |
								(1 << (SQLSelectParser.FIXED_SYMBOL - 273)))) !==
							0) ||
					(((_la - 305) & ~0x1f) == 0 &&
						((1 << (_la - 305)) &
							((1 << (SQLSelectParser.BIT_SYMBOL - 305)) |
								(1 << (SQLSelectParser.BOOL_SYMBOL - 305)) |
								(1 << (SQLSelectParser.VARYING_SYMBOL - 305)) |
								(1 << (SQLSelectParser.VARCHAR_SYMBOL - 305)) |
								(1 << (SQLSelectParser.VARCHAR2_SYMBOL - 305)) |
								(1 << (SQLSelectParser.NATIONAL_SYMBOL - 305)) |
								(1 << (SQLSelectParser.NVARCHAR_SYMBOL - 305)) |
								(1 << (SQLSelectParser.NVARCHAR2_SYMBOL - 305)) |
								(1 << (SQLSelectParser.NCHAR_SYMBOL - 305)) |
								(1 << (SQLSelectParser.VARBINARY_SYMBOL - 305)) |
								(1 << (SQLSelectParser.TINYBLOB_SYMBOL - 305)) |
								(1 << (SQLSelectParser.BLOB_SYMBOL - 305)) |
								(1 << (SQLSelectParser.CLOB_SYMBOL - 305)) |
								(1 << (SQLSelectParser.BFILE_SYMBOL - 305)) |
								(1 << (SQLSelectParser.RAW_SYMBOL - 305)) |
								(1 << (SQLSelectParser.MEDIUMBLOB_SYMBOL - 305)) |
								(1 << (SQLSelectParser.LONGBLOB_SYMBOL - 305)) |
								(1 << (SQLSelectParser.LONG_SYMBOL - 305)) |
								(1 << (SQLSelectParser.TINYTEXT_SYMBOL - 305)) |
								(1 << (SQLSelectParser.TEXT_SYMBOL - 305)) |
								(1 << (SQLSelectParser.MEDIUMTEXT_SYMBOL - 305)) |
								(1 << (SQLSelectParser.LONGTEXT_SYMBOL - 305)) |
								(1 << (SQLSelectParser.ENUM_SYMBOL - 305)) |
								(1 << (SQLSelectParser.SERIAL_SYMBOL - 305)) |
								(1 << (SQLSelectParser.GEOMETRY_SYMBOL - 305)) |
								(1 << (SQLSelectParser.ZEROFILL_SYMBOL - 305)) |
								(1 << (SQLSelectParser.BYTE_SYMBOL - 305)) |
								(1 << (SQLSelectParser.UNICODE_SYMBOL - 305)) |
								(1 << (SQLSelectParser.TERMINATED_SYMBOL - 305)) |
								(1 << (SQLSelectParser.OPTIONALLY_SYMBOL - 305)) |
								(1 << (SQLSelectParser.ENCLOSED_SYMBOL - 305)) |
								(1 << (SQLSelectParser.ESCAPED_SYMBOL - 305)))) !==
							0) ||
					(((_la - 337) & ~0x1f) == 0 &&
						((1 << (_la - 337)) &
							((1 << (SQLSelectParser.LINES_SYMBOL - 337)) |
								(1 << (SQLSelectParser.STARTING_SYMBOL - 337)) |
								(1 << (SQLSelectParser.GLOBAL_SYMBOL - 337)) |
								(1 << (SQLSelectParser.LOCAL_SYMBOL - 337)) |
								(1 << (SQLSelectParser.SESSION_SYMBOL - 337)) |
								(1 << (SQLSelectParser.VARIANT_SYMBOL - 337)) |
								(1 << (SQLSelectParser.OBJECT_SYMBOL - 337)) |
								(1 << (SQLSelectParser.GEOGRAPHY_SYMBOL - 337)))) !==
							0)
				)
			) {
				this._errHandler.recoverInline(this);
			} else {
				this._errHandler.reportMatch(this);
				this.consume();
			}
		} catch (re) {
			if (re instanceof antlr4.error.RecognitionException) {
				localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		} finally {
			this.exitRule();
		}
		return localctx;
	}
}

SQLSelectParser.EOF = antlr4.Token.EOF;
SQLSelectParser.EQUAL_OPERATOR = 1;
SQLSelectParser.ASSIGN_OPERATOR = 2;
SQLSelectParser.NULL_SAFE_EQUAL_OPERATOR = 3;
SQLSelectParser.GREATER_OR_EQUAL_OPERATOR = 4;
SQLSelectParser.GREATER_THAN_OPERATOR = 5;
SQLSelectParser.LESS_OR_EQUAL_OPERATOR = 6;
SQLSelectParser.LESS_THAN_OPERATOR = 7;
SQLSelectParser.NOT_EQUAL_OPERATOR = 8;
SQLSelectParser.PLUS_OPERATOR = 9;
SQLSelectParser.MINUS_OPERATOR = 10;
SQLSelectParser.MULT_OPERATOR = 11;
SQLSelectParser.DIV_OPERATOR = 12;
SQLSelectParser.MOD_OPERATOR = 13;
SQLSelectParser.LOGICAL_NOT_OPERATOR = 14;
SQLSelectParser.BITWISE_NOT_OPERATOR = 15;
SQLSelectParser.SHIFT_LEFT_OPERATOR = 16;
SQLSelectParser.SHIFT_RIGHT_OPERATOR = 17;
SQLSelectParser.LOGICAL_AND_OPERATOR = 18;
SQLSelectParser.BITWISE_AND_OPERATOR = 19;
SQLSelectParser.BITWISE_XOR_OPERATOR = 20;
SQLSelectParser.LOGICAL_OR_OPERATOR = 21;
SQLSelectParser.BITWISE_OR_OPERATOR = 22;
SQLSelectParser.DOT_SYMBOL = 23;
SQLSelectParser.COMMA_SYMBOL = 24;
SQLSelectParser.SEMICOLON_SYMBOL = 25;
SQLSelectParser.COLON_SYMBOL = 26;
SQLSelectParser.OPEN_PAR_SYMBOL = 27;
SQLSelectParser.CLOSE_PAR_SYMBOL = 28;
SQLSelectParser.OPEN_CURLY_SYMBOL = 29;
SQLSelectParser.CLOSE_CURLY_SYMBOL = 30;
SQLSelectParser.UNDERLINE_SYMBOL = 31;
SQLSelectParser.OPEN_BRACKET_SYMBOL = 32;
SQLSelectParser.CLOSE_BRACKET_SYMBOL = 33;
SQLSelectParser.OPEN_DOUBLE_CURLY_SYMBOL = 34;
SQLSelectParser.CLOSE_DOUBLE_CURLY_SYMBOL = 35;
SQLSelectParser.JSON_SEPARATOR_SYMBOL = 36;
SQLSelectParser.JSON_UNQUOTED_SEPARATOR_SYMBOL = 37;
SQLSelectParser.AT_SIGN_SYMBOL = 38;
SQLSelectParser.AT_TEXT_SUFFIX = 39;
SQLSelectParser.AT_AT_SIGN_SYMBOL = 40;
SQLSelectParser.NULL2_SYMBOL = 41;
SQLSelectParser.PARAM_MARKER = 42;
SQLSelectParser.CAST_COLON_SYMBOL = 43;
SQLSelectParser.HEX_NUMBER = 44;
SQLSelectParser.BIN_NUMBER = 45;
SQLSelectParser.INT_NUMBER = 46;
SQLSelectParser.DECIMAL_NUMBER = 47;
SQLSelectParser.FLOAT_NUMBER = 48;
SQLSelectParser.TINYINT_SYMBOL = 49;
SQLSelectParser.SMALLINT_SYMBOL = 50;
SQLSelectParser.MEDIUMINT_SYMBOL = 51;
SQLSelectParser.BYTE_INT_SYMBOL = 52;
SQLSelectParser.INT_SYMBOL = 53;
SQLSelectParser.BIGINT_SYMBOL = 54;
SQLSelectParser.SECOND_SYMBOL = 55;
SQLSelectParser.MINUTE_SYMBOL = 56;
SQLSelectParser.HOUR_SYMBOL = 57;
SQLSelectParser.DAY_SYMBOL = 58;
SQLSelectParser.WEEK_SYMBOL = 59;
SQLSelectParser.MONTH_SYMBOL = 60;
SQLSelectParser.QUARTER_SYMBOL = 61;
SQLSelectParser.YEAR_SYMBOL = 62;
SQLSelectParser.DEFAULT_SYMBOL = 63;
SQLSelectParser.UNION_SYMBOL = 64;
SQLSelectParser.SELECT_SYMBOL = 65;
SQLSelectParser.ALL_SYMBOL = 66;
SQLSelectParser.DISTINCT_SYMBOL = 67;
SQLSelectParser.STRAIGHT_JOIN_SYMBOL = 68;
SQLSelectParser.HIGH_PRIORITY_SYMBOL = 69;
SQLSelectParser.SQL_SMALL_RESULT_SYMBOL = 70;
SQLSelectParser.SQL_BIG_RESULT_SYMBOL = 71;
SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL = 72;
SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL = 73;
SQLSelectParser.LIMIT_SYMBOL = 74;
SQLSelectParser.OFFSET_SYMBOL = 75;
SQLSelectParser.INTO_SYMBOL = 76;
SQLSelectParser.OUTFILE_SYMBOL = 77;
SQLSelectParser.DUMPFILE_SYMBOL = 78;
SQLSelectParser.PROCEDURE_SYMBOL = 79;
SQLSelectParser.ANALYSE_SYMBOL = 80;
SQLSelectParser.HAVING_SYMBOL = 81;
SQLSelectParser.WINDOW_SYMBOL = 82;
SQLSelectParser.AS_SYMBOL = 83;
SQLSelectParser.PARTITION_SYMBOL = 84;
SQLSelectParser.BY_SYMBOL = 85;
SQLSelectParser.ROWS_SYMBOL = 86;
SQLSelectParser.RANGE_SYMBOL = 87;
SQLSelectParser.GROUPS_SYMBOL = 88;
SQLSelectParser.UNBOUNDED_SYMBOL = 89;
SQLSelectParser.PRECEDING_SYMBOL = 90;
SQLSelectParser.INTERVAL_SYMBOL = 91;
SQLSelectParser.CURRENT_SYMBOL = 92;
SQLSelectParser.ROW_SYMBOL = 93;
SQLSelectParser.BETWEEN_SYMBOL = 94;
SQLSelectParser.AND_SYMBOL = 95;
SQLSelectParser.FOLLOWING_SYMBOL = 96;
SQLSelectParser.EXCLUDE_SYMBOL = 97;
SQLSelectParser.GROUP_SYMBOL = 98;
SQLSelectParser.TIES_SYMBOL = 99;
SQLSelectParser.NO_SYMBOL = 100;
SQLSelectParser.OTHERS_SYMBOL = 101;
SQLSelectParser.WITH_SYMBOL = 102;
SQLSelectParser.WITHOUT_SYMBOL = 103;
SQLSelectParser.RECURSIVE_SYMBOL = 104;
SQLSelectParser.ROLLUP_SYMBOL = 105;
SQLSelectParser.CUBE_SYMBOL = 106;
SQLSelectParser.ORDER_SYMBOL = 107;
SQLSelectParser.ASC_SYMBOL = 108;
SQLSelectParser.DESC_SYMBOL = 109;
SQLSelectParser.FROM_SYMBOL = 110;
SQLSelectParser.DUAL_SYMBOL = 111;
SQLSelectParser.VALUES_SYMBOL = 112;
SQLSelectParser.TABLE_SYMBOL = 113;
SQLSelectParser.SQL_NO_CACHE_SYMBOL = 114;
SQLSelectParser.SQL_CACHE_SYMBOL = 115;
SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL = 116;
SQLSelectParser.FOR_SYMBOL = 117;
SQLSelectParser.OF_SYMBOL = 118;
SQLSelectParser.LOCK_SYMBOL = 119;
SQLSelectParser.IN_SYMBOL = 120;
SQLSelectParser.SHARE_SYMBOL = 121;
SQLSelectParser.MODE_SYMBOL = 122;
SQLSelectParser.UPDATE_SYMBOL = 123;
SQLSelectParser.SKIP_SYMBOL = 124;
SQLSelectParser.LOCKED_SYMBOL = 125;
SQLSelectParser.NOWAIT_SYMBOL = 126;
SQLSelectParser.WHERE_SYMBOL = 127;
SQLSelectParser.QUALIFY_SYMBOL = 128;
SQLSelectParser.OJ_SYMBOL = 129;
SQLSelectParser.ON_SYMBOL = 130;
SQLSelectParser.USING_SYMBOL = 131;
SQLSelectParser.NATURAL_SYMBOL = 132;
SQLSelectParser.INNER_SYMBOL = 133;
SQLSelectParser.JOIN_SYMBOL = 134;
SQLSelectParser.LEFT_SYMBOL = 135;
SQLSelectParser.RIGHT_SYMBOL = 136;
SQLSelectParser.OUTER_SYMBOL = 137;
SQLSelectParser.CROSS_SYMBOL = 138;
SQLSelectParser.LATERAL_SYMBOL = 139;
SQLSelectParser.JSON_TABLE_SYMBOL = 140;
SQLSelectParser.COLUMNS_SYMBOL = 141;
SQLSelectParser.ORDINALITY_SYMBOL = 142;
SQLSelectParser.EXISTS_SYMBOL = 143;
SQLSelectParser.PATH_SYMBOL = 144;
SQLSelectParser.NESTED_SYMBOL = 145;
SQLSelectParser.EMPTY_SYMBOL = 146;
SQLSelectParser.ERROR_SYMBOL = 147;
SQLSelectParser.NULL_SYMBOL = 148;
SQLSelectParser.USE_SYMBOL = 149;
SQLSelectParser.FORCE_SYMBOL = 150;
SQLSelectParser.IGNORE_SYMBOL = 151;
SQLSelectParser.KEY_SYMBOL = 152;
SQLSelectParser.INDEX_SYMBOL = 153;
SQLSelectParser.PRIMARY_SYMBOL = 154;
SQLSelectParser.IS_SYMBOL = 155;
SQLSelectParser.TRUE_SYMBOL = 156;
SQLSelectParser.FALSE_SYMBOL = 157;
SQLSelectParser.UNKNOWN_SYMBOL = 158;
SQLSelectParser.NOT_SYMBOL = 159;
SQLSelectParser.XOR_SYMBOL = 160;
SQLSelectParser.OR_SYMBOL = 161;
SQLSelectParser.ANY_SYMBOL = 162;
SQLSelectParser.MEMBER_SYMBOL = 163;
SQLSelectParser.SOUNDS_SYMBOL = 164;
SQLSelectParser.LIKE_SYMBOL = 165;
SQLSelectParser.ESCAPE_SYMBOL = 166;
SQLSelectParser.REGEXP_SYMBOL = 167;
SQLSelectParser.DIV_SYMBOL = 168;
SQLSelectParser.MOD_SYMBOL = 169;
SQLSelectParser.MATCH_SYMBOL = 170;
SQLSelectParser.AGAINST_SYMBOL = 171;
SQLSelectParser.BINARY_SYMBOL = 172;
SQLSelectParser.CAST_SYMBOL = 173;
SQLSelectParser.ARRAY_SYMBOL = 174;
SQLSelectParser.CASE_SYMBOL = 175;
SQLSelectParser.END_SYMBOL = 176;
SQLSelectParser.CONVERT_SYMBOL = 177;
SQLSelectParser.COLLATE_SYMBOL = 178;
SQLSelectParser.AVG_SYMBOL = 179;
SQLSelectParser.BIT_AND_SYMBOL = 180;
SQLSelectParser.BIT_OR_SYMBOL = 181;
SQLSelectParser.BIT_XOR_SYMBOL = 182;
SQLSelectParser.COUNT_SYMBOL = 183;
SQLSelectParser.MIN_SYMBOL = 184;
SQLSelectParser.MAX_SYMBOL = 185;
SQLSelectParser.STD_SYMBOL = 186;
SQLSelectParser.VARIANCE_SYMBOL = 187;
SQLSelectParser.STDDEV_SAMP_SYMBOL = 188;
SQLSelectParser.VAR_SAMP_SYMBOL = 189;
SQLSelectParser.SUM_SYMBOL = 190;
SQLSelectParser.GROUP_CONCAT_SYMBOL = 191;
SQLSelectParser.SEPARATOR_SYMBOL = 192;
SQLSelectParser.GROUPING_SYMBOL = 193;
SQLSelectParser.ROW_NUMBER_SYMBOL = 194;
SQLSelectParser.RANK_SYMBOL = 195;
SQLSelectParser.DENSE_RANK_SYMBOL = 196;
SQLSelectParser.CUME_DIST_SYMBOL = 197;
SQLSelectParser.PERCENT_RANK_SYMBOL = 198;
SQLSelectParser.NTILE_SYMBOL = 199;
SQLSelectParser.LEAD_SYMBOL = 200;
SQLSelectParser.LAG_SYMBOL = 201;
SQLSelectParser.FIRST_VALUE_SYMBOL = 202;
SQLSelectParser.LAST_VALUE_SYMBOL = 203;
SQLSelectParser.NTH_VALUE_SYMBOL = 204;
SQLSelectParser.FIRST_SYMBOL = 205;
SQLSelectParser.LAST_SYMBOL = 206;
SQLSelectParser.OVER_SYMBOL = 207;
SQLSelectParser.RESPECT_SYMBOL = 208;
SQLSelectParser.NULLS_SYMBOL = 209;
SQLSelectParser.JSON_ARRAYAGG_SYMBOL = 210;
SQLSelectParser.JSON_OBJECTAGG_SYMBOL = 211;
SQLSelectParser.BOOLEAN_SYMBOL = 212;
SQLSelectParser.LANGUAGE_SYMBOL = 213;
SQLSelectParser.QUERY_SYMBOL = 214;
SQLSelectParser.EXPANSION_SYMBOL = 215;
SQLSelectParser.CHAR_SYMBOL = 216;
SQLSelectParser.CURRENT_USER_SYMBOL = 217;
SQLSelectParser.DATE_SYMBOL = 218;
SQLSelectParser.INSERT_SYMBOL = 219;
SQLSelectParser.TIME_SYMBOL = 220;
SQLSelectParser.TIMESTAMP_SYMBOL = 221;
SQLSelectParser.TIMESTAMP_LTZ_SYMBOL = 222;
SQLSelectParser.TIMESTAMP_NTZ_SYMBOL = 223;
SQLSelectParser.ZONE_SYMBOL = 224;
SQLSelectParser.USER_SYMBOL = 225;
SQLSelectParser.ADDDATE_SYMBOL = 226;
SQLSelectParser.SUBDATE_SYMBOL = 227;
SQLSelectParser.CURDATE_SYMBOL = 228;
SQLSelectParser.CURTIME_SYMBOL = 229;
SQLSelectParser.DATE_ADD_SYMBOL = 230;
SQLSelectParser.DATE_SUB_SYMBOL = 231;
SQLSelectParser.EXTRACT_SYMBOL = 232;
SQLSelectParser.GET_FORMAT_SYMBOL = 233;
SQLSelectParser.NOW_SYMBOL = 234;
SQLSelectParser.POSITION_SYMBOL = 235;
SQLSelectParser.SYSDATE_SYMBOL = 236;
SQLSelectParser.TIMESTAMP_ADD_SYMBOL = 237;
SQLSelectParser.TIMESTAMP_DIFF_SYMBOL = 238;
SQLSelectParser.UTC_DATE_SYMBOL = 239;
SQLSelectParser.UTC_TIME_SYMBOL = 240;
SQLSelectParser.UTC_TIMESTAMP_SYMBOL = 241;
SQLSelectParser.ASCII_SYMBOL = 242;
SQLSelectParser.CHARSET_SYMBOL = 243;
SQLSelectParser.COALESCE_SYMBOL = 244;
SQLSelectParser.COLLATION_SYMBOL = 245;
SQLSelectParser.DATABASE_SYMBOL = 246;
SQLSelectParser.IF_SYMBOL = 247;
SQLSelectParser.FORMAT_SYMBOL = 248;
SQLSelectParser.MICROSECOND_SYMBOL = 249;
SQLSelectParser.OLD_PASSWORD_SYMBOL = 250;
SQLSelectParser.PASSWORD_SYMBOL = 251;
SQLSelectParser.REPEAT_SYMBOL = 252;
SQLSelectParser.REPLACE_SYMBOL = 253;
SQLSelectParser.REVERSE_SYMBOL = 254;
SQLSelectParser.ROW_COUNT_SYMBOL = 255;
SQLSelectParser.TRUNCATE_SYMBOL = 256;
SQLSelectParser.WEIGHT_STRING_SYMBOL = 257;
SQLSelectParser.CONTAINS_SYMBOL = 258;
SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL = 259;
SQLSelectParser.LINESTRING_SYMBOL = 260;
SQLSelectParser.MULTILINESTRING_SYMBOL = 261;
SQLSelectParser.MULTIPOINT_SYMBOL = 262;
SQLSelectParser.MULTIPOLYGON_SYMBOL = 263;
SQLSelectParser.POINT_SYMBOL = 264;
SQLSelectParser.POLYGON_SYMBOL = 265;
SQLSelectParser.LEVEL_SYMBOL = 266;
SQLSelectParser.DATETIME_SYMBOL = 267;
SQLSelectParser.TRIM_SYMBOL = 268;
SQLSelectParser.LEADING_SYMBOL = 269;
SQLSelectParser.TRAILING_SYMBOL = 270;
SQLSelectParser.BOTH_SYMBOL = 271;
SQLSelectParser.STRING_SYMBOL = 272;
SQLSelectParser.SUBSTRING_SYMBOL = 273;
SQLSelectParser.WHEN_SYMBOL = 274;
SQLSelectParser.THEN_SYMBOL = 275;
SQLSelectParser.ELSE_SYMBOL = 276;
SQLSelectParser.SIGNED_SYMBOL = 277;
SQLSelectParser.UNSIGNED_SYMBOL = 278;
SQLSelectParser.DECIMAL_SYMBOL = 279;
SQLSelectParser.JSON_SYMBOL = 280;
SQLSelectParser.FLOAT_SYMBOL = 281;
SQLSelectParser.FLOAT_SYMBOL_4 = 282;
SQLSelectParser.FLOAT_SYMBOL_8 = 283;
SQLSelectParser.SET_SYMBOL = 284;
SQLSelectParser.SECOND_MICROSECOND_SYMBOL = 285;
SQLSelectParser.MINUTE_MICROSECOND_SYMBOL = 286;
SQLSelectParser.MINUTE_SECOND_SYMBOL = 287;
SQLSelectParser.HOUR_MICROSECOND_SYMBOL = 288;
SQLSelectParser.HOUR_SECOND_SYMBOL = 289;
SQLSelectParser.HOUR_MINUTE_SYMBOL = 290;
SQLSelectParser.DAY_MICROSECOND_SYMBOL = 291;
SQLSelectParser.DAY_SECOND_SYMBOL = 292;
SQLSelectParser.DAY_MINUTE_SYMBOL = 293;
SQLSelectParser.DAY_HOUR_SYMBOL = 294;
SQLSelectParser.YEAR_MONTH_SYMBOL = 295;
SQLSelectParser.BTREE_SYMBOL = 296;
SQLSelectParser.RTREE_SYMBOL = 297;
SQLSelectParser.HASH_SYMBOL = 298;
SQLSelectParser.REAL_SYMBOL = 299;
SQLSelectParser.DOUBLE_SYMBOL = 300;
SQLSelectParser.PRECISION_SYMBOL = 301;
SQLSelectParser.NUMERIC_SYMBOL = 302;
SQLSelectParser.NUMBER_SYMBOL = 303;
SQLSelectParser.FIXED_SYMBOL = 304;
SQLSelectParser.BIT_SYMBOL = 305;
SQLSelectParser.BOOL_SYMBOL = 306;
SQLSelectParser.VARYING_SYMBOL = 307;
SQLSelectParser.VARCHAR_SYMBOL = 308;
SQLSelectParser.VARCHAR2_SYMBOL = 309;
SQLSelectParser.NATIONAL_SYMBOL = 310;
SQLSelectParser.NVARCHAR_SYMBOL = 311;
SQLSelectParser.NVARCHAR2_SYMBOL = 312;
SQLSelectParser.NCHAR_SYMBOL = 313;
SQLSelectParser.VARBINARY_SYMBOL = 314;
SQLSelectParser.TINYBLOB_SYMBOL = 315;
SQLSelectParser.BLOB_SYMBOL = 316;
SQLSelectParser.CLOB_SYMBOL = 317;
SQLSelectParser.BFILE_SYMBOL = 318;
SQLSelectParser.RAW_SYMBOL = 319;
SQLSelectParser.MEDIUMBLOB_SYMBOL = 320;
SQLSelectParser.LONGBLOB_SYMBOL = 321;
SQLSelectParser.LONG_SYMBOL = 322;
SQLSelectParser.TINYTEXT_SYMBOL = 323;
SQLSelectParser.TEXT_SYMBOL = 324;
SQLSelectParser.MEDIUMTEXT_SYMBOL = 325;
SQLSelectParser.LONGTEXT_SYMBOL = 326;
SQLSelectParser.ENUM_SYMBOL = 327;
SQLSelectParser.SERIAL_SYMBOL = 328;
SQLSelectParser.GEOMETRY_SYMBOL = 329;
SQLSelectParser.ZEROFILL_SYMBOL = 330;
SQLSelectParser.BYTE_SYMBOL = 331;
SQLSelectParser.UNICODE_SYMBOL = 332;
SQLSelectParser.TERMINATED_SYMBOL = 333;
SQLSelectParser.OPTIONALLY_SYMBOL = 334;
SQLSelectParser.ENCLOSED_SYMBOL = 335;
SQLSelectParser.ESCAPED_SYMBOL = 336;
SQLSelectParser.LINES_SYMBOL = 337;
SQLSelectParser.STARTING_SYMBOL = 338;
SQLSelectParser.GLOBAL_SYMBOL = 339;
SQLSelectParser.LOCAL_SYMBOL = 340;
SQLSelectParser.SESSION_SYMBOL = 341;
SQLSelectParser.VARIANT_SYMBOL = 342;
SQLSelectParser.OBJECT_SYMBOL = 343;
SQLSelectParser.GEOGRAPHY_SYMBOL = 344;
SQLSelectParser.UNPIVOT_SYMBOL = 345;
SQLSelectParser.WHITESPACE = 346;
SQLSelectParser.INVALID_INPUT = 347;
SQLSelectParser.UNDERSCORE_CHARSET = 348;
SQLSelectParser.IDENTIFIER = 349;
SQLSelectParser.NCHAR_TEXT = 350;
SQLSelectParser.BACK_TICK_QUOTED_ID = 351;
SQLSelectParser.DOUBLE_QUOTED_TEXT = 352;
SQLSelectParser.SINGLE_QUOTED_TEXT = 353;
SQLSelectParser.BRACKET_QUOTED_TEXT = 354;
SQLSelectParser.BRACKET_QUOTED_NUMBER = 355;
SQLSelectParser.CURLY_BRACES_QUOTED_TEXT = 356;
SQLSelectParser.VERSION_COMMENT_START = 357;
SQLSelectParser.MYSQL_COMMENT_START = 358;
SQLSelectParser.SNOWFLAKE_COMMENT = 359;
SQLSelectParser.VERSION_COMMENT_END = 360;
SQLSelectParser.BLOCK_COMMENT = 361;
SQLSelectParser.POUND_COMMENT = 362;
SQLSelectParser.DASHDASH_COMMENT = 363;

SQLSelectParser.RULE_query = 0;
SQLSelectParser.RULE_values = 1;
SQLSelectParser.RULE_selectStatement = 2;
SQLSelectParser.RULE_selectStatementWithInto = 3;
SQLSelectParser.RULE_queryExpression = 4;
SQLSelectParser.RULE_queryExpressionBody = 5;
SQLSelectParser.RULE_queryExpressionParens = 6;
SQLSelectParser.RULE_queryPrimary = 7;
SQLSelectParser.RULE_querySpecification = 8;
SQLSelectParser.RULE_subquery = 9;
SQLSelectParser.RULE_querySpecOption = 10;
SQLSelectParser.RULE_limitClause = 11;
SQLSelectParser.RULE_limitOptions = 12;
SQLSelectParser.RULE_limitOption = 13;
SQLSelectParser.RULE_intoClause = 14;
SQLSelectParser.RULE_procedureAnalyseClause = 15;
SQLSelectParser.RULE_havingClause = 16;
SQLSelectParser.RULE_windowClause = 17;
SQLSelectParser.RULE_windowDefinition = 18;
SQLSelectParser.RULE_windowSpec = 19;
SQLSelectParser.RULE_windowSpecDetails = 20;
SQLSelectParser.RULE_windowFrameClause = 21;
SQLSelectParser.RULE_windowFrameUnits = 22;
SQLSelectParser.RULE_windowFrameExtent = 23;
SQLSelectParser.RULE_windowFrameStart = 24;
SQLSelectParser.RULE_windowFrameBetween = 25;
SQLSelectParser.RULE_windowFrameBound = 26;
SQLSelectParser.RULE_windowFrameExclusion = 27;
SQLSelectParser.RULE_withClause = 28;
SQLSelectParser.RULE_commonTableExpression = 29;
SQLSelectParser.RULE_groupByClause = 30;
SQLSelectParser.RULE_olapOption = 31;
SQLSelectParser.RULE_orderClause = 32;
SQLSelectParser.RULE_direction = 33;
SQLSelectParser.RULE_fromClause = 34;
SQLSelectParser.RULE_tableReferenceList = 35;
SQLSelectParser.RULE_tableValueConstructor = 36;
SQLSelectParser.RULE_explicitTable = 37;
SQLSelectParser.RULE_rowValueExplicit = 38;
SQLSelectParser.RULE_selectOption = 39;
SQLSelectParser.RULE_lockingClauseList = 40;
SQLSelectParser.RULE_lockingClause = 41;
SQLSelectParser.RULE_lockStrengh = 42;
SQLSelectParser.RULE_lockedRowAction = 43;
SQLSelectParser.RULE_selectItemList = 44;
SQLSelectParser.RULE_selectItem = 45;
SQLSelectParser.RULE_selectAlias = 46;
SQLSelectParser.RULE_whereClause = 47;
SQLSelectParser.RULE_qualifyClause = 48;
SQLSelectParser.RULE_tableReference = 49;
SQLSelectParser.RULE_escapedTableReference = 50;
SQLSelectParser.RULE_joinedTable = 51;
SQLSelectParser.RULE_naturalJoinType = 52;
SQLSelectParser.RULE_innerJoinType = 53;
SQLSelectParser.RULE_outerJoinType = 54;
SQLSelectParser.RULE_tableFactor = 55;
SQLSelectParser.RULE_singleTable = 56;
SQLSelectParser.RULE_singleTableParens = 57;
SQLSelectParser.RULE_derivedTable = 58;
SQLSelectParser.RULE_tableReferenceListParens = 59;
SQLSelectParser.RULE_tableFunction = 60;
SQLSelectParser.RULE_columnsClause = 61;
SQLSelectParser.RULE_jtColumn = 62;
SQLSelectParser.RULE_onEmptyOrError = 63;
SQLSelectParser.RULE_onEmpty = 64;
SQLSelectParser.RULE_onError = 65;
SQLSelectParser.RULE_jtOnResponse = 66;
SQLSelectParser.RULE_unionOption = 67;
SQLSelectParser.RULE_tableAlias = 68;
SQLSelectParser.RULE_indexHintList = 69;
SQLSelectParser.RULE_indexHint = 70;
SQLSelectParser.RULE_indexHintType = 71;
SQLSelectParser.RULE_keyOrIndex = 72;
SQLSelectParser.RULE_indexHintClause = 73;
SQLSelectParser.RULE_indexList = 74;
SQLSelectParser.RULE_indexListElement = 75;
SQLSelectParser.RULE_expr = 76;
SQLSelectParser.RULE_boolPri = 77;
SQLSelectParser.RULE_compOp = 78;
SQLSelectParser.RULE_predicate = 79;
SQLSelectParser.RULE_predicateOperations = 80;
SQLSelectParser.RULE_bitExpr = 81;
SQLSelectParser.RULE_simpleExpr = 82;
SQLSelectParser.RULE_jsonOperator = 83;
SQLSelectParser.RULE_sumExpr = 84;
SQLSelectParser.RULE_groupingOperation = 85;
SQLSelectParser.RULE_windowFunctionCall = 86;
SQLSelectParser.RULE_windowingClause = 87;
SQLSelectParser.RULE_leadLagInfo = 88;
SQLSelectParser.RULE_nullTreatment = 89;
SQLSelectParser.RULE_jsonFunction = 90;
SQLSelectParser.RULE_inSumExpr = 91;
SQLSelectParser.RULE_identListArg = 92;
SQLSelectParser.RULE_identList = 93;
SQLSelectParser.RULE_fulltextOptions = 94;
SQLSelectParser.RULE_runtimeFunctionCall = 95;
SQLSelectParser.RULE_geometryFunction = 96;
SQLSelectParser.RULE_timeFunctionParameters = 97;
SQLSelectParser.RULE_fractionalPrecision = 98;
SQLSelectParser.RULE_weightStringLevels = 99;
SQLSelectParser.RULE_weightStringLevelListItem = 100;
SQLSelectParser.RULE_dateTimeTtype = 101;
SQLSelectParser.RULE_trimFunction = 102;
SQLSelectParser.RULE_substringFunction = 103;
SQLSelectParser.RULE_functionCall = 104;
SQLSelectParser.RULE_udfExprList = 105;
SQLSelectParser.RULE_udfExpr = 106;
SQLSelectParser.RULE_unpivotClause = 107;
SQLSelectParser.RULE_variable = 108;
SQLSelectParser.RULE_userVariable = 109;
SQLSelectParser.RULE_systemVariable = 110;
SQLSelectParser.RULE_whenExpression = 111;
SQLSelectParser.RULE_thenExpression = 112;
SQLSelectParser.RULE_elseExpression = 113;
SQLSelectParser.RULE_exprList = 114;
SQLSelectParser.RULE_charset = 115;
SQLSelectParser.RULE_notRule = 116;
SQLSelectParser.RULE_not2Rule = 117;
SQLSelectParser.RULE_interval = 118;
SQLSelectParser.RULE_intervalTimeStamp = 119;
SQLSelectParser.RULE_exprListWithParentheses = 120;
SQLSelectParser.RULE_exprWithParentheses = 121;
SQLSelectParser.RULE_simpleExprWithParentheses = 122;
SQLSelectParser.RULE_orderList = 123;
SQLSelectParser.RULE_nullsOrder = 124;
SQLSelectParser.RULE_orderExpression = 125;
SQLSelectParser.RULE_indexType = 126;
SQLSelectParser.RULE_dataType = 127;
SQLSelectParser.RULE_nchar = 128;
SQLSelectParser.RULE_fieldLength = 129;
SQLSelectParser.RULE_fieldOptions = 130;
SQLSelectParser.RULE_charsetWithOptBinary = 131;
SQLSelectParser.RULE_ascii = 132;
SQLSelectParser.RULE_unicode = 133;
SQLSelectParser.RULE_wsNumCodepoints = 134;
SQLSelectParser.RULE_typeDatetimePrecision = 135;
SQLSelectParser.RULE_charsetName = 136;
SQLSelectParser.RULE_collationName = 137;
SQLSelectParser.RULE_collate = 138;
SQLSelectParser.RULE_charsetClause = 139;
SQLSelectParser.RULE_fieldsClause = 140;
SQLSelectParser.RULE_fieldTerm = 141;
SQLSelectParser.RULE_linesClause = 142;
SQLSelectParser.RULE_lineTerm = 143;
SQLSelectParser.RULE_usePartition = 144;
SQLSelectParser.RULE_columnInternalRefList = 145;
SQLSelectParser.RULE_tableAliasRefList = 146;
SQLSelectParser.RULE_pureIdentifier = 147;
SQLSelectParser.RULE_identifier = 148;
SQLSelectParser.RULE_identifierList = 149;
SQLSelectParser.RULE_identifierListWithParentheses = 150;
SQLSelectParser.RULE_qualifiedIdentifier = 151;
SQLSelectParser.RULE_jsonPathIdentifier = 152;
SQLSelectParser.RULE_dotIdentifier = 153;
SQLSelectParser.RULE_ulong_number = 154;
SQLSelectParser.RULE_real_ulong_number = 155;
SQLSelectParser.RULE_ulonglong_number = 156;
SQLSelectParser.RULE_real_ulonglong_number = 157;
SQLSelectParser.RULE_literal = 158;
SQLSelectParser.RULE_stringList = 159;
SQLSelectParser.RULE_textStringLiteral = 160;
SQLSelectParser.RULE_textString = 161;
SQLSelectParser.RULE_textLiteral = 162;
SQLSelectParser.RULE_numLiteral = 163;
SQLSelectParser.RULE_boolLiteral = 164;
SQLSelectParser.RULE_nullLiteral = 165;
SQLSelectParser.RULE_temporalLiteral = 166;
SQLSelectParser.RULE_floatOptions = 167;
SQLSelectParser.RULE_precision = 168;
SQLSelectParser.RULE_textOrIdentifier = 169;
SQLSelectParser.RULE_parentheses = 170;
SQLSelectParser.RULE_equal = 171;
SQLSelectParser.RULE_varIdentType = 172;
SQLSelectParser.RULE_identifierKeyword = 173;

class QueryContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_query;
	}

	selectStatement() {
		return this.getTypedRuleContext(SelectStatementContext, 0);
	}

	SEMICOLON_SYMBOL() {
		return this.getToken(SQLSelectParser.SEMICOLON_SYMBOL, 0);
	}

	EOF() {
		return this.getToken(SQLSelectParser.EOF, 0);
	}

	withClause() {
		return this.getTypedRuleContext(WithClauseContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterQuery(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitQuery(this);
		}
	}
}

class ValuesContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_values;
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	DEFAULT_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.DEFAULT_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.DEFAULT_SYMBOL, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterValues(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitValues(this);
		}
	}
}

class SelectStatementContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_selectStatement;
	}

	queryExpression() {
		return this.getTypedRuleContext(QueryExpressionContext, 0);
	}

	lockingClauseList() {
		return this.getTypedRuleContext(LockingClauseListContext, 0);
	}

	queryExpressionParens() {
		return this.getTypedRuleContext(QueryExpressionParensContext, 0);
	}

	selectStatementWithInto() {
		return this.getTypedRuleContext(SelectStatementWithIntoContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSelectStatement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSelectStatement(this);
		}
	}
}

class SelectStatementWithIntoContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_selectStatementWithInto;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	selectStatementWithInto() {
		return this.getTypedRuleContext(SelectStatementWithIntoContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	queryExpression() {
		return this.getTypedRuleContext(QueryExpressionContext, 0);
	}

	intoClause() {
		return this.getTypedRuleContext(IntoClauseContext, 0);
	}

	lockingClauseList() {
		return this.getTypedRuleContext(LockingClauseListContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSelectStatementWithInto(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSelectStatementWithInto(this);
		}
	}
}

class QueryExpressionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_queryExpression;
	}

	queryExpressionBody() {
		return this.getTypedRuleContext(QueryExpressionBodyContext, 0);
	}

	queryExpressionParens() {
		return this.getTypedRuleContext(QueryExpressionParensContext, 0);
	}

	withClause() {
		return this.getTypedRuleContext(WithClauseContext, 0);
	}

	procedureAnalyseClause() {
		return this.getTypedRuleContext(ProcedureAnalyseClauseContext, 0);
	}

	orderClause() {
		return this.getTypedRuleContext(OrderClauseContext, 0);
	}

	limitClause() {
		return this.getTypedRuleContext(LimitClauseContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterQueryExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitQueryExpression(this);
		}
	}
}

class QueryExpressionBodyContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_queryExpressionBody;
	}

	queryPrimary = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(QueryPrimaryContext);
		} else {
			return this.getTypedRuleContext(QueryPrimaryContext, i);
		}
	};

	queryExpressionParens = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(QueryExpressionParensContext);
		} else {
			return this.getTypedRuleContext(QueryExpressionParensContext, i);
		}
	};

	UNION_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.UNION_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.UNION_SYMBOL, i);
		}
	};

	unionOption = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(UnionOptionContext);
		} else {
			return this.getTypedRuleContext(UnionOptionContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterQueryExpressionBody(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitQueryExpressionBody(this);
		}
	}
}

class QueryExpressionParensContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_queryExpressionParens;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	queryExpressionParens() {
		return this.getTypedRuleContext(QueryExpressionParensContext, 0);
	}

	queryExpression() {
		return this.getTypedRuleContext(QueryExpressionContext, 0);
	}

	lockingClauseList() {
		return this.getTypedRuleContext(LockingClauseListContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterQueryExpressionParens(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitQueryExpressionParens(this);
		}
	}
}

class QueryPrimaryContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_queryPrimary;
	}

	querySpecification() {
		return this.getTypedRuleContext(QuerySpecificationContext, 0);
	}

	tableValueConstructor() {
		return this.getTypedRuleContext(TableValueConstructorContext, 0);
	}

	explicitTable() {
		return this.getTypedRuleContext(ExplicitTableContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterQueryPrimary(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitQueryPrimary(this);
		}
	}
}

class QuerySpecificationContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_querySpecification;
	}

	SELECT_SYMBOL() {
		return this.getToken(SQLSelectParser.SELECT_SYMBOL, 0);
	}

	selectItemList() {
		return this.getTypedRuleContext(SelectItemListContext, 0);
	}

	selectOption = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(SelectOptionContext);
		} else {
			return this.getTypedRuleContext(SelectOptionContext, i);
		}
	};

	intoClause() {
		return this.getTypedRuleContext(IntoClauseContext, 0);
	}

	fromClause() {
		return this.getTypedRuleContext(FromClauseContext, 0);
	}

	whereClause() {
		return this.getTypedRuleContext(WhereClauseContext, 0);
	}

	unpivotClause = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(UnpivotClauseContext);
		} else {
			return this.getTypedRuleContext(UnpivotClauseContext, i);
		}
	};

	qualifyClause() {
		return this.getTypedRuleContext(QualifyClauseContext, 0);
	}

	groupByClause() {
		return this.getTypedRuleContext(GroupByClauseContext, 0);
	}

	havingClause() {
		return this.getTypedRuleContext(HavingClauseContext, 0);
	}

	windowClause() {
		return this.getTypedRuleContext(WindowClauseContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterQuerySpecification(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitQuerySpecification(this);
		}
	}
}

class SubqueryContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_subquery;
	}

	query() {
		return this.getTypedRuleContext(QueryContext, 0);
	}

	queryExpressionParens() {
		return this.getTypedRuleContext(QueryExpressionParensContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSubquery(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSubquery(this);
		}
	}
}

class QuerySpecOptionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_querySpecOption;
	}

	ALL_SYMBOL() {
		return this.getToken(SQLSelectParser.ALL_SYMBOL, 0);
	}

	DISTINCT_SYMBOL() {
		return this.getToken(SQLSelectParser.DISTINCT_SYMBOL, 0);
	}

	ON_SYMBOL() {
		return this.getToken(SQLSelectParser.ON_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	qualifiedIdentifier() {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	STRAIGHT_JOIN_SYMBOL() {
		return this.getToken(SQLSelectParser.STRAIGHT_JOIN_SYMBOL, 0);
	}

	HIGH_PRIORITY_SYMBOL() {
		return this.getToken(SQLSelectParser.HIGH_PRIORITY_SYMBOL, 0);
	}

	SQL_SMALL_RESULT_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_SMALL_RESULT_SYMBOL, 0);
	}

	SQL_BIG_RESULT_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_BIG_RESULT_SYMBOL, 0);
	}

	SQL_BUFFER_RESULT_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL, 0);
	}

	SQL_CALC_FOUND_ROWS_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterQuerySpecOption(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitQuerySpecOption(this);
		}
	}
}

class LimitClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_limitClause;
	}

	LIMIT_SYMBOL() {
		return this.getToken(SQLSelectParser.LIMIT_SYMBOL, 0);
	}

	limitOptions() {
		return this.getTypedRuleContext(LimitOptionsContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLimitClause(this);
		}
	}
}

class LimitOptionsContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_limitOptions;
	}

	limitOption = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(LimitOptionContext);
		} else {
			return this.getTypedRuleContext(LimitOptionContext, i);
		}
	};

	COMMA_SYMBOL() {
		return this.getToken(SQLSelectParser.COMMA_SYMBOL, 0);
	}

	OFFSET_SYMBOL() {
		return this.getToken(SQLSelectParser.OFFSET_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLimitOptions(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLimitOptions(this);
		}
	}
}

class LimitOptionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_limitOption;
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	PARAM_MARKER() {
		return this.getToken(SQLSelectParser.PARAM_MARKER, 0);
	}

	INT_NUMBER() {
		return this.getToken(SQLSelectParser.INT_NUMBER, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLimitOption(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLimitOption(this);
		}
	}
}

class IntoClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_intoClause;
	}

	INTO_SYMBOL() {
		return this.getToken(SQLSelectParser.INTO_SYMBOL, 0);
	}

	OUTFILE_SYMBOL() {
		return this.getToken(SQLSelectParser.OUTFILE_SYMBOL, 0);
	}

	textStringLiteral() {
		return this.getTypedRuleContext(TextStringLiteralContext, 0);
	}

	DUMPFILE_SYMBOL() {
		return this.getToken(SQLSelectParser.DUMPFILE_SYMBOL, 0);
	}

	textOrIdentifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(TextOrIdentifierContext);
		} else {
			return this.getTypedRuleContext(TextOrIdentifierContext, i);
		}
	};

	userVariable = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(UserVariableContext);
		} else {
			return this.getTypedRuleContext(UserVariableContext, i);
		}
	};

	charsetClause() {
		return this.getTypedRuleContext(CharsetClauseContext, 0);
	}

	fieldsClause() {
		return this.getTypedRuleContext(FieldsClauseContext, 0);
	}

	linesClause() {
		return this.getTypedRuleContext(LinesClauseContext, 0);
	}

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIntoClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIntoClause(this);
		}
	}
}

class ProcedureAnalyseClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_procedureAnalyseClause;
	}

	PROCEDURE_SYMBOL() {
		return this.getToken(SQLSelectParser.PROCEDURE_SYMBOL, 0);
	}

	ANALYSE_SYMBOL() {
		return this.getToken(SQLSelectParser.ANALYSE_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	INT_NUMBER = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.INT_NUMBER);
		} else {
			return this.getToken(SQLSelectParser.INT_NUMBER, i);
		}
	};

	COMMA_SYMBOL() {
		return this.getToken(SQLSelectParser.COMMA_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterProcedureAnalyseClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitProcedureAnalyseClause(this);
		}
	}
}

class HavingClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_havingClause;
	}

	HAVING_SYMBOL() {
		return this.getToken(SQLSelectParser.HAVING_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitHavingClause(this);
		}
	}
}

class WindowClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowClause;
	}

	WINDOW_SYMBOL() {
		return this.getToken(SQLSelectParser.WINDOW_SYMBOL, 0);
	}

	windowDefinition = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(WindowDefinitionContext);
		} else {
			return this.getTypedRuleContext(WindowDefinitionContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowClause(this);
		}
	}
}

class WindowDefinitionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowDefinition;
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	AS_SYMBOL() {
		return this.getToken(SQLSelectParser.AS_SYMBOL, 0);
	}

	windowSpec() {
		return this.getTypedRuleContext(WindowSpecContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowDefinition(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowDefinition(this);
		}
	}
}

class WindowSpecContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowSpec;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	windowSpecDetails() {
		return this.getTypedRuleContext(WindowSpecDetailsContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowSpec(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowSpec(this);
		}
	}
}

class WindowSpecDetailsContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowSpecDetails;
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	PARTITION_SYMBOL() {
		return this.getToken(SQLSelectParser.PARTITION_SYMBOL, 0);
	}

	BY_SYMBOL() {
		return this.getToken(SQLSelectParser.BY_SYMBOL, 0);
	}

	orderList() {
		return this.getTypedRuleContext(OrderListContext, 0);
	}

	orderClause() {
		return this.getTypedRuleContext(OrderClauseContext, 0);
	}

	windowFrameClause() {
		return this.getTypedRuleContext(WindowFrameClauseContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowSpecDetails(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowSpecDetails(this);
		}
	}
}

class WindowFrameClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowFrameClause;
	}

	windowFrameUnits() {
		return this.getTypedRuleContext(WindowFrameUnitsContext, 0);
	}

	windowFrameExtent() {
		return this.getTypedRuleContext(WindowFrameExtentContext, 0);
	}

	windowFrameExclusion() {
		return this.getTypedRuleContext(WindowFrameExclusionContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowFrameClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowFrameClause(this);
		}
	}
}

class WindowFrameUnitsContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowFrameUnits;
	}

	ROWS_SYMBOL() {
		return this.getToken(SQLSelectParser.ROWS_SYMBOL, 0);
	}

	RANGE_SYMBOL() {
		return this.getToken(SQLSelectParser.RANGE_SYMBOL, 0);
	}

	GROUPS_SYMBOL() {
		return this.getToken(SQLSelectParser.GROUPS_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowFrameUnits(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowFrameUnits(this);
		}
	}
}

class WindowFrameExtentContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowFrameExtent;
	}

	windowFrameStart() {
		return this.getTypedRuleContext(WindowFrameStartContext, 0);
	}

	windowFrameBetween() {
		return this.getTypedRuleContext(WindowFrameBetweenContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowFrameExtent(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowFrameExtent(this);
		}
	}
}

class WindowFrameStartContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowFrameStart;
	}

	UNBOUNDED_SYMBOL() {
		return this.getToken(SQLSelectParser.UNBOUNDED_SYMBOL, 0);
	}

	PRECEDING_SYMBOL() {
		return this.getToken(SQLSelectParser.PRECEDING_SYMBOL, 0);
	}

	ulonglong_number() {
		return this.getTypedRuleContext(Ulonglong_numberContext, 0);
	}

	PARAM_MARKER() {
		return this.getToken(SQLSelectParser.PARAM_MARKER, 0);
	}

	INTERVAL_SYMBOL() {
		return this.getToken(SQLSelectParser.INTERVAL_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	interval() {
		return this.getTypedRuleContext(IntervalContext, 0);
	}

	CURRENT_SYMBOL() {
		return this.getToken(SQLSelectParser.CURRENT_SYMBOL, 0);
	}

	ROW_SYMBOL() {
		return this.getToken(SQLSelectParser.ROW_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowFrameStart(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowFrameStart(this);
		}
	}
}

class WindowFrameBetweenContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowFrameBetween;
	}

	BETWEEN_SYMBOL() {
		return this.getToken(SQLSelectParser.BETWEEN_SYMBOL, 0);
	}

	windowFrameBound = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(WindowFrameBoundContext);
		} else {
			return this.getTypedRuleContext(WindowFrameBoundContext, i);
		}
	};

	AND_SYMBOL() {
		return this.getToken(SQLSelectParser.AND_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowFrameBetween(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowFrameBetween(this);
		}
	}
}

class WindowFrameBoundContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowFrameBound;
	}

	windowFrameStart() {
		return this.getTypedRuleContext(WindowFrameStartContext, 0);
	}

	UNBOUNDED_SYMBOL() {
		return this.getToken(SQLSelectParser.UNBOUNDED_SYMBOL, 0);
	}

	FOLLOWING_SYMBOL() {
		return this.getToken(SQLSelectParser.FOLLOWING_SYMBOL, 0);
	}

	ulonglong_number() {
		return this.getTypedRuleContext(Ulonglong_numberContext, 0);
	}

	PARAM_MARKER() {
		return this.getToken(SQLSelectParser.PARAM_MARKER, 0);
	}

	INTERVAL_SYMBOL() {
		return this.getToken(SQLSelectParser.INTERVAL_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	interval() {
		return this.getTypedRuleContext(IntervalContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowFrameBound(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowFrameBound(this);
		}
	}
}

class WindowFrameExclusionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowFrameExclusion;
	}

	EXCLUDE_SYMBOL() {
		return this.getToken(SQLSelectParser.EXCLUDE_SYMBOL, 0);
	}

	CURRENT_SYMBOL() {
		return this.getToken(SQLSelectParser.CURRENT_SYMBOL, 0);
	}

	ROW_SYMBOL() {
		return this.getToken(SQLSelectParser.ROW_SYMBOL, 0);
	}

	GROUP_SYMBOL() {
		return this.getToken(SQLSelectParser.GROUP_SYMBOL, 0);
	}

	TIES_SYMBOL() {
		return this.getToken(SQLSelectParser.TIES_SYMBOL, 0);
	}

	NO_SYMBOL() {
		return this.getToken(SQLSelectParser.NO_SYMBOL, 0);
	}

	OTHERS_SYMBOL() {
		return this.getToken(SQLSelectParser.OTHERS_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowFrameExclusion(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowFrameExclusion(this);
		}
	}
}

class WithClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_withClause;
	}

	WITH_SYMBOL() {
		return this.getToken(SQLSelectParser.WITH_SYMBOL, 0);
	}

	commonTableExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(CommonTableExpressionContext);
		} else {
			return this.getTypedRuleContext(CommonTableExpressionContext, i);
		}
	};

	RECURSIVE_SYMBOL() {
		return this.getToken(SQLSelectParser.RECURSIVE_SYMBOL, 0);
	}

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWithClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWithClause(this);
		}
	}
}

class CommonTableExpressionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_commonTableExpression;
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	AS_SYMBOL() {
		return this.getToken(SQLSelectParser.AS_SYMBOL, 0);
	}

	subquery() {
		return this.getTypedRuleContext(SubqueryContext, 0);
	}

	columnInternalRefList() {
		return this.getTypedRuleContext(ColumnInternalRefListContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterCommonTableExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitCommonTableExpression(this);
		}
	}
}

class GroupByClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_groupByClause;
	}

	GROUP_SYMBOL() {
		return this.getToken(SQLSelectParser.GROUP_SYMBOL, 0);
	}

	BY_SYMBOL() {
		return this.getToken(SQLSelectParser.BY_SYMBOL, 0);
	}

	orderList() {
		return this.getTypedRuleContext(OrderListContext, 0);
	}

	olapOption() {
		return this.getTypedRuleContext(OlapOptionContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitGroupByClause(this);
		}
	}
}

class OlapOptionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_olapOption;
	}

	WITH_SYMBOL() {
		return this.getToken(SQLSelectParser.WITH_SYMBOL, 0);
	}

	ROLLUP_SYMBOL() {
		return this.getToken(SQLSelectParser.ROLLUP_SYMBOL, 0);
	}

	CUBE_SYMBOL() {
		return this.getToken(SQLSelectParser.CUBE_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterOlapOption(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitOlapOption(this);
		}
	}
}

class OrderClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_orderClause;
	}

	ORDER_SYMBOL() {
		return this.getToken(SQLSelectParser.ORDER_SYMBOL, 0);
	}

	BY_SYMBOL() {
		return this.getToken(SQLSelectParser.BY_SYMBOL, 0);
	}

	orderList() {
		return this.getTypedRuleContext(OrderListContext, 0);
	}

	nullsOrder() {
		return this.getTypedRuleContext(NullsOrderContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterOrderClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitOrderClause(this);
		}
	}
}

class DirectionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_direction;
	}

	ASC_SYMBOL() {
		return this.getToken(SQLSelectParser.ASC_SYMBOL, 0);
	}

	DESC_SYMBOL() {
		return this.getToken(SQLSelectParser.DESC_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterDirection(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitDirection(this);
		}
	}
}

class FromClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_fromClause;
	}

	FROM_SYMBOL() {
		return this.getToken(SQLSelectParser.FROM_SYMBOL, 0);
	}

	DUAL_SYMBOL() {
		return this.getToken(SQLSelectParser.DUAL_SYMBOL, 0);
	}

	tableReferenceList() {
		return this.getTypedRuleContext(TableReferenceListContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterFromClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitFromClause(this);
		}
	}
}

class TableReferenceListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_tableReferenceList;
	}

	tableReference = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(TableReferenceContext);
		} else {
			return this.getTypedRuleContext(TableReferenceContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTableReferenceList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTableReferenceList(this);
		}
	}
}

class TableValueConstructorContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_tableValueConstructor;
	}

	VALUES_SYMBOL() {
		return this.getToken(SQLSelectParser.VALUES_SYMBOL, 0);
	}

	rowValueExplicit = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(RowValueExplicitContext);
		} else {
			return this.getTypedRuleContext(RowValueExplicitContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTableValueConstructor(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTableValueConstructor(this);
		}
	}
}

class ExplicitTableContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_explicitTable;
	}

	TABLE_SYMBOL() {
		return this.getToken(SQLSelectParser.TABLE_SYMBOL, 0);
	}

	qualifiedIdentifier() {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterExplicitTable(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitExplicitTable(this);
		}
	}
}

class RowValueExplicitContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_rowValueExplicit;
	}

	ROW_SYMBOL() {
		return this.getToken(SQLSelectParser.ROW_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	values() {
		return this.getTypedRuleContext(ValuesContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterRowValueExplicit(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitRowValueExplicit(this);
		}
	}
}

class SelectOptionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_selectOption;
	}

	querySpecOption() {
		return this.getTypedRuleContext(QuerySpecOptionContext, 0);
	}

	SQL_NO_CACHE_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_NO_CACHE_SYMBOL, 0);
	}

	SQL_CACHE_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_CACHE_SYMBOL, 0);
	}

	MAX_STATEMENT_TIME_SYMBOL() {
		return this.getToken(SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL, 0);
	}

	EQUAL_OPERATOR() {
		return this.getToken(SQLSelectParser.EQUAL_OPERATOR, 0);
	}

	real_ulong_number() {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSelectOption(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSelectOption(this);
		}
	}
}

class LockingClauseListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_lockingClauseList;
	}

	lockingClause = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(LockingClauseContext);
		} else {
			return this.getTypedRuleContext(LockingClauseContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLockingClauseList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLockingClauseList(this);
		}
	}
}

class LockingClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_lockingClause;
	}

	FOR_SYMBOL() {
		return this.getToken(SQLSelectParser.FOR_SYMBOL, 0);
	}

	lockStrengh() {
		return this.getTypedRuleContext(LockStrenghContext, 0);
	}

	OF_SYMBOL() {
		return this.getToken(SQLSelectParser.OF_SYMBOL, 0);
	}

	tableAliasRefList() {
		return this.getTypedRuleContext(TableAliasRefListContext, 0);
	}

	lockedRowAction() {
		return this.getTypedRuleContext(LockedRowActionContext, 0);
	}

	LOCK_SYMBOL() {
		return this.getToken(SQLSelectParser.LOCK_SYMBOL, 0);
	}

	IN_SYMBOL() {
		return this.getToken(SQLSelectParser.IN_SYMBOL, 0);
	}

	SHARE_SYMBOL() {
		return this.getToken(SQLSelectParser.SHARE_SYMBOL, 0);
	}

	MODE_SYMBOL() {
		return this.getToken(SQLSelectParser.MODE_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLockingClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLockingClause(this);
		}
	}
}

class LockStrenghContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_lockStrengh;
	}

	UPDATE_SYMBOL() {
		return this.getToken(SQLSelectParser.UPDATE_SYMBOL, 0);
	}

	SHARE_SYMBOL() {
		return this.getToken(SQLSelectParser.SHARE_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLockStrengh(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLockStrengh(this);
		}
	}
}

class LockedRowActionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_lockedRowAction;
	}

	SKIP_SYMBOL() {
		return this.getToken(SQLSelectParser.SKIP_SYMBOL, 0);
	}

	LOCKED_SYMBOL() {
		return this.getToken(SQLSelectParser.LOCKED_SYMBOL, 0);
	}

	NOWAIT_SYMBOL() {
		return this.getToken(SQLSelectParser.NOWAIT_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLockedRowAction(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLockedRowAction(this);
		}
	}
}

class SelectItemListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_selectItemList;
	}

	selectItem = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(SelectItemContext);
		} else {
			return this.getTypedRuleContext(SelectItemContext, i);
		}
	};

	MULT_OPERATOR() {
		return this.getToken(SQLSelectParser.MULT_OPERATOR, 0);
	}

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSelectItemList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSelectItemList(this);
		}
	}
}

class SelectItemContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_selectItem;
	}

	qualifiedIdentifier() {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0);
	}

	jsonPathIdentifier() {
		return this.getTypedRuleContext(JsonPathIdentifierContext, 0);
	}

	selectAlias() {
		return this.getTypedRuleContext(SelectAliasContext, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSelectItem(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSelectItem(this);
		}
	}
}

class SelectAliasContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_selectAlias;
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	textStringLiteral() {
		return this.getTypedRuleContext(TextStringLiteralContext, 0);
	}

	AS_SYMBOL() {
		return this.getToken(SQLSelectParser.AS_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSelectAlias(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSelectAlias(this);
		}
	}
}

class WhereClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_whereClause;
	}

	WHERE_SYMBOL() {
		return this.getToken(SQLSelectParser.WHERE_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWhereClause(this);
		}
	}
}

class QualifyClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_qualifyClause;
	}

	QUALIFY_SYMBOL() {
		return this.getToken(SQLSelectParser.QUALIFY_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterQualifyClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitQualifyClause(this);
		}
	}
}

class TableReferenceContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_tableReference;
	}

	tableFactor() {
		return this.getTypedRuleContext(TableFactorContext, 0);
	}

	OPEN_CURLY_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_CURLY_SYMBOL, 0);
	}

	escapedTableReference() {
		return this.getTypedRuleContext(EscapedTableReferenceContext, 0);
	}

	CLOSE_CURLY_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_CURLY_SYMBOL, 0);
	}

	joinedTable = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(JoinedTableContext);
		} else {
			return this.getTypedRuleContext(JoinedTableContext, i);
		}
	};

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	OJ_SYMBOL() {
		return this.getToken(SQLSelectParser.OJ_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTableReference(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTableReference(this);
		}
	}
}

class EscapedTableReferenceContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_escapedTableReference;
	}

	tableFactor() {
		return this.getTypedRuleContext(TableFactorContext, 0);
	}

	joinedTable = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(JoinedTableContext);
		} else {
			return this.getTypedRuleContext(JoinedTableContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterEscapedTableReference(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitEscapedTableReference(this);
		}
	}
}

class JoinedTableContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_joinedTable;
	}

	innerJoinType() {
		return this.getTypedRuleContext(InnerJoinTypeContext, 0);
	}

	tableReference() {
		return this.getTypedRuleContext(TableReferenceContext, 0);
	}

	ON_SYMBOL() {
		return this.getToken(SQLSelectParser.ON_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	USING_SYMBOL() {
		return this.getToken(SQLSelectParser.USING_SYMBOL, 0);
	}

	identifierListWithParentheses() {
		return this.getTypedRuleContext(IdentifierListWithParenthesesContext, 0);
	}

	outerJoinType() {
		return this.getTypedRuleContext(OuterJoinTypeContext, 0);
	}

	naturalJoinType() {
		return this.getTypedRuleContext(NaturalJoinTypeContext, 0);
	}

	tableFactor() {
		return this.getTypedRuleContext(TableFactorContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterJoinedTable(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitJoinedTable(this);
		}
	}
}

class NaturalJoinTypeContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_naturalJoinType;
	}

	NATURAL_SYMBOL() {
		return this.getToken(SQLSelectParser.NATURAL_SYMBOL, 0);
	}

	JOIN_SYMBOL() {
		return this.getToken(SQLSelectParser.JOIN_SYMBOL, 0);
	}

	INNER_SYMBOL() {
		return this.getToken(SQLSelectParser.INNER_SYMBOL, 0);
	}

	LEFT_SYMBOL() {
		return this.getToken(SQLSelectParser.LEFT_SYMBOL, 0);
	}

	RIGHT_SYMBOL() {
		return this.getToken(SQLSelectParser.RIGHT_SYMBOL, 0);
	}

	OUTER_SYMBOL() {
		return this.getToken(SQLSelectParser.OUTER_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterNaturalJoinType(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitNaturalJoinType(this);
		}
	}
}

class InnerJoinTypeContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_innerJoinType;
	}

	JOIN_SYMBOL() {
		return this.getToken(SQLSelectParser.JOIN_SYMBOL, 0);
	}

	INNER_SYMBOL() {
		return this.getToken(SQLSelectParser.INNER_SYMBOL, 0);
	}

	CROSS_SYMBOL() {
		return this.getToken(SQLSelectParser.CROSS_SYMBOL, 0);
	}

	STRAIGHT_JOIN_SYMBOL() {
		return this.getToken(SQLSelectParser.STRAIGHT_JOIN_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterInnerJoinType(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitInnerJoinType(this);
		}
	}
}

class OuterJoinTypeContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_outerJoinType;
	}

	JOIN_SYMBOL() {
		return this.getToken(SQLSelectParser.JOIN_SYMBOL, 0);
	}

	LEFT_SYMBOL() {
		return this.getToken(SQLSelectParser.LEFT_SYMBOL, 0);
	}

	RIGHT_SYMBOL() {
		return this.getToken(SQLSelectParser.RIGHT_SYMBOL, 0);
	}

	OUTER_SYMBOL() {
		return this.getToken(SQLSelectParser.OUTER_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterOuterJoinType(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitOuterJoinType(this);
		}
	}
}

class TableFactorContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_tableFactor;
	}

	singleTable() {
		return this.getTypedRuleContext(SingleTableContext, 0);
	}

	singleTableParens() {
		return this.getTypedRuleContext(SingleTableParensContext, 0);
	}

	derivedTable() {
		return this.getTypedRuleContext(DerivedTableContext, 0);
	}

	tableReferenceListParens() {
		return this.getTypedRuleContext(TableReferenceListParensContext, 0);
	}

	tableFunction() {
		return this.getTypedRuleContext(TableFunctionContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTableFactor(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTableFactor(this);
		}
	}
}

class SingleTableContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_singleTable;
	}

	qualifiedIdentifier() {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0);
	}

	usePartition() {
		return this.getTypedRuleContext(UsePartitionContext, 0);
	}

	tableAlias() {
		return this.getTypedRuleContext(TableAliasContext, 0);
	}

	indexHintList() {
		return this.getTypedRuleContext(IndexHintListContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSingleTable(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSingleTable(this);
		}
	}
}

class SingleTableParensContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_singleTableParens;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	singleTable() {
		return this.getTypedRuleContext(SingleTableContext, 0);
	}

	singleTableParens() {
		return this.getTypedRuleContext(SingleTableParensContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSingleTableParens(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSingleTableParens(this);
		}
	}
}

class DerivedTableContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_derivedTable;
	}

	subquery() {
		return this.getTypedRuleContext(SubqueryContext, 0);
	}

	tableAlias() {
		return this.getTypedRuleContext(TableAliasContext, 0);
	}

	columnInternalRefList() {
		return this.getTypedRuleContext(ColumnInternalRefListContext, 0);
	}

	LATERAL_SYMBOL() {
		return this.getToken(SQLSelectParser.LATERAL_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterDerivedTable(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitDerivedTable(this);
		}
	}
}

class TableReferenceListParensContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_tableReferenceListParens;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	tableReferenceList() {
		return this.getTypedRuleContext(TableReferenceListContext, 0);
	}

	tableReferenceListParens() {
		return this.getTypedRuleContext(TableReferenceListParensContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTableReferenceListParens(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTableReferenceListParens(this);
		}
	}
}

class TableFunctionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_tableFunction;
	}

	JSON_TABLE_SYMBOL() {
		return this.getToken(SQLSelectParser.JSON_TABLE_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	COMMA_SYMBOL() {
		return this.getToken(SQLSelectParser.COMMA_SYMBOL, 0);
	}

	textStringLiteral() {
		return this.getTypedRuleContext(TextStringLiteralContext, 0);
	}

	columnsClause() {
		return this.getTypedRuleContext(ColumnsClauseContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	tableAlias() {
		return this.getTypedRuleContext(TableAliasContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTableFunction(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTableFunction(this);
		}
	}
}

class ColumnsClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_columnsClause;
	}

	COLUMNS_SYMBOL() {
		return this.getToken(SQLSelectParser.COLUMNS_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	jtColumn = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(JtColumnContext);
		} else {
			return this.getTypedRuleContext(JtColumnContext, i);
		}
	};

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterColumnsClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitColumnsClause(this);
		}
	}
}

class JtColumnContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_jtColumn;
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	FOR_SYMBOL() {
		return this.getToken(SQLSelectParser.FOR_SYMBOL, 0);
	}

	ORDINALITY_SYMBOL() {
		return this.getToken(SQLSelectParser.ORDINALITY_SYMBOL, 0);
	}

	dataType() {
		return this.getTypedRuleContext(DataTypeContext, 0);
	}

	PATH_SYMBOL() {
		return this.getToken(SQLSelectParser.PATH_SYMBOL, 0);
	}

	textStringLiteral() {
		return this.getTypedRuleContext(TextStringLiteralContext, 0);
	}

	collate() {
		return this.getTypedRuleContext(CollateContext, 0);
	}

	EXISTS_SYMBOL() {
		return this.getToken(SQLSelectParser.EXISTS_SYMBOL, 0);
	}

	onEmptyOrError() {
		return this.getTypedRuleContext(OnEmptyOrErrorContext, 0);
	}

	NESTED_SYMBOL() {
		return this.getToken(SQLSelectParser.NESTED_SYMBOL, 0);
	}

	columnsClause() {
		return this.getTypedRuleContext(ColumnsClauseContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterJtColumn(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitJtColumn(this);
		}
	}
}

class OnEmptyOrErrorContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_onEmptyOrError;
	}

	onEmpty() {
		return this.getTypedRuleContext(OnEmptyContext, 0);
	}

	onError() {
		return this.getTypedRuleContext(OnErrorContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterOnEmptyOrError(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitOnEmptyOrError(this);
		}
	}
}

class OnEmptyContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_onEmpty;
	}

	jtOnResponse() {
		return this.getTypedRuleContext(JtOnResponseContext, 0);
	}

	ON_SYMBOL() {
		return this.getToken(SQLSelectParser.ON_SYMBOL, 0);
	}

	EMPTY_SYMBOL() {
		return this.getToken(SQLSelectParser.EMPTY_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterOnEmpty(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitOnEmpty(this);
		}
	}
}

class OnErrorContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_onError;
	}

	jtOnResponse() {
		return this.getTypedRuleContext(JtOnResponseContext, 0);
	}

	ON_SYMBOL() {
		return this.getToken(SQLSelectParser.ON_SYMBOL, 0);
	}

	ERROR_SYMBOL() {
		return this.getToken(SQLSelectParser.ERROR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterOnError(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitOnError(this);
		}
	}
}

class JtOnResponseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_jtOnResponse;
	}

	ERROR_SYMBOL() {
		return this.getToken(SQLSelectParser.ERROR_SYMBOL, 0);
	}

	NULL_SYMBOL() {
		return this.getToken(SQLSelectParser.NULL_SYMBOL, 0);
	}

	DEFAULT_SYMBOL() {
		return this.getToken(SQLSelectParser.DEFAULT_SYMBOL, 0);
	}

	textStringLiteral() {
		return this.getTypedRuleContext(TextStringLiteralContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterJtOnResponse(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitJtOnResponse(this);
		}
	}
}

class UnionOptionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_unionOption;
	}

	DISTINCT_SYMBOL() {
		return this.getToken(SQLSelectParser.DISTINCT_SYMBOL, 0);
	}

	ALL_SYMBOL() {
		return this.getToken(SQLSelectParser.ALL_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterUnionOption(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitUnionOption(this);
		}
	}
}

class TableAliasContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_tableAlias;
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	AS_SYMBOL() {
		return this.getToken(SQLSelectParser.AS_SYMBOL, 0);
	}

	EQUAL_OPERATOR() {
		return this.getToken(SQLSelectParser.EQUAL_OPERATOR, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTableAlias(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTableAlias(this);
		}
	}
}

class IndexHintListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_indexHintList;
	}

	indexHint = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(IndexHintContext);
		} else {
			return this.getTypedRuleContext(IndexHintContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIndexHintList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIndexHintList(this);
		}
	}
}

class IndexHintContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_indexHint;
	}

	indexHintType() {
		return this.getTypedRuleContext(IndexHintTypeContext, 0);
	}

	keyOrIndex() {
		return this.getTypedRuleContext(KeyOrIndexContext, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	indexList() {
		return this.getTypedRuleContext(IndexListContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	indexHintClause() {
		return this.getTypedRuleContext(IndexHintClauseContext, 0);
	}

	USE_SYMBOL() {
		return this.getToken(SQLSelectParser.USE_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIndexHint(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIndexHint(this);
		}
	}
}

class IndexHintTypeContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_indexHintType;
	}

	FORCE_SYMBOL() {
		return this.getToken(SQLSelectParser.FORCE_SYMBOL, 0);
	}

	IGNORE_SYMBOL() {
		return this.getToken(SQLSelectParser.IGNORE_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIndexHintType(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIndexHintType(this);
		}
	}
}

class KeyOrIndexContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_keyOrIndex;
	}

	KEY_SYMBOL() {
		return this.getToken(SQLSelectParser.KEY_SYMBOL, 0);
	}

	INDEX_SYMBOL() {
		return this.getToken(SQLSelectParser.INDEX_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterKeyOrIndex(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitKeyOrIndex(this);
		}
	}
}

class IndexHintClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_indexHintClause;
	}

	FOR_SYMBOL() {
		return this.getToken(SQLSelectParser.FOR_SYMBOL, 0);
	}

	JOIN_SYMBOL() {
		return this.getToken(SQLSelectParser.JOIN_SYMBOL, 0);
	}

	ORDER_SYMBOL() {
		return this.getToken(SQLSelectParser.ORDER_SYMBOL, 0);
	}

	BY_SYMBOL() {
		return this.getToken(SQLSelectParser.BY_SYMBOL, 0);
	}

	GROUP_SYMBOL() {
		return this.getToken(SQLSelectParser.GROUP_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIndexHintClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIndexHintClause(this);
		}
	}
}

class IndexListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_indexList;
	}

	indexListElement = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(IndexListElementContext);
		} else {
			return this.getTypedRuleContext(IndexListElementContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIndexList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIndexList(this);
		}
	}
}

class IndexListElementContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_indexListElement;
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	PRIMARY_SYMBOL() {
		return this.getToken(SQLSelectParser.PRIMARY_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIndexListElement(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIndexListElement(this);
		}
	}
}

class ExprContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_expr;
	}

	boolPri() {
		return this.getTypedRuleContext(BoolPriContext, 0);
	}

	IS_SYMBOL() {
		return this.getToken(SQLSelectParser.IS_SYMBOL, 0);
	}

	TRUE_SYMBOL() {
		return this.getToken(SQLSelectParser.TRUE_SYMBOL, 0);
	}

	FALSE_SYMBOL() {
		return this.getToken(SQLSelectParser.FALSE_SYMBOL, 0);
	}

	UNKNOWN_SYMBOL() {
		return this.getToken(SQLSelectParser.UNKNOWN_SYMBOL, 0);
	}

	notRule() {
		return this.getTypedRuleContext(NotRuleContext, 0);
	}

	NOT_SYMBOL() {
		return this.getToken(SQLSelectParser.NOT_SYMBOL, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	AND_SYMBOL() {
		return this.getToken(SQLSelectParser.AND_SYMBOL, 0);
	}

	LOGICAL_AND_OPERATOR() {
		return this.getToken(SQLSelectParser.LOGICAL_AND_OPERATOR, 0);
	}

	XOR_SYMBOL() {
		return this.getToken(SQLSelectParser.XOR_SYMBOL, 0);
	}

	OR_SYMBOL() {
		return this.getToken(SQLSelectParser.OR_SYMBOL, 0);
	}

	LOGICAL_OR_OPERATOR() {
		return this.getToken(SQLSelectParser.LOGICAL_OR_OPERATOR, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterExpr(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitExpr(this);
		}
	}
}

class BoolPriContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_boolPri;
	}

	predicate() {
		return this.getTypedRuleContext(PredicateContext, 0);
	}

	boolPri() {
		return this.getTypedRuleContext(BoolPriContext, 0);
	}

	IS_SYMBOL() {
		return this.getToken(SQLSelectParser.IS_SYMBOL, 0);
	}

	NULL_SYMBOL() {
		return this.getToken(SQLSelectParser.NULL_SYMBOL, 0);
	}

	notRule() {
		return this.getTypedRuleContext(NotRuleContext, 0);
	}

	compOp() {
		return this.getTypedRuleContext(CompOpContext, 0);
	}

	subquery() {
		return this.getTypedRuleContext(SubqueryContext, 0);
	}

	ALL_SYMBOL() {
		return this.getToken(SQLSelectParser.ALL_SYMBOL, 0);
	}

	ANY_SYMBOL() {
		return this.getToken(SQLSelectParser.ANY_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterBoolPri(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitBoolPri(this);
		}
	}
}

class CompOpContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_compOp;
	}

	EQUAL_OPERATOR() {
		return this.getToken(SQLSelectParser.EQUAL_OPERATOR, 0);
	}

	NULL_SAFE_EQUAL_OPERATOR() {
		return this.getToken(SQLSelectParser.NULL_SAFE_EQUAL_OPERATOR, 0);
	}

	GREATER_OR_EQUAL_OPERATOR() {
		return this.getToken(SQLSelectParser.GREATER_OR_EQUAL_OPERATOR, 0);
	}

	GREATER_THAN_OPERATOR() {
		return this.getToken(SQLSelectParser.GREATER_THAN_OPERATOR, 0);
	}

	LESS_OR_EQUAL_OPERATOR() {
		return this.getToken(SQLSelectParser.LESS_OR_EQUAL_OPERATOR, 0);
	}

	LESS_THAN_OPERATOR() {
		return this.getToken(SQLSelectParser.LESS_THAN_OPERATOR, 0);
	}

	NOT_EQUAL_OPERATOR() {
		return this.getToken(SQLSelectParser.NOT_EQUAL_OPERATOR, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterCompOp(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitCompOp(this);
		}
	}
}

class PredicateContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_predicate;
	}

	bitExpr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(BitExprContext);
		} else {
			return this.getTypedRuleContext(BitExprContext, i);
		}
	};

	predicateOperations() {
		return this.getTypedRuleContext(PredicateOperationsContext, 0);
	}

	MEMBER_SYMBOL() {
		return this.getToken(SQLSelectParser.MEMBER_SYMBOL, 0);
	}

	simpleExprWithParentheses() {
		return this.getTypedRuleContext(SimpleExprWithParenthesesContext, 0);
	}

	SOUNDS_SYMBOL() {
		return this.getToken(SQLSelectParser.SOUNDS_SYMBOL, 0);
	}

	LIKE_SYMBOL() {
		return this.getToken(SQLSelectParser.LIKE_SYMBOL, 0);
	}

	nullTreatment() {
		return this.getTypedRuleContext(NullTreatmentContext, 0);
	}

	notRule() {
		return this.getTypedRuleContext(NotRuleContext, 0);
	}

	OF_SYMBOL() {
		return this.getToken(SQLSelectParser.OF_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterPredicate(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitPredicate(this);
		}
	}
}

class PredicateOperationsContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_predicateOperations;
	}

	IN_SYMBOL() {
		return this.getToken(SQLSelectParser.IN_SYMBOL, 0);
	}

	subquery() {
		return this.getTypedRuleContext(SubqueryContext, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	exprList() {
		return this.getTypedRuleContext(ExprListContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	BETWEEN_SYMBOL() {
		return this.getToken(SQLSelectParser.BETWEEN_SYMBOL, 0);
	}

	bitExpr() {
		return this.getTypedRuleContext(BitExprContext, 0);
	}

	AND_SYMBOL() {
		return this.getToken(SQLSelectParser.AND_SYMBOL, 0);
	}

	predicate() {
		return this.getTypedRuleContext(PredicateContext, 0);
	}

	LIKE_SYMBOL() {
		return this.getToken(SQLSelectParser.LIKE_SYMBOL, 0);
	}

	simpleExpr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(SimpleExprContext);
		} else {
			return this.getTypedRuleContext(SimpleExprContext, i);
		}
	};

	ESCAPE_SYMBOL() {
		return this.getToken(SQLSelectParser.ESCAPE_SYMBOL, 0);
	}

	REGEXP_SYMBOL() {
		return this.getToken(SQLSelectParser.REGEXP_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterPredicateOperations(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitPredicateOperations(this);
		}
	}
}

class BitExprContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_bitExpr;
	}

	simpleExpr() {
		return this.getTypedRuleContext(SimpleExprContext, 0);
	}

	bitExpr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(BitExprContext);
		} else {
			return this.getTypedRuleContext(BitExprContext, i);
		}
	};

	BITWISE_XOR_OPERATOR() {
		return this.getToken(SQLSelectParser.BITWISE_XOR_OPERATOR, 0);
	}

	MULT_OPERATOR() {
		return this.getToken(SQLSelectParser.MULT_OPERATOR, 0);
	}

	DIV_OPERATOR() {
		return this.getToken(SQLSelectParser.DIV_OPERATOR, 0);
	}

	MOD_OPERATOR() {
		return this.getToken(SQLSelectParser.MOD_OPERATOR, 0);
	}

	DIV_SYMBOL() {
		return this.getToken(SQLSelectParser.DIV_SYMBOL, 0);
	}

	MOD_SYMBOL() {
		return this.getToken(SQLSelectParser.MOD_SYMBOL, 0);
	}

	PLUS_OPERATOR() {
		return this.getToken(SQLSelectParser.PLUS_OPERATOR, 0);
	}

	MINUS_OPERATOR() {
		return this.getToken(SQLSelectParser.MINUS_OPERATOR, 0);
	}

	SHIFT_LEFT_OPERATOR() {
		return this.getToken(SQLSelectParser.SHIFT_LEFT_OPERATOR, 0);
	}

	SHIFT_RIGHT_OPERATOR() {
		return this.getToken(SQLSelectParser.SHIFT_RIGHT_OPERATOR, 0);
	}

	BITWISE_AND_OPERATOR() {
		return this.getToken(SQLSelectParser.BITWISE_AND_OPERATOR, 0);
	}

	BITWISE_OR_OPERATOR() {
		return this.getToken(SQLSelectParser.BITWISE_OR_OPERATOR, 0);
	}

	INTERVAL_SYMBOL() {
		return this.getToken(SQLSelectParser.INTERVAL_SYMBOL, 0);
	}

	SINGLE_QUOTED_TEXT() {
		return this.getToken(SQLSelectParser.SINGLE_QUOTED_TEXT, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	interval() {
		return this.getTypedRuleContext(IntervalContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterBitExpr(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitBitExpr(this);
		}
	}
}

class SimpleExprContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_simpleExpr;
	}

	variable() {
		return this.getTypedRuleContext(VariableContext, 0);
	}

	equal() {
		return this.getTypedRuleContext(EqualContext, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	qualifiedIdentifier() {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0);
	}

	jsonOperator() {
		return this.getTypedRuleContext(JsonOperatorContext, 0);
	}

	runtimeFunctionCall() {
		return this.getTypedRuleContext(RuntimeFunctionCallContext, 0);
	}

	functionCall() {
		return this.getTypedRuleContext(FunctionCallContext, 0);
	}

	literal() {
		return this.getTypedRuleContext(LiteralContext, 0);
	}

	PARAM_MARKER() {
		return this.getToken(SQLSelectParser.PARAM_MARKER, 0);
	}

	sumExpr() {
		return this.getTypedRuleContext(SumExprContext, 0);
	}

	groupingOperation() {
		return this.getTypedRuleContext(GroupingOperationContext, 0);
	}

	windowFunctionCall() {
		return this.getTypedRuleContext(WindowFunctionCallContext, 0);
	}

	simpleExpr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(SimpleExprContext);
		} else {
			return this.getTypedRuleContext(SimpleExprContext, i);
		}
	};

	PLUS_OPERATOR() {
		return this.getToken(SQLSelectParser.PLUS_OPERATOR, 0);
	}

	MINUS_OPERATOR() {
		return this.getToken(SQLSelectParser.MINUS_OPERATOR, 0);
	}

	BITWISE_NOT_OPERATOR() {
		return this.getToken(SQLSelectParser.BITWISE_NOT_OPERATOR, 0);
	}

	not2Rule() {
		return this.getTypedRuleContext(Not2RuleContext, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	exprList() {
		return this.getTypedRuleContext(ExprListContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	ROW_SYMBOL() {
		return this.getToken(SQLSelectParser.ROW_SYMBOL, 0);
	}

	subquery() {
		return this.getTypedRuleContext(SubqueryContext, 0);
	}

	EXISTS_SYMBOL() {
		return this.getToken(SQLSelectParser.EXISTS_SYMBOL, 0);
	}

	OPEN_CURLY_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_CURLY_SYMBOL, 0);
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	CLOSE_CURLY_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_CURLY_SYMBOL, 0);
	}

	MATCH_SYMBOL() {
		return this.getToken(SQLSelectParser.MATCH_SYMBOL, 0);
	}

	identListArg() {
		return this.getTypedRuleContext(IdentListArgContext, 0);
	}

	AGAINST_SYMBOL() {
		return this.getToken(SQLSelectParser.AGAINST_SYMBOL, 0);
	}

	bitExpr() {
		return this.getTypedRuleContext(BitExprContext, 0);
	}

	fulltextOptions() {
		return this.getTypedRuleContext(FulltextOptionsContext, 0);
	}

	BINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.BINARY_SYMBOL, 0);
	}

	CAST_SYMBOL() {
		return this.getToken(SQLSelectParser.CAST_SYMBOL, 0);
	}

	AS_SYMBOL() {
		return this.getToken(SQLSelectParser.AS_SYMBOL, 0);
	}

	dataType() {
		return this.getTypedRuleContext(DataTypeContext, 0);
	}

	ARRAY_SYMBOL() {
		return this.getToken(SQLSelectParser.ARRAY_SYMBOL, 0);
	}

	CASE_SYMBOL() {
		return this.getToken(SQLSelectParser.CASE_SYMBOL, 0);
	}

	END_SYMBOL() {
		return this.getToken(SQLSelectParser.END_SYMBOL, 0);
	}

	whenExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(WhenExpressionContext);
		} else {
			return this.getTypedRuleContext(WhenExpressionContext, i);
		}
	};

	thenExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ThenExpressionContext);
		} else {
			return this.getTypedRuleContext(ThenExpressionContext, i);
		}
	};

	elseExpression() {
		return this.getTypedRuleContext(ElseExpressionContext, 0);
	}

	CONVERT_SYMBOL() {
		return this.getToken(SQLSelectParser.CONVERT_SYMBOL, 0);
	}

	COMMA_SYMBOL() {
		return this.getToken(SQLSelectParser.COMMA_SYMBOL, 0);
	}

	USING_SYMBOL() {
		return this.getToken(SQLSelectParser.USING_SYMBOL, 0);
	}

	charsetName() {
		return this.getTypedRuleContext(CharsetNameContext, 0);
	}

	DEFAULT_SYMBOL() {
		return this.getToken(SQLSelectParser.DEFAULT_SYMBOL, 0);
	}

	VALUES_SYMBOL() {
		return this.getToken(SQLSelectParser.VALUES_SYMBOL, 0);
	}

	INTERVAL_SYMBOL() {
		return this.getToken(SQLSelectParser.INTERVAL_SYMBOL, 0);
	}

	interval() {
		return this.getTypedRuleContext(IntervalContext, 0);
	}

	jsonPathIdentifier() {
		return this.getTypedRuleContext(JsonPathIdentifierContext, 0);
	}

	LOGICAL_OR_OPERATOR() {
		return this.getToken(SQLSelectParser.LOGICAL_OR_OPERATOR, 0);
	}

	COLLATE_SYMBOL() {
		return this.getToken(SQLSelectParser.COLLATE_SYMBOL, 0);
	}

	textOrIdentifier() {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0);
	}

	CAST_COLON_SYMBOL() {
		return this.getToken(SQLSelectParser.CAST_COLON_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSimpleExpr(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSimpleExpr(this);
		}
	}
}

class JsonOperatorContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_jsonOperator;
	}

	JSON_SEPARATOR_SYMBOL() {
		return this.getToken(SQLSelectParser.JSON_SEPARATOR_SYMBOL, 0);
	}

	JSON_UNQUOTED_SEPARATOR_SYMBOL() {
		return this.getToken(SQLSelectParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0);
	}

	textStringLiteral() {
		return this.getTypedRuleContext(TextStringLiteralContext, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterJsonOperator(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitJsonOperator(this);
		}
	}
}

class SumExprContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_sumExpr;
	}

	AVG_SYMBOL() {
		return this.getToken(SQLSelectParser.AVG_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	inSumExpr() {
		return this.getTypedRuleContext(InSumExprContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	DISTINCT_SYMBOL() {
		return this.getToken(SQLSelectParser.DISTINCT_SYMBOL, 0);
	}

	windowingClause() {
		return this.getTypedRuleContext(WindowingClauseContext, 0);
	}

	BIT_AND_SYMBOL() {
		return this.getToken(SQLSelectParser.BIT_AND_SYMBOL, 0);
	}

	BIT_OR_SYMBOL() {
		return this.getToken(SQLSelectParser.BIT_OR_SYMBOL, 0);
	}

	BIT_XOR_SYMBOL() {
		return this.getToken(SQLSelectParser.BIT_XOR_SYMBOL, 0);
	}

	jsonFunction() {
		return this.getTypedRuleContext(JsonFunctionContext, 0);
	}

	COUNT_SYMBOL() {
		return this.getToken(SQLSelectParser.COUNT_SYMBOL, 0);
	}

	MULT_OPERATOR() {
		return this.getToken(SQLSelectParser.MULT_OPERATOR, 0);
	}

	ALL_SYMBOL() {
		return this.getToken(SQLSelectParser.ALL_SYMBOL, 0);
	}

	exprList() {
		return this.getTypedRuleContext(ExprListContext, 0);
	}

	MIN_SYMBOL() {
		return this.getToken(SQLSelectParser.MIN_SYMBOL, 0);
	}

	MAX_SYMBOL() {
		return this.getToken(SQLSelectParser.MAX_SYMBOL, 0);
	}

	STD_SYMBOL() {
		return this.getToken(SQLSelectParser.STD_SYMBOL, 0);
	}

	VARIANCE_SYMBOL() {
		return this.getToken(SQLSelectParser.VARIANCE_SYMBOL, 0);
	}

	STDDEV_SAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.STDDEV_SAMP_SYMBOL, 0);
	}

	VAR_SAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.VAR_SAMP_SYMBOL, 0);
	}

	SUM_SYMBOL() {
		return this.getToken(SQLSelectParser.SUM_SYMBOL, 0);
	}

	GROUP_CONCAT_SYMBOL() {
		return this.getToken(SQLSelectParser.GROUP_CONCAT_SYMBOL, 0);
	}

	orderClause() {
		return this.getTypedRuleContext(OrderClauseContext, 0);
	}

	SEPARATOR_SYMBOL() {
		return this.getToken(SQLSelectParser.SEPARATOR_SYMBOL, 0);
	}

	textString() {
		return this.getTypedRuleContext(TextStringContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSumExpr(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSumExpr(this);
		}
	}
}

class GroupingOperationContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_groupingOperation;
	}

	GROUPING_SYMBOL() {
		return this.getToken(SQLSelectParser.GROUPING_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	exprList() {
		return this.getTypedRuleContext(ExprListContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterGroupingOperation(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitGroupingOperation(this);
		}
	}
}

class WindowFunctionCallContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowFunctionCall;
	}

	parentheses() {
		return this.getTypedRuleContext(ParenthesesContext, 0);
	}

	windowingClause() {
		return this.getTypedRuleContext(WindowingClauseContext, 0);
	}

	ROW_NUMBER_SYMBOL() {
		return this.getToken(SQLSelectParser.ROW_NUMBER_SYMBOL, 0);
	}

	RANK_SYMBOL() {
		return this.getToken(SQLSelectParser.RANK_SYMBOL, 0);
	}

	DENSE_RANK_SYMBOL() {
		return this.getToken(SQLSelectParser.DENSE_RANK_SYMBOL, 0);
	}

	CUME_DIST_SYMBOL() {
		return this.getToken(SQLSelectParser.CUME_DIST_SYMBOL, 0);
	}

	PERCENT_RANK_SYMBOL() {
		return this.getToken(SQLSelectParser.PERCENT_RANK_SYMBOL, 0);
	}

	NTILE_SYMBOL() {
		return this.getToken(SQLSelectParser.NTILE_SYMBOL, 0);
	}

	simpleExprWithParentheses() {
		return this.getTypedRuleContext(SimpleExprWithParenthesesContext, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	LEAD_SYMBOL() {
		return this.getToken(SQLSelectParser.LEAD_SYMBOL, 0);
	}

	LAG_SYMBOL() {
		return this.getToken(SQLSelectParser.LAG_SYMBOL, 0);
	}

	leadLagInfo() {
		return this.getTypedRuleContext(LeadLagInfoContext, 0);
	}

	nullTreatment() {
		return this.getTypedRuleContext(NullTreatmentContext, 0);
	}

	exprWithParentheses() {
		return this.getTypedRuleContext(ExprWithParenthesesContext, 0);
	}

	FIRST_VALUE_SYMBOL() {
		return this.getToken(SQLSelectParser.FIRST_VALUE_SYMBOL, 0);
	}

	LAST_VALUE_SYMBOL() {
		return this.getToken(SQLSelectParser.LAST_VALUE_SYMBOL, 0);
	}

	NTH_VALUE_SYMBOL() {
		return this.getToken(SQLSelectParser.NTH_VALUE_SYMBOL, 0);
	}

	COMMA_SYMBOL() {
		return this.getToken(SQLSelectParser.COMMA_SYMBOL, 0);
	}

	simpleExpr() {
		return this.getTypedRuleContext(SimpleExprContext, 0);
	}

	FROM_SYMBOL() {
		return this.getToken(SQLSelectParser.FROM_SYMBOL, 0);
	}

	FIRST_SYMBOL() {
		return this.getToken(SQLSelectParser.FIRST_SYMBOL, 0);
	}

	LAST_SYMBOL() {
		return this.getToken(SQLSelectParser.LAST_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowFunctionCall(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowFunctionCall(this);
		}
	}
}

class WindowingClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_windowingClause;
	}

	OVER_SYMBOL() {
		return this.getToken(SQLSelectParser.OVER_SYMBOL, 0);
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	windowSpec() {
		return this.getTypedRuleContext(WindowSpecContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWindowingClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWindowingClause(this);
		}
	}
}

class LeadLagInfoContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_leadLagInfo;
	}

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	ulonglong_number() {
		return this.getTypedRuleContext(Ulonglong_numberContext, 0);
	}

	PARAM_MARKER() {
		return this.getToken(SQLSelectParser.PARAM_MARKER, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLeadLagInfo(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLeadLagInfo(this);
		}
	}
}

class NullTreatmentContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_nullTreatment;
	}

	NULLS_SYMBOL() {
		return this.getToken(SQLSelectParser.NULLS_SYMBOL, 0);
	}

	RESPECT_SYMBOL() {
		return this.getToken(SQLSelectParser.RESPECT_SYMBOL, 0);
	}

	IGNORE_SYMBOL() {
		return this.getToken(SQLSelectParser.IGNORE_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterNullTreatment(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitNullTreatment(this);
		}
	}
}

class JsonFunctionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_jsonFunction;
	}

	JSON_ARRAYAGG_SYMBOL() {
		return this.getToken(SQLSelectParser.JSON_ARRAYAGG_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	inSumExpr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(InSumExprContext);
		} else {
			return this.getTypedRuleContext(InSumExprContext, i);
		}
	};

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	windowingClause() {
		return this.getTypedRuleContext(WindowingClauseContext, 0);
	}

	JSON_OBJECTAGG_SYMBOL() {
		return this.getToken(SQLSelectParser.JSON_OBJECTAGG_SYMBOL, 0);
	}

	COMMA_SYMBOL() {
		return this.getToken(SQLSelectParser.COMMA_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterJsonFunction(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitJsonFunction(this);
		}
	}
}

class InSumExprContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_inSumExpr;
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	ALL_SYMBOL() {
		return this.getToken(SQLSelectParser.ALL_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterInSumExpr(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitInSumExpr(this);
		}
	}
}

class IdentListArgContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_identListArg;
	}

	identList() {
		return this.getTypedRuleContext(IdentListContext, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIdentListArg(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIdentListArg(this);
		}
	}
}

class IdentListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_identList;
	}

	qualifiedIdentifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(QualifiedIdentifierContext);
		} else {
			return this.getTypedRuleContext(QualifiedIdentifierContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIdentList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIdentList(this);
		}
	}
}

class FulltextOptionsContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_fulltextOptions;
	}

	IN_SYMBOL() {
		return this.getToken(SQLSelectParser.IN_SYMBOL, 0);
	}

	BOOLEAN_SYMBOL() {
		return this.getToken(SQLSelectParser.BOOLEAN_SYMBOL, 0);
	}

	MODE_SYMBOL() {
		return this.getToken(SQLSelectParser.MODE_SYMBOL, 0);
	}

	NATURAL_SYMBOL() {
		return this.getToken(SQLSelectParser.NATURAL_SYMBOL, 0);
	}

	LANGUAGE_SYMBOL() {
		return this.getToken(SQLSelectParser.LANGUAGE_SYMBOL, 0);
	}

	WITH_SYMBOL() {
		return this.getToken(SQLSelectParser.WITH_SYMBOL, 0);
	}

	QUERY_SYMBOL() {
		return this.getToken(SQLSelectParser.QUERY_SYMBOL, 0);
	}

	EXPANSION_SYMBOL() {
		return this.getToken(SQLSelectParser.EXPANSION_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterFulltextOptions(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitFulltextOptions(this);
		}
	}
}

class RuntimeFunctionCallContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_runtimeFunctionCall;
	}

	CHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CHAR_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	exprList() {
		return this.getTypedRuleContext(ExprListContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	USING_SYMBOL() {
		return this.getToken(SQLSelectParser.USING_SYMBOL, 0);
	}

	charsetName() {
		return this.getTypedRuleContext(CharsetNameContext, 0);
	}

	CURRENT_USER_SYMBOL() {
		return this.getToken(SQLSelectParser.CURRENT_USER_SYMBOL, 0);
	}

	parentheses() {
		return this.getTypedRuleContext(ParenthesesContext, 0);
	}

	DATE_SYMBOL() {
		return this.getToken(SQLSelectParser.DATE_SYMBOL, 0);
	}

	exprWithParentheses() {
		return this.getTypedRuleContext(ExprWithParenthesesContext, 0);
	}

	DAY_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_SYMBOL, 0);
	}

	HOUR_SYMBOL() {
		return this.getToken(SQLSelectParser.HOUR_SYMBOL, 0);
	}

	INSERT_SYMBOL() {
		return this.getToken(SQLSelectParser.INSERT_SYMBOL, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	INTERVAL_SYMBOL() {
		return this.getToken(SQLSelectParser.INTERVAL_SYMBOL, 0);
	}

	LEFT_SYMBOL() {
		return this.getToken(SQLSelectParser.LEFT_SYMBOL, 0);
	}

	MINUTE_SYMBOL() {
		return this.getToken(SQLSelectParser.MINUTE_SYMBOL, 0);
	}

	MONTH_SYMBOL() {
		return this.getToken(SQLSelectParser.MONTH_SYMBOL, 0);
	}

	RIGHT_SYMBOL() {
		return this.getToken(SQLSelectParser.RIGHT_SYMBOL, 0);
	}

	SECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.SECOND_SYMBOL, 0);
	}

	TIME_SYMBOL() {
		return this.getToken(SQLSelectParser.TIME_SYMBOL, 0);
	}

	TIMESTAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_SYMBOL, 0);
	}

	trimFunction() {
		return this.getTypedRuleContext(TrimFunctionContext, 0);
	}

	USER_SYMBOL() {
		return this.getToken(SQLSelectParser.USER_SYMBOL, 0);
	}

	VALUES_SYMBOL() {
		return this.getToken(SQLSelectParser.VALUES_SYMBOL, 0);
	}

	YEAR_SYMBOL() {
		return this.getToken(SQLSelectParser.YEAR_SYMBOL, 0);
	}

	ADDDATE_SYMBOL() {
		return this.getToken(SQLSelectParser.ADDDATE_SYMBOL, 0);
	}

	SUBDATE_SYMBOL() {
		return this.getToken(SQLSelectParser.SUBDATE_SYMBOL, 0);
	}

	interval() {
		return this.getTypedRuleContext(IntervalContext, 0);
	}

	CURDATE_SYMBOL() {
		return this.getToken(SQLSelectParser.CURDATE_SYMBOL, 0);
	}

	CURTIME_SYMBOL() {
		return this.getToken(SQLSelectParser.CURTIME_SYMBOL, 0);
	}

	timeFunctionParameters() {
		return this.getTypedRuleContext(TimeFunctionParametersContext, 0);
	}

	DATE_ADD_SYMBOL() {
		return this.getToken(SQLSelectParser.DATE_ADD_SYMBOL, 0);
	}

	DATE_SUB_SYMBOL() {
		return this.getToken(SQLSelectParser.DATE_SUB_SYMBOL, 0);
	}

	EXTRACT_SYMBOL() {
		return this.getToken(SQLSelectParser.EXTRACT_SYMBOL, 0);
	}

	FROM_SYMBOL() {
		return this.getToken(SQLSelectParser.FROM_SYMBOL, 0);
	}

	GET_FORMAT_SYMBOL() {
		return this.getToken(SQLSelectParser.GET_FORMAT_SYMBOL, 0);
	}

	dateTimeTtype() {
		return this.getTypedRuleContext(DateTimeTtypeContext, 0);
	}

	NOW_SYMBOL() {
		return this.getToken(SQLSelectParser.NOW_SYMBOL, 0);
	}

	POSITION_SYMBOL() {
		return this.getToken(SQLSelectParser.POSITION_SYMBOL, 0);
	}

	bitExpr() {
		return this.getTypedRuleContext(BitExprContext, 0);
	}

	IN_SYMBOL() {
		return this.getToken(SQLSelectParser.IN_SYMBOL, 0);
	}

	substringFunction() {
		return this.getTypedRuleContext(SubstringFunctionContext, 0);
	}

	SYSDATE_SYMBOL() {
		return this.getToken(SQLSelectParser.SYSDATE_SYMBOL, 0);
	}

	intervalTimeStamp() {
		return this.getTypedRuleContext(IntervalTimeStampContext, 0);
	}

	TIMESTAMP_ADD_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_ADD_SYMBOL, 0);
	}

	TIMESTAMP_DIFF_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_DIFF_SYMBOL, 0);
	}

	UTC_DATE_SYMBOL() {
		return this.getToken(SQLSelectParser.UTC_DATE_SYMBOL, 0);
	}

	UTC_TIME_SYMBOL() {
		return this.getToken(SQLSelectParser.UTC_TIME_SYMBOL, 0);
	}

	UTC_TIMESTAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.UTC_TIMESTAMP_SYMBOL, 0);
	}

	ASCII_SYMBOL() {
		return this.getToken(SQLSelectParser.ASCII_SYMBOL, 0);
	}

	CHARSET_SYMBOL() {
		return this.getToken(SQLSelectParser.CHARSET_SYMBOL, 0);
	}

	COALESCE_SYMBOL() {
		return this.getToken(SQLSelectParser.COALESCE_SYMBOL, 0);
	}

	exprListWithParentheses() {
		return this.getTypedRuleContext(ExprListWithParenthesesContext, 0);
	}

	COLLATION_SYMBOL() {
		return this.getToken(SQLSelectParser.COLLATION_SYMBOL, 0);
	}

	DATABASE_SYMBOL() {
		return this.getToken(SQLSelectParser.DATABASE_SYMBOL, 0);
	}

	IF_SYMBOL() {
		return this.getToken(SQLSelectParser.IF_SYMBOL, 0);
	}

	FORMAT_SYMBOL() {
		return this.getToken(SQLSelectParser.FORMAT_SYMBOL, 0);
	}

	MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.MICROSECOND_SYMBOL, 0);
	}

	MOD_SYMBOL() {
		return this.getToken(SQLSelectParser.MOD_SYMBOL, 0);
	}

	OLD_PASSWORD_SYMBOL() {
		return this.getToken(SQLSelectParser.OLD_PASSWORD_SYMBOL, 0);
	}

	textLiteral() {
		return this.getTypedRuleContext(TextLiteralContext, 0);
	}

	PASSWORD_SYMBOL() {
		return this.getToken(SQLSelectParser.PASSWORD_SYMBOL, 0);
	}

	QUARTER_SYMBOL() {
		return this.getToken(SQLSelectParser.QUARTER_SYMBOL, 0);
	}

	REPEAT_SYMBOL() {
		return this.getToken(SQLSelectParser.REPEAT_SYMBOL, 0);
	}

	REPLACE_SYMBOL() {
		return this.getToken(SQLSelectParser.REPLACE_SYMBOL, 0);
	}

	REVERSE_SYMBOL() {
		return this.getToken(SQLSelectParser.REVERSE_SYMBOL, 0);
	}

	ROW_COUNT_SYMBOL() {
		return this.getToken(SQLSelectParser.ROW_COUNT_SYMBOL, 0);
	}

	TRUNCATE_SYMBOL() {
		return this.getToken(SQLSelectParser.TRUNCATE_SYMBOL, 0);
	}

	WEEK_SYMBOL() {
		return this.getToken(SQLSelectParser.WEEK_SYMBOL, 0);
	}

	WEIGHT_STRING_SYMBOL() {
		return this.getToken(SQLSelectParser.WEIGHT_STRING_SYMBOL, 0);
	}

	AS_SYMBOL() {
		return this.getToken(SQLSelectParser.AS_SYMBOL, 0);
	}

	BINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.BINARY_SYMBOL, 0);
	}

	wsNumCodepoints() {
		return this.getTypedRuleContext(WsNumCodepointsContext, 0);
	}

	ulong_number = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Ulong_numberContext);
		} else {
			return this.getTypedRuleContext(Ulong_numberContext, i);
		}
	};

	weightStringLevels() {
		return this.getTypedRuleContext(WeightStringLevelsContext, 0);
	}

	geometryFunction() {
		return this.getTypedRuleContext(GeometryFunctionContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterRuntimeFunctionCall(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitRuntimeFunctionCall(this);
		}
	}
}

class GeometryFunctionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_geometryFunction;
	}

	CONTAINS_SYMBOL() {
		return this.getToken(SQLSelectParser.CONTAINS_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	COMMA_SYMBOL() {
		return this.getToken(SQLSelectParser.COMMA_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	GEOMETRYCOLLECTION_SYMBOL() {
		return this.getToken(SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	}

	exprList() {
		return this.getTypedRuleContext(ExprListContext, 0);
	}

	LINESTRING_SYMBOL() {
		return this.getToken(SQLSelectParser.LINESTRING_SYMBOL, 0);
	}

	exprListWithParentheses() {
		return this.getTypedRuleContext(ExprListWithParenthesesContext, 0);
	}

	MULTILINESTRING_SYMBOL() {
		return this.getToken(SQLSelectParser.MULTILINESTRING_SYMBOL, 0);
	}

	MULTIPOINT_SYMBOL() {
		return this.getToken(SQLSelectParser.MULTIPOINT_SYMBOL, 0);
	}

	MULTIPOLYGON_SYMBOL() {
		return this.getToken(SQLSelectParser.MULTIPOLYGON_SYMBOL, 0);
	}

	POINT_SYMBOL() {
		return this.getToken(SQLSelectParser.POINT_SYMBOL, 0);
	}

	POLYGON_SYMBOL() {
		return this.getToken(SQLSelectParser.POLYGON_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterGeometryFunction(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitGeometryFunction(this);
		}
	}
}

class TimeFunctionParametersContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_timeFunctionParameters;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	fractionalPrecision() {
		return this.getTypedRuleContext(FractionalPrecisionContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTimeFunctionParameters(this);
		}
	}
}

class FractionalPrecisionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_fractionalPrecision;
	}

	INT_NUMBER() {
		return this.getToken(SQLSelectParser.INT_NUMBER, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterFractionalPrecision(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitFractionalPrecision(this);
		}
	}
}

class WeightStringLevelsContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_weightStringLevels;
	}

	LEVEL_SYMBOL() {
		return this.getToken(SQLSelectParser.LEVEL_SYMBOL, 0);
	}

	real_ulong_number = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(Real_ulong_numberContext);
		} else {
			return this.getTypedRuleContext(Real_ulong_numberContext, i);
		}
	};

	MINUS_OPERATOR() {
		return this.getToken(SQLSelectParser.MINUS_OPERATOR, 0);
	}

	weightStringLevelListItem = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(WeightStringLevelListItemContext);
		} else {
			return this.getTypedRuleContext(WeightStringLevelListItemContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWeightStringLevels(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWeightStringLevels(this);
		}
	}
}

class WeightStringLevelListItemContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_weightStringLevelListItem;
	}

	real_ulong_number() {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0);
	}

	REVERSE_SYMBOL() {
		return this.getToken(SQLSelectParser.REVERSE_SYMBOL, 0);
	}

	ASC_SYMBOL() {
		return this.getToken(SQLSelectParser.ASC_SYMBOL, 0);
	}

	DESC_SYMBOL() {
		return this.getToken(SQLSelectParser.DESC_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWeightStringLevelListItem(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWeightStringLevelListItem(this);
		}
	}
}

class DateTimeTtypeContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_dateTimeTtype;
	}

	DATE_SYMBOL() {
		return this.getToken(SQLSelectParser.DATE_SYMBOL, 0);
	}

	TIME_SYMBOL() {
		return this.getToken(SQLSelectParser.TIME_SYMBOL, 0);
	}

	DATETIME_SYMBOL() {
		return this.getToken(SQLSelectParser.DATETIME_SYMBOL, 0);
	}

	TIMESTAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterDateTimeTtype(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitDateTimeTtype(this);
		}
	}
}

class TrimFunctionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_trimFunction;
	}

	TRIM_SYMBOL() {
		return this.getToken(SQLSelectParser.TRIM_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	LEADING_SYMBOL() {
		return this.getToken(SQLSelectParser.LEADING_SYMBOL, 0);
	}

	FROM_SYMBOL() {
		return this.getToken(SQLSelectParser.FROM_SYMBOL, 0);
	}

	TRAILING_SYMBOL() {
		return this.getToken(SQLSelectParser.TRAILING_SYMBOL, 0);
	}

	BOTH_SYMBOL() {
		return this.getToken(SQLSelectParser.BOTH_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTrimFunction(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTrimFunction(this);
		}
	}
}

class SubstringFunctionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_substringFunction;
	}

	SUBSTRING_SYMBOL() {
		return this.getToken(SQLSelectParser.SUBSTRING_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	FROM_SYMBOL() {
		return this.getToken(SQLSelectParser.FROM_SYMBOL, 0);
	}

	FOR_SYMBOL() {
		return this.getToken(SQLSelectParser.FOR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSubstringFunction(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSubstringFunction(this);
		}
	}
}

class FunctionCallContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_functionCall;
	}

	pureIdentifier() {
		return this.getTypedRuleContext(PureIdentifierContext, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	udfExprList() {
		return this.getTypedRuleContext(UdfExprListContext, 0);
	}

	qualifiedIdentifier() {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0);
	}

	exprList() {
		return this.getTypedRuleContext(ExprListContext, 0);
	}

	selectItem() {
		return this.getTypedRuleContext(SelectItemContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitFunctionCall(this);
		}
	}
}

class UdfExprListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_udfExprList;
	}

	udfExpr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(UdfExprContext);
		} else {
			return this.getTypedRuleContext(UdfExprContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterUdfExprList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitUdfExprList(this);
		}
	}
}

class UdfExprContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_udfExpr;
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	qualifiedIdentifier() {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0);
	}

	selectAlias() {
		return this.getTypedRuleContext(SelectAliasContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterUdfExpr(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitUdfExpr(this);
		}
	}
}

class UnpivotClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_unpivotClause;
	}

	UNPIVOT_SYMBOL() {
		return this.getToken(SQLSelectParser.UNPIVOT_SYMBOL, 0);
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	identifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(IdentifierContext);
		} else {
			return this.getTypedRuleContext(IdentifierContext, i);
		}
	};

	IN_SYMBOL() {
		return this.getToken(SQLSelectParser.IN_SYMBOL, 0);
	}

	identifierListWithParentheses() {
		return this.getTypedRuleContext(IdentifierListWithParenthesesContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	FOR_SYMBOL() {
		return this.getToken(SQLSelectParser.FOR_SYMBOL, 0);
	}

	whereClause = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(WhereClauseContext);
		} else {
			return this.getTypedRuleContext(WhereClauseContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterUnpivotClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitUnpivotClause(this);
		}
	}
}

class VariableContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_variable;
	}

	userVariable() {
		return this.getTypedRuleContext(UserVariableContext, 0);
	}

	systemVariable() {
		return this.getTypedRuleContext(SystemVariableContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterVariable(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitVariable(this);
		}
	}
}

class UserVariableContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_userVariable;
	}

	AT_SIGN_SYMBOL() {
		return this.getToken(SQLSelectParser.AT_SIGN_SYMBOL, 0);
	}

	textOrIdentifier() {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0);
	}

	AT_TEXT_SUFFIX() {
		return this.getToken(SQLSelectParser.AT_TEXT_SUFFIX, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterUserVariable(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitUserVariable(this);
		}
	}
}

class SystemVariableContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_systemVariable;
	}

	AT_AT_SIGN_SYMBOL() {
		return this.getToken(SQLSelectParser.AT_AT_SIGN_SYMBOL, 0);
	}

	textOrIdentifier() {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0);
	}

	varIdentType() {
		return this.getTypedRuleContext(VarIdentTypeContext, 0);
	}

	dotIdentifier() {
		return this.getTypedRuleContext(DotIdentifierContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSystemVariable(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSystemVariable(this);
		}
	}
}

class WhenExpressionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_whenExpression;
	}

	WHEN_SYMBOL() {
		return this.getToken(SQLSelectParser.WHEN_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWhenExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWhenExpression(this);
		}
	}
}

class ThenExpressionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_thenExpression;
	}

	THEN_SYMBOL() {
		return this.getToken(SQLSelectParser.THEN_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterThenExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitThenExpression(this);
		}
	}
}

class ElseExpressionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_elseExpression;
	}

	ELSE_SYMBOL() {
		return this.getToken(SQLSelectParser.ELSE_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterElseExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitElseExpression(this);
		}
	}
}

class ExprListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_exprList;
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterExprList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitExprList(this);
		}
	}
}

class CharsetContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_charset;
	}

	CHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CHAR_SYMBOL, 0);
	}

	SET_SYMBOL() {
		return this.getToken(SQLSelectParser.SET_SYMBOL, 0);
	}

	CHARSET_SYMBOL() {
		return this.getToken(SQLSelectParser.CHARSET_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterCharset(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitCharset(this);
		}
	}
}

class NotRuleContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_notRule;
	}

	NOT_SYMBOL() {
		return this.getToken(SQLSelectParser.NOT_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterNotRule(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitNotRule(this);
		}
	}
}

class Not2RuleContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_not2Rule;
	}

	LOGICAL_NOT_OPERATOR() {
		return this.getToken(SQLSelectParser.LOGICAL_NOT_OPERATOR, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterNot2Rule(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitNot2Rule(this);
		}
	}
}

class IntervalContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_interval;
	}

	intervalTimeStamp() {
		return this.getTypedRuleContext(IntervalTimeStampContext, 0);
	}

	SECOND_MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.SECOND_MICROSECOND_SYMBOL, 0);
	}

	MINUTE_MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.MINUTE_MICROSECOND_SYMBOL, 0);
	}

	MINUTE_SECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.MINUTE_SECOND_SYMBOL, 0);
	}

	HOUR_MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.HOUR_MICROSECOND_SYMBOL, 0);
	}

	HOUR_SECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.HOUR_SECOND_SYMBOL, 0);
	}

	HOUR_MINUTE_SYMBOL() {
		return this.getToken(SQLSelectParser.HOUR_MINUTE_SYMBOL, 0);
	}

	DAY_MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_MICROSECOND_SYMBOL, 0);
	}

	DAY_SECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_SECOND_SYMBOL, 0);
	}

	DAY_MINUTE_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_MINUTE_SYMBOL, 0);
	}

	DAY_HOUR_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_HOUR_SYMBOL, 0);
	}

	YEAR_MONTH_SYMBOL() {
		return this.getToken(SQLSelectParser.YEAR_MONTH_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterInterval(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitInterval(this);
		}
	}
}

class IntervalTimeStampContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_intervalTimeStamp;
	}

	MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.MICROSECOND_SYMBOL, 0);
	}

	SECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.SECOND_SYMBOL, 0);
	}

	MINUTE_SYMBOL() {
		return this.getToken(SQLSelectParser.MINUTE_SYMBOL, 0);
	}

	HOUR_SYMBOL() {
		return this.getToken(SQLSelectParser.HOUR_SYMBOL, 0);
	}

	DAY_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_SYMBOL, 0);
	}

	WEEK_SYMBOL() {
		return this.getToken(SQLSelectParser.WEEK_SYMBOL, 0);
	}

	MONTH_SYMBOL() {
		return this.getToken(SQLSelectParser.MONTH_SYMBOL, 0);
	}

	QUARTER_SYMBOL() {
		return this.getToken(SQLSelectParser.QUARTER_SYMBOL, 0);
	}

	YEAR_SYMBOL() {
		return this.getToken(SQLSelectParser.YEAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIntervalTimeStamp(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIntervalTimeStamp(this);
		}
	}
}

class ExprListWithParenthesesContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_exprListWithParentheses;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	exprList() {
		return this.getTypedRuleContext(ExprListContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterExprListWithParentheses(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitExprListWithParentheses(this);
		}
	}
}

class ExprWithParenthesesContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_exprWithParentheses;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterExprWithParentheses(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitExprWithParentheses(this);
		}
	}
}

class SimpleExprWithParenthesesContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_simpleExprWithParentheses;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	simpleExpr() {
		return this.getTypedRuleContext(SimpleExprContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterSimpleExprWithParentheses(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitSimpleExprWithParentheses(this);
		}
	}
}

class OrderListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_orderList;
	}

	orderExpression = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(OrderExpressionContext);
		} else {
			return this.getTypedRuleContext(OrderExpressionContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterOrderList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitOrderList(this);
		}
	}
}

class NullsOrderContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_nullsOrder;
	}

	NULLS_SYMBOL() {
		return this.getToken(SQLSelectParser.NULLS_SYMBOL, 0);
	}

	FIRST_SYMBOL() {
		return this.getToken(SQLSelectParser.FIRST_SYMBOL, 0);
	}

	LAST_SYMBOL() {
		return this.getToken(SQLSelectParser.LAST_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterNullsOrder(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitNullsOrder(this);
		}
	}
}

class OrderExpressionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_orderExpression;
	}

	expr() {
		return this.getTypedRuleContext(ExprContext, 0);
	}

	direction() {
		return this.getTypedRuleContext(DirectionContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterOrderExpression(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitOrderExpression(this);
		}
	}
}

class IndexTypeContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_indexType;
	}

	BTREE_SYMBOL() {
		return this.getToken(SQLSelectParser.BTREE_SYMBOL, 0);
	}

	RTREE_SYMBOL() {
		return this.getToken(SQLSelectParser.RTREE_SYMBOL, 0);
	}

	HASH_SYMBOL() {
		return this.getToken(SQLSelectParser.HASH_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIndexType(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIndexType(this);
		}
	}
}

class DataTypeContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_dataType;
	}

	INT_SYMBOL() {
		return this.getToken(SQLSelectParser.INT_SYMBOL, 0);
	}

	BYTE_INT_SYMBOL() {
		return this.getToken(SQLSelectParser.BYTE_INT_SYMBOL, 0);
	}

	TINYINT_SYMBOL() {
		return this.getToken(SQLSelectParser.TINYINT_SYMBOL, 0);
	}

	SMALLINT_SYMBOL() {
		return this.getToken(SQLSelectParser.SMALLINT_SYMBOL, 0);
	}

	MEDIUMINT_SYMBOL() {
		return this.getToken(SQLSelectParser.MEDIUMINT_SYMBOL, 0);
	}

	BIGINT_SYMBOL() {
		return this.getToken(SQLSelectParser.BIGINT_SYMBOL, 0);
	}

	DECIMAL_SYMBOL() {
		return this.getToken(SQLSelectParser.DECIMAL_SYMBOL, 0);
	}

	NUMERIC_SYMBOL() {
		return this.getToken(SQLSelectParser.NUMERIC_SYMBOL, 0);
	}

	NUMBER_SYMBOL() {
		return this.getToken(SQLSelectParser.NUMBER_SYMBOL, 0);
	}

	fieldLength() {
		return this.getTypedRuleContext(FieldLengthContext, 0);
	}

	fieldOptions() {
		return this.getTypedRuleContext(FieldOptionsContext, 0);
	}

	REAL_SYMBOL() {
		return this.getToken(SQLSelectParser.REAL_SYMBOL, 0);
	}

	DOUBLE_SYMBOL() {
		return this.getToken(SQLSelectParser.DOUBLE_SYMBOL, 0);
	}

	precision() {
		return this.getTypedRuleContext(PrecisionContext, 0);
	}

	PRECISION_SYMBOL() {
		return this.getToken(SQLSelectParser.PRECISION_SYMBOL, 0);
	}

	FLOAT_SYMBOL_4() {
		return this.getToken(SQLSelectParser.FLOAT_SYMBOL_4, 0);
	}

	FLOAT_SYMBOL_8() {
		return this.getToken(SQLSelectParser.FLOAT_SYMBOL_8, 0);
	}

	FLOAT_SYMBOL() {
		return this.getToken(SQLSelectParser.FLOAT_SYMBOL, 0);
	}

	FIXED_SYMBOL() {
		return this.getToken(SQLSelectParser.FIXED_SYMBOL, 0);
	}

	floatOptions() {
		return this.getTypedRuleContext(FloatOptionsContext, 0);
	}

	BIT_SYMBOL() {
		return this.getToken(SQLSelectParser.BIT_SYMBOL, 0);
	}

	BOOL_SYMBOL() {
		return this.getToken(SQLSelectParser.BOOL_SYMBOL, 0);
	}

	BOOLEAN_SYMBOL() {
		return this.getToken(SQLSelectParser.BOOLEAN_SYMBOL, 0);
	}

	nchar() {
		return this.getTypedRuleContext(NcharContext, 0);
	}

	BINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.BINARY_SYMBOL, 0);
	}

	CHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CHAR_SYMBOL, 0);
	}

	VARYING_SYMBOL() {
		return this.getToken(SQLSelectParser.VARYING_SYMBOL, 0);
	}

	VARCHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.VARCHAR_SYMBOL, 0);
	}

	VARCHAR2_SYMBOL() {
		return this.getToken(SQLSelectParser.VARCHAR2_SYMBOL, 0);
	}

	STRING_SYMBOL() {
		return this.getToken(SQLSelectParser.STRING_SYMBOL, 0);
	}

	TEXT_SYMBOL() {
		return this.getToken(SQLSelectParser.TEXT_SYMBOL, 0);
	}

	charsetWithOptBinary() {
		return this.getTypedRuleContext(CharsetWithOptBinaryContext, 0);
	}

	NATIONAL_SYMBOL() {
		return this.getToken(SQLSelectParser.NATIONAL_SYMBOL, 0);
	}

	NVARCHAR2_SYMBOL() {
		return this.getToken(SQLSelectParser.NVARCHAR2_SYMBOL, 0);
	}

	NVARCHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.NVARCHAR_SYMBOL, 0);
	}

	NCHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.NCHAR_SYMBOL, 0);
	}

	VARBINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.VARBINARY_SYMBOL, 0);
	}

	YEAR_SYMBOL() {
		return this.getToken(SQLSelectParser.YEAR_SYMBOL, 0);
	}

	DATE_SYMBOL() {
		return this.getToken(SQLSelectParser.DATE_SYMBOL, 0);
	}

	TIME_SYMBOL() {
		return this.getToken(SQLSelectParser.TIME_SYMBOL, 0);
	}

	typeDatetimePrecision() {
		return this.getTypedRuleContext(TypeDatetimePrecisionContext, 0);
	}

	TIMESTAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_SYMBOL, 0);
	}

	TIMESTAMP_NTZ_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_NTZ_SYMBOL, 0);
	}

	TIMESTAMP_LTZ_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_LTZ_SYMBOL, 0);
	}

	WITH_SYMBOL() {
		return this.getToken(SQLSelectParser.WITH_SYMBOL, 0);
	}

	LOCAL_SYMBOL() {
		return this.getToken(SQLSelectParser.LOCAL_SYMBOL, 0);
	}

	ZONE_SYMBOL() {
		return this.getToken(SQLSelectParser.ZONE_SYMBOL, 0);
	}

	WITHOUT_SYMBOL() {
		return this.getToken(SQLSelectParser.WITHOUT_SYMBOL, 0);
	}

	DATETIME_SYMBOL() {
		return this.getToken(SQLSelectParser.DATETIME_SYMBOL, 0);
	}

	TINYBLOB_SYMBOL() {
		return this.getToken(SQLSelectParser.TINYBLOB_SYMBOL, 0);
	}

	BLOB_SYMBOL() {
		return this.getToken(SQLSelectParser.BLOB_SYMBOL, 0);
	}

	CLOB_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOB_SYMBOL, 0);
	}

	BFILE_SYMBOL() {
		return this.getToken(SQLSelectParser.BFILE_SYMBOL, 0);
	}

	LONG_SYMBOL() {
		return this.getToken(SQLSelectParser.LONG_SYMBOL, 0);
	}

	RAW_SYMBOL() {
		return this.getToken(SQLSelectParser.RAW_SYMBOL, 0);
	}

	MEDIUMBLOB_SYMBOL() {
		return this.getToken(SQLSelectParser.MEDIUMBLOB_SYMBOL, 0);
	}

	LONGBLOB_SYMBOL() {
		return this.getToken(SQLSelectParser.LONGBLOB_SYMBOL, 0);
	}

	TINYTEXT_SYMBOL() {
		return this.getToken(SQLSelectParser.TINYTEXT_SYMBOL, 0);
	}

	MEDIUMTEXT_SYMBOL() {
		return this.getToken(SQLSelectParser.MEDIUMTEXT_SYMBOL, 0);
	}

	LONGTEXT_SYMBOL() {
		return this.getToken(SQLSelectParser.LONGTEXT_SYMBOL, 0);
	}

	ENUM_SYMBOL() {
		return this.getToken(SQLSelectParser.ENUM_SYMBOL, 0);
	}

	stringList() {
		return this.getTypedRuleContext(StringListContext, 0);
	}

	SET_SYMBOL() {
		return this.getToken(SQLSelectParser.SET_SYMBOL, 0);
	}

	SERIAL_SYMBOL() {
		return this.getToken(SQLSelectParser.SERIAL_SYMBOL, 0);
	}

	JSON_SYMBOL() {
		return this.getToken(SQLSelectParser.JSON_SYMBOL, 0);
	}

	GEOMETRY_SYMBOL() {
		return this.getToken(SQLSelectParser.GEOMETRY_SYMBOL, 0);
	}

	GEOMETRYCOLLECTION_SYMBOL() {
		return this.getToken(SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	}

	POINT_SYMBOL() {
		return this.getToken(SQLSelectParser.POINT_SYMBOL, 0);
	}

	MULTIPOINT_SYMBOL() {
		return this.getToken(SQLSelectParser.MULTIPOINT_SYMBOL, 0);
	}

	LINESTRING_SYMBOL() {
		return this.getToken(SQLSelectParser.LINESTRING_SYMBOL, 0);
	}

	MULTILINESTRING_SYMBOL() {
		return this.getToken(SQLSelectParser.MULTILINESTRING_SYMBOL, 0);
	}

	POLYGON_SYMBOL() {
		return this.getToken(SQLSelectParser.POLYGON_SYMBOL, 0);
	}

	MULTIPOLYGON_SYMBOL() {
		return this.getToken(SQLSelectParser.MULTIPOLYGON_SYMBOL, 0);
	}

	GEOGRAPHY_SYMBOL() {
		return this.getToken(SQLSelectParser.GEOGRAPHY_SYMBOL, 0);
	}

	VARIANT_SYMBOL() {
		return this.getToken(SQLSelectParser.VARIANT_SYMBOL, 0);
	}

	OBJECT_SYMBOL() {
		return this.getToken(SQLSelectParser.OBJECT_SYMBOL, 0);
	}

	ARRAY_SYMBOL() {
		return this.getToken(SQLSelectParser.ARRAY_SYMBOL, 0);
	}

	expr = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(ExprContext);
		} else {
			return this.getTypedRuleContext(ExprContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterDataType(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitDataType(this);
		}
	}
}

class NcharContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_nchar;
	}

	NCHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.NCHAR_SYMBOL, 0);
	}

	NATIONAL_SYMBOL() {
		return this.getToken(SQLSelectParser.NATIONAL_SYMBOL, 0);
	}

	CHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CHAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterNchar(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitNchar(this);
		}
	}
}

class FieldLengthContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_fieldLength;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	real_ulonglong_number() {
		return this.getTypedRuleContext(Real_ulonglong_numberContext, 0);
	}

	DECIMAL_NUMBER() {
		return this.getToken(SQLSelectParser.DECIMAL_NUMBER, 0);
	}

	CHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CHAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterFieldLength(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitFieldLength(this);
		}
	}
}

class FieldOptionsContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_fieldOptions;
	}

	SIGNED_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.SIGNED_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.SIGNED_SYMBOL, i);
		}
	};

	UNSIGNED_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.UNSIGNED_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.UNSIGNED_SYMBOL, i);
		}
	};

	ZEROFILL_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.ZEROFILL_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.ZEROFILL_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterFieldOptions(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitFieldOptions(this);
		}
	}
}

class CharsetWithOptBinaryContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_charsetWithOptBinary;
	}

	ascii() {
		return this.getTypedRuleContext(AsciiContext, 0);
	}

	unicode() {
		return this.getTypedRuleContext(UnicodeContext, 0);
	}

	BYTE_SYMBOL() {
		return this.getToken(SQLSelectParser.BYTE_SYMBOL, 0);
	}

	charset() {
		return this.getTypedRuleContext(CharsetContext, 0);
	}

	charsetName() {
		return this.getTypedRuleContext(CharsetNameContext, 0);
	}

	BINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.BINARY_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterCharsetWithOptBinary(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitCharsetWithOptBinary(this);
		}
	}
}

class AsciiContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_ascii;
	}

	ASCII_SYMBOL() {
		return this.getToken(SQLSelectParser.ASCII_SYMBOL, 0);
	}

	BINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.BINARY_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterAscii(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitAscii(this);
		}
	}
}

class UnicodeContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_unicode;
	}

	UNICODE_SYMBOL() {
		return this.getToken(SQLSelectParser.UNICODE_SYMBOL, 0);
	}

	BINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.BINARY_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterUnicode(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitUnicode(this);
		}
	}
}

class WsNumCodepointsContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_wsNumCodepoints;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	real_ulong_number() {
		return this.getTypedRuleContext(Real_ulong_numberContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterWsNumCodepoints(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitWsNumCodepoints(this);
		}
	}
}

class TypeDatetimePrecisionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_typeDatetimePrecision;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	INT_NUMBER() {
		return this.getToken(SQLSelectParser.INT_NUMBER, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTypeDatetimePrecision(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTypeDatetimePrecision(this);
		}
	}
}

class CharsetNameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_charsetName;
	}

	textOrIdentifier() {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0);
	}

	BINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.BINARY_SYMBOL, 0);
	}

	DEFAULT_SYMBOL() {
		return this.getToken(SQLSelectParser.DEFAULT_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterCharsetName(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitCharsetName(this);
		}
	}
}

class CollationNameContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_collationName;
	}

	textOrIdentifier() {
		return this.getTypedRuleContext(TextOrIdentifierContext, 0);
	}

	DEFAULT_SYMBOL() {
		return this.getToken(SQLSelectParser.DEFAULT_SYMBOL, 0);
	}

	BINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.BINARY_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterCollationName(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitCollationName(this);
		}
	}
}

class CollateContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_collate;
	}

	COLLATE_SYMBOL() {
		return this.getToken(SQLSelectParser.COLLATE_SYMBOL, 0);
	}

	collationName() {
		return this.getTypedRuleContext(CollationNameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterCollate(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitCollate(this);
		}
	}
}

class CharsetClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_charsetClause;
	}

	charset() {
		return this.getTypedRuleContext(CharsetContext, 0);
	}

	charsetName() {
		return this.getTypedRuleContext(CharsetNameContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterCharsetClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitCharsetClause(this);
		}
	}
}

class FieldsClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_fieldsClause;
	}

	COLUMNS_SYMBOL() {
		return this.getToken(SQLSelectParser.COLUMNS_SYMBOL, 0);
	}

	fieldTerm = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(FieldTermContext);
		} else {
			return this.getTypedRuleContext(FieldTermContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterFieldsClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitFieldsClause(this);
		}
	}
}

class FieldTermContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_fieldTerm;
	}

	TERMINATED_SYMBOL() {
		return this.getToken(SQLSelectParser.TERMINATED_SYMBOL, 0);
	}

	BY_SYMBOL() {
		return this.getToken(SQLSelectParser.BY_SYMBOL, 0);
	}

	textString() {
		return this.getTypedRuleContext(TextStringContext, 0);
	}

	ENCLOSED_SYMBOL() {
		return this.getToken(SQLSelectParser.ENCLOSED_SYMBOL, 0);
	}

	OPTIONALLY_SYMBOL() {
		return this.getToken(SQLSelectParser.OPTIONALLY_SYMBOL, 0);
	}

	ESCAPED_SYMBOL() {
		return this.getToken(SQLSelectParser.ESCAPED_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterFieldTerm(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitFieldTerm(this);
		}
	}
}

class LinesClauseContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_linesClause;
	}

	LINES_SYMBOL() {
		return this.getToken(SQLSelectParser.LINES_SYMBOL, 0);
	}

	lineTerm = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(LineTermContext);
		} else {
			return this.getTypedRuleContext(LineTermContext, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLinesClause(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLinesClause(this);
		}
	}
}

class LineTermContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_lineTerm;
	}

	BY_SYMBOL() {
		return this.getToken(SQLSelectParser.BY_SYMBOL, 0);
	}

	textString() {
		return this.getTypedRuleContext(TextStringContext, 0);
	}

	TERMINATED_SYMBOL() {
		return this.getToken(SQLSelectParser.TERMINATED_SYMBOL, 0);
	}

	STARTING_SYMBOL() {
		return this.getToken(SQLSelectParser.STARTING_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLineTerm(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLineTerm(this);
		}
	}
}

class UsePartitionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_usePartition;
	}

	PARTITION_SYMBOL() {
		return this.getToken(SQLSelectParser.PARTITION_SYMBOL, 0);
	}

	identifierListWithParentheses() {
		return this.getTypedRuleContext(IdentifierListWithParenthesesContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterUsePartition(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitUsePartition(this);
		}
	}
}

class ColumnInternalRefListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_columnInternalRefList;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	identifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(IdentifierContext);
		} else {
			return this.getTypedRuleContext(IdentifierContext, i);
		}
	};

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterColumnInternalRefList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitColumnInternalRefList(this);
		}
	}
}

class TableAliasRefListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_tableAliasRefList;
	}

	qualifiedIdentifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(QualifiedIdentifierContext);
		} else {
			return this.getTypedRuleContext(QualifiedIdentifierContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTableAliasRefList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTableAliasRefList(this);
		}
	}
}

class PureIdentifierContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_pureIdentifier;
	}

	IDENTIFIER() {
		return this.getToken(SQLSelectParser.IDENTIFIER, 0);
	}

	BACK_TICK_QUOTED_ID() {
		return this.getToken(SQLSelectParser.BACK_TICK_QUOTED_ID, 0);
	}

	SINGLE_QUOTED_TEXT() {
		return this.getToken(SQLSelectParser.SINGLE_QUOTED_TEXT, 0);
	}

	DOUBLE_QUOTED_TEXT() {
		return this.getToken(SQLSelectParser.DOUBLE_QUOTED_TEXT, 0);
	}

	BRACKET_QUOTED_TEXT() {
		return this.getToken(SQLSelectParser.BRACKET_QUOTED_TEXT, 0);
	}

	CURLY_BRACES_QUOTED_TEXT() {
		return this.getToken(SQLSelectParser.CURLY_BRACES_QUOTED_TEXT, 0);
	}

	UNDERSCORE_CHARSET() {
		return this.getToken(SQLSelectParser.UNDERSCORE_CHARSET, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterPureIdentifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitPureIdentifier(this);
		}
	}
}

class IdentifierContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_identifier;
	}

	pureIdentifier() {
		return this.getTypedRuleContext(PureIdentifierContext, 0);
	}

	identifierKeyword() {
		return this.getTypedRuleContext(IdentifierKeywordContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIdentifier(this);
		}
	}
}

class IdentifierListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_identifierList;
	}

	identifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(IdentifierContext);
		} else {
			return this.getTypedRuleContext(IdentifierContext, i);
		}
	};

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIdentifierList(this);
		}
	}
}

class IdentifierListWithParenthesesContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_identifierListWithParentheses;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	identifierList() {
		return this.getTypedRuleContext(IdentifierListContext, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIdentifierListWithParentheses(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIdentifierListWithParentheses(this);
		}
	}
}

class QualifiedIdentifierContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_qualifiedIdentifier;
	}

	identifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(IdentifierContext);
		} else {
			return this.getTypedRuleContext(IdentifierContext, i);
		}
	};

	DOT_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.DOT_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.DOT_SYMBOL, i);
		}
	};

	MULT_OPERATOR() {
		return this.getToken(SQLSelectParser.MULT_OPERATOR, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterQualifiedIdentifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitQualifiedIdentifier(this);
		}
	}
}

class JsonPathIdentifierContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_jsonPathIdentifier;
	}

	qualifiedIdentifier() {
		return this.getTypedRuleContext(QualifiedIdentifierContext, 0);
	}

	COLON_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COLON_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COLON_SYMBOL, i);
		}
	};

	identifier = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(IdentifierContext);
		} else {
			return this.getTypedRuleContext(IdentifierContext, i);
		}
	};

	BRACKET_QUOTED_TEXT = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.BRACKET_QUOTED_TEXT);
		} else {
			return this.getToken(SQLSelectParser.BRACKET_QUOTED_TEXT, i);
		}
	};

	CAST_COLON_SYMBOL() {
		return this.getToken(SQLSelectParser.CAST_COLON_SYMBOL, 0);
	}

	dataType() {
		return this.getTypedRuleContext(DataTypeContext, 0);
	}

	COLLATE_SYMBOL() {
		return this.getToken(SQLSelectParser.COLLATE_SYMBOL, 0);
	}

	DOT_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.DOT_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.DOT_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterJsonPathIdentifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitJsonPathIdentifier(this);
		}
	}
}

class DotIdentifierContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_dotIdentifier;
	}

	DOT_SYMBOL() {
		return this.getToken(SQLSelectParser.DOT_SYMBOL, 0);
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterDotIdentifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitDotIdentifier(this);
		}
	}
}

class Ulong_numberContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_ulong_number;
	}

	INT_NUMBER() {
		return this.getToken(SQLSelectParser.INT_NUMBER, 0);
	}

	HEX_NUMBER() {
		return this.getToken(SQLSelectParser.HEX_NUMBER, 0);
	}

	DECIMAL_NUMBER() {
		return this.getToken(SQLSelectParser.DECIMAL_NUMBER, 0);
	}

	FLOAT_NUMBER() {
		return this.getToken(SQLSelectParser.FLOAT_NUMBER, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterUlong_number(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitUlong_number(this);
		}
	}
}

class Real_ulong_numberContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_real_ulong_number;
	}

	INT_NUMBER() {
		return this.getToken(SQLSelectParser.INT_NUMBER, 0);
	}

	HEX_NUMBER() {
		return this.getToken(SQLSelectParser.HEX_NUMBER, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterReal_ulong_number(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitReal_ulong_number(this);
		}
	}
}

class Ulonglong_numberContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_ulonglong_number;
	}

	INT_NUMBER() {
		return this.getToken(SQLSelectParser.INT_NUMBER, 0);
	}

	DECIMAL_NUMBER() {
		return this.getToken(SQLSelectParser.DECIMAL_NUMBER, 0);
	}

	FLOAT_NUMBER() {
		return this.getToken(SQLSelectParser.FLOAT_NUMBER, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterUlonglong_number(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitUlonglong_number(this);
		}
	}
}

class Real_ulonglong_numberContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_real_ulonglong_number;
	}

	INT_NUMBER() {
		return this.getToken(SQLSelectParser.INT_NUMBER, 0);
	}

	HEX_NUMBER() {
		return this.getToken(SQLSelectParser.HEX_NUMBER, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterReal_ulonglong_number(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitReal_ulonglong_number(this);
		}
	}
}

class LiteralContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_literal;
	}

	textLiteral() {
		return this.getTypedRuleContext(TextLiteralContext, 0);
	}

	numLiteral() {
		return this.getTypedRuleContext(NumLiteralContext, 0);
	}

	temporalLiteral() {
		return this.getTypedRuleContext(TemporalLiteralContext, 0);
	}

	nullLiteral() {
		return this.getTypedRuleContext(NullLiteralContext, 0);
	}

	boolLiteral() {
		return this.getTypedRuleContext(BoolLiteralContext, 0);
	}

	HEX_NUMBER() {
		return this.getToken(SQLSelectParser.HEX_NUMBER, 0);
	}

	BIN_NUMBER() {
		return this.getToken(SQLSelectParser.BIN_NUMBER, 0);
	}

	UNDERSCORE_CHARSET() {
		return this.getToken(SQLSelectParser.UNDERSCORE_CHARSET, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitLiteral(this);
		}
	}
}

class StringListContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_stringList;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	textString = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(TextStringContext);
		} else {
			return this.getTypedRuleContext(TextStringContext, i);
		}
	};

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	COMMA_SYMBOL = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.COMMA_SYMBOL);
		} else {
			return this.getToken(SQLSelectParser.COMMA_SYMBOL, i);
		}
	};

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterStringList(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitStringList(this);
		}
	}
}

class TextStringLiteralContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_textStringLiteral;
	}

	SINGLE_QUOTED_TEXT() {
		return this.getToken(SQLSelectParser.SINGLE_QUOTED_TEXT, 0);
	}

	DOUBLE_QUOTED_TEXT() {
		return this.getToken(SQLSelectParser.DOUBLE_QUOTED_TEXT, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTextStringLiteral(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTextStringLiteral(this);
		}
	}
}

class TextStringContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_textString;
	}

	textStringLiteral() {
		return this.getTypedRuleContext(TextStringLiteralContext, 0);
	}

	HEX_NUMBER() {
		return this.getToken(SQLSelectParser.HEX_NUMBER, 0);
	}

	BIN_NUMBER() {
		return this.getToken(SQLSelectParser.BIN_NUMBER, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTextString(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTextString(this);
		}
	}
}

class TextLiteralContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_textLiteral;
	}

	textStringLiteral = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTypedRuleContexts(TextStringLiteralContext);
		} else {
			return this.getTypedRuleContext(TextStringLiteralContext, i);
		}
	};

	NCHAR_TEXT() {
		return this.getToken(SQLSelectParser.NCHAR_TEXT, 0);
	}

	UNDERSCORE_CHARSET() {
		return this.getToken(SQLSelectParser.UNDERSCORE_CHARSET, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTextLiteral(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTextLiteral(this);
		}
	}
}

class NumLiteralContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_numLiteral;
	}

	INT_NUMBER() {
		return this.getToken(SQLSelectParser.INT_NUMBER, 0);
	}

	DECIMAL_NUMBER() {
		return this.getToken(SQLSelectParser.DECIMAL_NUMBER, 0);
	}

	FLOAT_NUMBER() {
		return this.getToken(SQLSelectParser.FLOAT_NUMBER, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterNumLiteral(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitNumLiteral(this);
		}
	}
}

class BoolLiteralContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_boolLiteral;
	}

	TRUE_SYMBOL() {
		return this.getToken(SQLSelectParser.TRUE_SYMBOL, 0);
	}

	FALSE_SYMBOL() {
		return this.getToken(SQLSelectParser.FALSE_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterBoolLiteral(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitBoolLiteral(this);
		}
	}
}

class NullLiteralContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_nullLiteral;
	}

	NULL_SYMBOL() {
		return this.getToken(SQLSelectParser.NULL_SYMBOL, 0);
	}

	NULL2_SYMBOL() {
		return this.getToken(SQLSelectParser.NULL2_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitNullLiteral(this);
		}
	}
}

class TemporalLiteralContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_temporalLiteral;
	}

	DATE_SYMBOL() {
		return this.getToken(SQLSelectParser.DATE_SYMBOL, 0);
	}

	SINGLE_QUOTED_TEXT() {
		return this.getToken(SQLSelectParser.SINGLE_QUOTED_TEXT, 0);
	}

	TIME_SYMBOL() {
		return this.getToken(SQLSelectParser.TIME_SYMBOL, 0);
	}

	TIMESTAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTemporalLiteral(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTemporalLiteral(this);
		}
	}
}

class FloatOptionsContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_floatOptions;
	}

	fieldLength() {
		return this.getTypedRuleContext(FieldLengthContext, 0);
	}

	precision() {
		return this.getTypedRuleContext(PrecisionContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterFloatOptions(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitFloatOptions(this);
		}
	}
}

class PrecisionContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_precision;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	INT_NUMBER = function (i) {
		if (i === undefined) {
			i = null;
		}
		if (i === null) {
			return this.getTokens(SQLSelectParser.INT_NUMBER);
		} else {
			return this.getToken(SQLSelectParser.INT_NUMBER, i);
		}
	};

	COMMA_SYMBOL() {
		return this.getToken(SQLSelectParser.COMMA_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterPrecision(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitPrecision(this);
		}
	}
}

class TextOrIdentifierContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_textOrIdentifier;
	}

	identifier() {
		return this.getTypedRuleContext(IdentifierContext, 0);
	}

	textStringLiteral() {
		return this.getTypedRuleContext(TextStringLiteralContext, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterTextOrIdentifier(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitTextOrIdentifier(this);
		}
	}
}

class ParenthesesContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_parentheses;
	}

	OPEN_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.OPEN_PAR_SYMBOL, 0);
	}

	CLOSE_PAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOSE_PAR_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterParentheses(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitParentheses(this);
		}
	}
}

class EqualContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_equal;
	}

	EQUAL_OPERATOR() {
		return this.getToken(SQLSelectParser.EQUAL_OPERATOR, 0);
	}

	ASSIGN_OPERATOR() {
		return this.getToken(SQLSelectParser.ASSIGN_OPERATOR, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterEqual(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitEqual(this);
		}
	}
}

class VarIdentTypeContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_varIdentType;
	}

	GLOBAL_SYMBOL() {
		return this.getToken(SQLSelectParser.GLOBAL_SYMBOL, 0);
	}

	DOT_SYMBOL() {
		return this.getToken(SQLSelectParser.DOT_SYMBOL, 0);
	}

	LOCAL_SYMBOL() {
		return this.getToken(SQLSelectParser.LOCAL_SYMBOL, 0);
	}

	SESSION_SYMBOL() {
		return this.getToken(SQLSelectParser.SESSION_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterVarIdentType(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitVarIdentType(this);
		}
	}
}

class IdentifierKeywordContext extends antlr4.ParserRuleContext {
	constructor(parser, parent, invokingState) {
		if (parent === undefined) {
			parent = null;
		}
		if (invokingState === undefined || invokingState === null) {
			invokingState = -1;
		}
		super(parent, invokingState);
		this.parser = parser;
		this.ruleIndex = SQLSelectParser.RULE_identifierKeyword;
	}

	TINYINT_SYMBOL() {
		return this.getToken(SQLSelectParser.TINYINT_SYMBOL, 0);
	}

	SMALLINT_SYMBOL() {
		return this.getToken(SQLSelectParser.SMALLINT_SYMBOL, 0);
	}

	MEDIUMINT_SYMBOL() {
		return this.getToken(SQLSelectParser.MEDIUMINT_SYMBOL, 0);
	}

	INT_SYMBOL() {
		return this.getToken(SQLSelectParser.INT_SYMBOL, 0);
	}

	BIGINT_SYMBOL() {
		return this.getToken(SQLSelectParser.BIGINT_SYMBOL, 0);
	}

	SECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.SECOND_SYMBOL, 0);
	}

	MINUTE_SYMBOL() {
		return this.getToken(SQLSelectParser.MINUTE_SYMBOL, 0);
	}

	HOUR_SYMBOL() {
		return this.getToken(SQLSelectParser.HOUR_SYMBOL, 0);
	}

	DAY_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_SYMBOL, 0);
	}

	WEEK_SYMBOL() {
		return this.getToken(SQLSelectParser.WEEK_SYMBOL, 0);
	}

	MONTH_SYMBOL() {
		return this.getToken(SQLSelectParser.MONTH_SYMBOL, 0);
	}

	QUARTER_SYMBOL() {
		return this.getToken(SQLSelectParser.QUARTER_SYMBOL, 0);
	}

	YEAR_SYMBOL() {
		return this.getToken(SQLSelectParser.YEAR_SYMBOL, 0);
	}

	DEFAULT_SYMBOL() {
		return this.getToken(SQLSelectParser.DEFAULT_SYMBOL, 0);
	}

	UNION_SYMBOL() {
		return this.getToken(SQLSelectParser.UNION_SYMBOL, 0);
	}

	SELECT_SYMBOL() {
		return this.getToken(SQLSelectParser.SELECT_SYMBOL, 0);
	}

	ALL_SYMBOL() {
		return this.getToken(SQLSelectParser.ALL_SYMBOL, 0);
	}

	DISTINCT_SYMBOL() {
		return this.getToken(SQLSelectParser.DISTINCT_SYMBOL, 0);
	}

	STRAIGHT_JOIN_SYMBOL() {
		return this.getToken(SQLSelectParser.STRAIGHT_JOIN_SYMBOL, 0);
	}

	HIGH_PRIORITY_SYMBOL() {
		return this.getToken(SQLSelectParser.HIGH_PRIORITY_SYMBOL, 0);
	}

	SQL_SMALL_RESULT_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_SMALL_RESULT_SYMBOL, 0);
	}

	SQL_BIG_RESULT_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_BIG_RESULT_SYMBOL, 0);
	}

	SQL_BUFFER_RESULT_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_BUFFER_RESULT_SYMBOL, 0);
	}

	SQL_CALC_FOUND_ROWS_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0);
	}

	LIMIT_SYMBOL() {
		return this.getToken(SQLSelectParser.LIMIT_SYMBOL, 0);
	}

	OFFSET_SYMBOL() {
		return this.getToken(SQLSelectParser.OFFSET_SYMBOL, 0);
	}

	INTO_SYMBOL() {
		return this.getToken(SQLSelectParser.INTO_SYMBOL, 0);
	}

	OUTFILE_SYMBOL() {
		return this.getToken(SQLSelectParser.OUTFILE_SYMBOL, 0);
	}

	DUMPFILE_SYMBOL() {
		return this.getToken(SQLSelectParser.DUMPFILE_SYMBOL, 0);
	}

	PROCEDURE_SYMBOL() {
		return this.getToken(SQLSelectParser.PROCEDURE_SYMBOL, 0);
	}

	ANALYSE_SYMBOL() {
		return this.getToken(SQLSelectParser.ANALYSE_SYMBOL, 0);
	}

	HAVING_SYMBOL() {
		return this.getToken(SQLSelectParser.HAVING_SYMBOL, 0);
	}

	WINDOW_SYMBOL() {
		return this.getToken(SQLSelectParser.WINDOW_SYMBOL, 0);
	}

	AS_SYMBOL() {
		return this.getToken(SQLSelectParser.AS_SYMBOL, 0);
	}

	PARTITION_SYMBOL() {
		return this.getToken(SQLSelectParser.PARTITION_SYMBOL, 0);
	}

	BY_SYMBOL() {
		return this.getToken(SQLSelectParser.BY_SYMBOL, 0);
	}

	ROWS_SYMBOL() {
		return this.getToken(SQLSelectParser.ROWS_SYMBOL, 0);
	}

	RANGE_SYMBOL() {
		return this.getToken(SQLSelectParser.RANGE_SYMBOL, 0);
	}

	GROUPS_SYMBOL() {
		return this.getToken(SQLSelectParser.GROUPS_SYMBOL, 0);
	}

	UNBOUNDED_SYMBOL() {
		return this.getToken(SQLSelectParser.UNBOUNDED_SYMBOL, 0);
	}

	PRECEDING_SYMBOL() {
		return this.getToken(SQLSelectParser.PRECEDING_SYMBOL, 0);
	}

	INTERVAL_SYMBOL() {
		return this.getToken(SQLSelectParser.INTERVAL_SYMBOL, 0);
	}

	CURRENT_SYMBOL() {
		return this.getToken(SQLSelectParser.CURRENT_SYMBOL, 0);
	}

	ROW_SYMBOL() {
		return this.getToken(SQLSelectParser.ROW_SYMBOL, 0);
	}

	BETWEEN_SYMBOL() {
		return this.getToken(SQLSelectParser.BETWEEN_SYMBOL, 0);
	}

	AND_SYMBOL() {
		return this.getToken(SQLSelectParser.AND_SYMBOL, 0);
	}

	FOLLOWING_SYMBOL() {
		return this.getToken(SQLSelectParser.FOLLOWING_SYMBOL, 0);
	}

	EXCLUDE_SYMBOL() {
		return this.getToken(SQLSelectParser.EXCLUDE_SYMBOL, 0);
	}

	GROUP_SYMBOL() {
		return this.getToken(SQLSelectParser.GROUP_SYMBOL, 0);
	}

	TIES_SYMBOL() {
		return this.getToken(SQLSelectParser.TIES_SYMBOL, 0);
	}

	NO_SYMBOL() {
		return this.getToken(SQLSelectParser.NO_SYMBOL, 0);
	}

	OTHERS_SYMBOL() {
		return this.getToken(SQLSelectParser.OTHERS_SYMBOL, 0);
	}

	WITH_SYMBOL() {
		return this.getToken(SQLSelectParser.WITH_SYMBOL, 0);
	}

	RECURSIVE_SYMBOL() {
		return this.getToken(SQLSelectParser.RECURSIVE_SYMBOL, 0);
	}

	ROLLUP_SYMBOL() {
		return this.getToken(SQLSelectParser.ROLLUP_SYMBOL, 0);
	}

	CUBE_SYMBOL() {
		return this.getToken(SQLSelectParser.CUBE_SYMBOL, 0);
	}

	ORDER_SYMBOL() {
		return this.getToken(SQLSelectParser.ORDER_SYMBOL, 0);
	}

	ASC_SYMBOL() {
		return this.getToken(SQLSelectParser.ASC_SYMBOL, 0);
	}

	DESC_SYMBOL() {
		return this.getToken(SQLSelectParser.DESC_SYMBOL, 0);
	}

	FROM_SYMBOL() {
		return this.getToken(SQLSelectParser.FROM_SYMBOL, 0);
	}

	DUAL_SYMBOL() {
		return this.getToken(SQLSelectParser.DUAL_SYMBOL, 0);
	}

	VALUES_SYMBOL() {
		return this.getToken(SQLSelectParser.VALUES_SYMBOL, 0);
	}

	TABLE_SYMBOL() {
		return this.getToken(SQLSelectParser.TABLE_SYMBOL, 0);
	}

	SQL_NO_CACHE_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_NO_CACHE_SYMBOL, 0);
	}

	SQL_CACHE_SYMBOL() {
		return this.getToken(SQLSelectParser.SQL_CACHE_SYMBOL, 0);
	}

	MAX_STATEMENT_TIME_SYMBOL() {
		return this.getToken(SQLSelectParser.MAX_STATEMENT_TIME_SYMBOL, 0);
	}

	FOR_SYMBOL() {
		return this.getToken(SQLSelectParser.FOR_SYMBOL, 0);
	}

	OF_SYMBOL() {
		return this.getToken(SQLSelectParser.OF_SYMBOL, 0);
	}

	LOCK_SYMBOL() {
		return this.getToken(SQLSelectParser.LOCK_SYMBOL, 0);
	}

	IN_SYMBOL() {
		return this.getToken(SQLSelectParser.IN_SYMBOL, 0);
	}

	SHARE_SYMBOL() {
		return this.getToken(SQLSelectParser.SHARE_SYMBOL, 0);
	}

	MODE_SYMBOL() {
		return this.getToken(SQLSelectParser.MODE_SYMBOL, 0);
	}

	UPDATE_SYMBOL() {
		return this.getToken(SQLSelectParser.UPDATE_SYMBOL, 0);
	}

	SKIP_SYMBOL() {
		return this.getToken(SQLSelectParser.SKIP_SYMBOL, 0);
	}

	LOCKED_SYMBOL() {
		return this.getToken(SQLSelectParser.LOCKED_SYMBOL, 0);
	}

	NOWAIT_SYMBOL() {
		return this.getToken(SQLSelectParser.NOWAIT_SYMBOL, 0);
	}

	WHERE_SYMBOL() {
		return this.getToken(SQLSelectParser.WHERE_SYMBOL, 0);
	}

	OJ_SYMBOL() {
		return this.getToken(SQLSelectParser.OJ_SYMBOL, 0);
	}

	ON_SYMBOL() {
		return this.getToken(SQLSelectParser.ON_SYMBOL, 0);
	}

	USING_SYMBOL() {
		return this.getToken(SQLSelectParser.USING_SYMBOL, 0);
	}

	NATURAL_SYMBOL() {
		return this.getToken(SQLSelectParser.NATURAL_SYMBOL, 0);
	}

	INNER_SYMBOL() {
		return this.getToken(SQLSelectParser.INNER_SYMBOL, 0);
	}

	JOIN_SYMBOL() {
		return this.getToken(SQLSelectParser.JOIN_SYMBOL, 0);
	}

	LEFT_SYMBOL() {
		return this.getToken(SQLSelectParser.LEFT_SYMBOL, 0);
	}

	RIGHT_SYMBOL() {
		return this.getToken(SQLSelectParser.RIGHT_SYMBOL, 0);
	}

	OUTER_SYMBOL() {
		return this.getToken(SQLSelectParser.OUTER_SYMBOL, 0);
	}

	CROSS_SYMBOL() {
		return this.getToken(SQLSelectParser.CROSS_SYMBOL, 0);
	}

	LATERAL_SYMBOL() {
		return this.getToken(SQLSelectParser.LATERAL_SYMBOL, 0);
	}

	JSON_TABLE_SYMBOL() {
		return this.getToken(SQLSelectParser.JSON_TABLE_SYMBOL, 0);
	}

	COLUMNS_SYMBOL() {
		return this.getToken(SQLSelectParser.COLUMNS_SYMBOL, 0);
	}

	ORDINALITY_SYMBOL() {
		return this.getToken(SQLSelectParser.ORDINALITY_SYMBOL, 0);
	}

	EXISTS_SYMBOL() {
		return this.getToken(SQLSelectParser.EXISTS_SYMBOL, 0);
	}

	PATH_SYMBOL() {
		return this.getToken(SQLSelectParser.PATH_SYMBOL, 0);
	}

	NESTED_SYMBOL() {
		return this.getToken(SQLSelectParser.NESTED_SYMBOL, 0);
	}

	EMPTY_SYMBOL() {
		return this.getToken(SQLSelectParser.EMPTY_SYMBOL, 0);
	}

	ERROR_SYMBOL() {
		return this.getToken(SQLSelectParser.ERROR_SYMBOL, 0);
	}

	NULL_SYMBOL() {
		return this.getToken(SQLSelectParser.NULL_SYMBOL, 0);
	}

	USE_SYMBOL() {
		return this.getToken(SQLSelectParser.USE_SYMBOL, 0);
	}

	FORCE_SYMBOL() {
		return this.getToken(SQLSelectParser.FORCE_SYMBOL, 0);
	}

	IGNORE_SYMBOL() {
		return this.getToken(SQLSelectParser.IGNORE_SYMBOL, 0);
	}

	KEY_SYMBOL() {
		return this.getToken(SQLSelectParser.KEY_SYMBOL, 0);
	}

	INDEX_SYMBOL() {
		return this.getToken(SQLSelectParser.INDEX_SYMBOL, 0);
	}

	PRIMARY_SYMBOL() {
		return this.getToken(SQLSelectParser.PRIMARY_SYMBOL, 0);
	}

	IS_SYMBOL() {
		return this.getToken(SQLSelectParser.IS_SYMBOL, 0);
	}

	TRUE_SYMBOL() {
		return this.getToken(SQLSelectParser.TRUE_SYMBOL, 0);
	}

	FALSE_SYMBOL() {
		return this.getToken(SQLSelectParser.FALSE_SYMBOL, 0);
	}

	UNKNOWN_SYMBOL() {
		return this.getToken(SQLSelectParser.UNKNOWN_SYMBOL, 0);
	}

	NOT_SYMBOL() {
		return this.getToken(SQLSelectParser.NOT_SYMBOL, 0);
	}

	XOR_SYMBOL() {
		return this.getToken(SQLSelectParser.XOR_SYMBOL, 0);
	}

	OR_SYMBOL() {
		return this.getToken(SQLSelectParser.OR_SYMBOL, 0);
	}

	ANY_SYMBOL() {
		return this.getToken(SQLSelectParser.ANY_SYMBOL, 0);
	}

	MEMBER_SYMBOL() {
		return this.getToken(SQLSelectParser.MEMBER_SYMBOL, 0);
	}

	SOUNDS_SYMBOL() {
		return this.getToken(SQLSelectParser.SOUNDS_SYMBOL, 0);
	}

	LIKE_SYMBOL() {
		return this.getToken(SQLSelectParser.LIKE_SYMBOL, 0);
	}

	ESCAPE_SYMBOL() {
		return this.getToken(SQLSelectParser.ESCAPE_SYMBOL, 0);
	}

	REGEXP_SYMBOL() {
		return this.getToken(SQLSelectParser.REGEXP_SYMBOL, 0);
	}

	DIV_SYMBOL() {
		return this.getToken(SQLSelectParser.DIV_SYMBOL, 0);
	}

	MOD_SYMBOL() {
		return this.getToken(SQLSelectParser.MOD_SYMBOL, 0);
	}

	MATCH_SYMBOL() {
		return this.getToken(SQLSelectParser.MATCH_SYMBOL, 0);
	}

	AGAINST_SYMBOL() {
		return this.getToken(SQLSelectParser.AGAINST_SYMBOL, 0);
	}

	BINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.BINARY_SYMBOL, 0);
	}

	CAST_SYMBOL() {
		return this.getToken(SQLSelectParser.CAST_SYMBOL, 0);
	}

	ARRAY_SYMBOL() {
		return this.getToken(SQLSelectParser.ARRAY_SYMBOL, 0);
	}

	CASE_SYMBOL() {
		return this.getToken(SQLSelectParser.CASE_SYMBOL, 0);
	}

	END_SYMBOL() {
		return this.getToken(SQLSelectParser.END_SYMBOL, 0);
	}

	CONVERT_SYMBOL() {
		return this.getToken(SQLSelectParser.CONVERT_SYMBOL, 0);
	}

	COLLATE_SYMBOL() {
		return this.getToken(SQLSelectParser.COLLATE_SYMBOL, 0);
	}

	AVG_SYMBOL() {
		return this.getToken(SQLSelectParser.AVG_SYMBOL, 0);
	}

	BIT_AND_SYMBOL() {
		return this.getToken(SQLSelectParser.BIT_AND_SYMBOL, 0);
	}

	BIT_OR_SYMBOL() {
		return this.getToken(SQLSelectParser.BIT_OR_SYMBOL, 0);
	}

	BIT_XOR_SYMBOL() {
		return this.getToken(SQLSelectParser.BIT_XOR_SYMBOL, 0);
	}

	COUNT_SYMBOL() {
		return this.getToken(SQLSelectParser.COUNT_SYMBOL, 0);
	}

	MIN_SYMBOL() {
		return this.getToken(SQLSelectParser.MIN_SYMBOL, 0);
	}

	MAX_SYMBOL() {
		return this.getToken(SQLSelectParser.MAX_SYMBOL, 0);
	}

	STD_SYMBOL() {
		return this.getToken(SQLSelectParser.STD_SYMBOL, 0);
	}

	VARIANCE_SYMBOL() {
		return this.getToken(SQLSelectParser.VARIANCE_SYMBOL, 0);
	}

	STDDEV_SAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.STDDEV_SAMP_SYMBOL, 0);
	}

	VAR_SAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.VAR_SAMP_SYMBOL, 0);
	}

	SUM_SYMBOL() {
		return this.getToken(SQLSelectParser.SUM_SYMBOL, 0);
	}

	GROUP_CONCAT_SYMBOL() {
		return this.getToken(SQLSelectParser.GROUP_CONCAT_SYMBOL, 0);
	}

	SEPARATOR_SYMBOL() {
		return this.getToken(SQLSelectParser.SEPARATOR_SYMBOL, 0);
	}

	GROUPING_SYMBOL() {
		return this.getToken(SQLSelectParser.GROUPING_SYMBOL, 0);
	}

	ROW_NUMBER_SYMBOL() {
		return this.getToken(SQLSelectParser.ROW_NUMBER_SYMBOL, 0);
	}

	RANK_SYMBOL() {
		return this.getToken(SQLSelectParser.RANK_SYMBOL, 0);
	}

	DENSE_RANK_SYMBOL() {
		return this.getToken(SQLSelectParser.DENSE_RANK_SYMBOL, 0);
	}

	CUME_DIST_SYMBOL() {
		return this.getToken(SQLSelectParser.CUME_DIST_SYMBOL, 0);
	}

	PERCENT_RANK_SYMBOL() {
		return this.getToken(SQLSelectParser.PERCENT_RANK_SYMBOL, 0);
	}

	NTILE_SYMBOL() {
		return this.getToken(SQLSelectParser.NTILE_SYMBOL, 0);
	}

	LEAD_SYMBOL() {
		return this.getToken(SQLSelectParser.LEAD_SYMBOL, 0);
	}

	LAG_SYMBOL() {
		return this.getToken(SQLSelectParser.LAG_SYMBOL, 0);
	}

	FIRST_VALUE_SYMBOL() {
		return this.getToken(SQLSelectParser.FIRST_VALUE_SYMBOL, 0);
	}

	LAST_VALUE_SYMBOL() {
		return this.getToken(SQLSelectParser.LAST_VALUE_SYMBOL, 0);
	}

	NTH_VALUE_SYMBOL() {
		return this.getToken(SQLSelectParser.NTH_VALUE_SYMBOL, 0);
	}

	FIRST_SYMBOL() {
		return this.getToken(SQLSelectParser.FIRST_SYMBOL, 0);
	}

	LAST_SYMBOL() {
		return this.getToken(SQLSelectParser.LAST_SYMBOL, 0);
	}

	OVER_SYMBOL() {
		return this.getToken(SQLSelectParser.OVER_SYMBOL, 0);
	}

	RESPECT_SYMBOL() {
		return this.getToken(SQLSelectParser.RESPECT_SYMBOL, 0);
	}

	NULLS_SYMBOL() {
		return this.getToken(SQLSelectParser.NULLS_SYMBOL, 0);
	}

	JSON_ARRAYAGG_SYMBOL() {
		return this.getToken(SQLSelectParser.JSON_ARRAYAGG_SYMBOL, 0);
	}

	JSON_OBJECTAGG_SYMBOL() {
		return this.getToken(SQLSelectParser.JSON_OBJECTAGG_SYMBOL, 0);
	}

	BOOLEAN_SYMBOL() {
		return this.getToken(SQLSelectParser.BOOLEAN_SYMBOL, 0);
	}

	LANGUAGE_SYMBOL() {
		return this.getToken(SQLSelectParser.LANGUAGE_SYMBOL, 0);
	}

	QUERY_SYMBOL() {
		return this.getToken(SQLSelectParser.QUERY_SYMBOL, 0);
	}

	EXPANSION_SYMBOL() {
		return this.getToken(SQLSelectParser.EXPANSION_SYMBOL, 0);
	}

	CHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.CHAR_SYMBOL, 0);
	}

	CURRENT_USER_SYMBOL() {
		return this.getToken(SQLSelectParser.CURRENT_USER_SYMBOL, 0);
	}

	DATE_SYMBOL() {
		return this.getToken(SQLSelectParser.DATE_SYMBOL, 0);
	}

	INSERT_SYMBOL() {
		return this.getToken(SQLSelectParser.INSERT_SYMBOL, 0);
	}

	TIME_SYMBOL() {
		return this.getToken(SQLSelectParser.TIME_SYMBOL, 0);
	}

	TIMESTAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_SYMBOL, 0);
	}

	USER_SYMBOL() {
		return this.getToken(SQLSelectParser.USER_SYMBOL, 0);
	}

	ADDDATE_SYMBOL() {
		return this.getToken(SQLSelectParser.ADDDATE_SYMBOL, 0);
	}

	SUBDATE_SYMBOL() {
		return this.getToken(SQLSelectParser.SUBDATE_SYMBOL, 0);
	}

	CURDATE_SYMBOL() {
		return this.getToken(SQLSelectParser.CURDATE_SYMBOL, 0);
	}

	CURTIME_SYMBOL() {
		return this.getToken(SQLSelectParser.CURTIME_SYMBOL, 0);
	}

	DATE_ADD_SYMBOL() {
		return this.getToken(SQLSelectParser.DATE_ADD_SYMBOL, 0);
	}

	DATE_SUB_SYMBOL() {
		return this.getToken(SQLSelectParser.DATE_SUB_SYMBOL, 0);
	}

	EXTRACT_SYMBOL() {
		return this.getToken(SQLSelectParser.EXTRACT_SYMBOL, 0);
	}

	GET_FORMAT_SYMBOL() {
		return this.getToken(SQLSelectParser.GET_FORMAT_SYMBOL, 0);
	}

	NOW_SYMBOL() {
		return this.getToken(SQLSelectParser.NOW_SYMBOL, 0);
	}

	POSITION_SYMBOL() {
		return this.getToken(SQLSelectParser.POSITION_SYMBOL, 0);
	}

	SYSDATE_SYMBOL() {
		return this.getToken(SQLSelectParser.SYSDATE_SYMBOL, 0);
	}

	TIMESTAMP_ADD_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_ADD_SYMBOL, 0);
	}

	TIMESTAMP_DIFF_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_DIFF_SYMBOL, 0);
	}

	UTC_DATE_SYMBOL() {
		return this.getToken(SQLSelectParser.UTC_DATE_SYMBOL, 0);
	}

	UTC_TIME_SYMBOL() {
		return this.getToken(SQLSelectParser.UTC_TIME_SYMBOL, 0);
	}

	UTC_TIMESTAMP_SYMBOL() {
		return this.getToken(SQLSelectParser.UTC_TIMESTAMP_SYMBOL, 0);
	}

	ASCII_SYMBOL() {
		return this.getToken(SQLSelectParser.ASCII_SYMBOL, 0);
	}

	CHARSET_SYMBOL() {
		return this.getToken(SQLSelectParser.CHARSET_SYMBOL, 0);
	}

	COALESCE_SYMBOL() {
		return this.getToken(SQLSelectParser.COALESCE_SYMBOL, 0);
	}

	COLLATION_SYMBOL() {
		return this.getToken(SQLSelectParser.COLLATION_SYMBOL, 0);
	}

	DATABASE_SYMBOL() {
		return this.getToken(SQLSelectParser.DATABASE_SYMBOL, 0);
	}

	IF_SYMBOL() {
		return this.getToken(SQLSelectParser.IF_SYMBOL, 0);
	}

	FORMAT_SYMBOL() {
		return this.getToken(SQLSelectParser.FORMAT_SYMBOL, 0);
	}

	MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.MICROSECOND_SYMBOL, 0);
	}

	OLD_PASSWORD_SYMBOL() {
		return this.getToken(SQLSelectParser.OLD_PASSWORD_SYMBOL, 0);
	}

	PASSWORD_SYMBOL() {
		return this.getToken(SQLSelectParser.PASSWORD_SYMBOL, 0);
	}

	REPEAT_SYMBOL() {
		return this.getToken(SQLSelectParser.REPEAT_SYMBOL, 0);
	}

	REPLACE_SYMBOL() {
		return this.getToken(SQLSelectParser.REPLACE_SYMBOL, 0);
	}

	REVERSE_SYMBOL() {
		return this.getToken(SQLSelectParser.REVERSE_SYMBOL, 0);
	}

	ROW_COUNT_SYMBOL() {
		return this.getToken(SQLSelectParser.ROW_COUNT_SYMBOL, 0);
	}

	TRUNCATE_SYMBOL() {
		return this.getToken(SQLSelectParser.TRUNCATE_SYMBOL, 0);
	}

	WEIGHT_STRING_SYMBOL() {
		return this.getToken(SQLSelectParser.WEIGHT_STRING_SYMBOL, 0);
	}

	CONTAINS_SYMBOL() {
		return this.getToken(SQLSelectParser.CONTAINS_SYMBOL, 0);
	}

	GEOMETRYCOLLECTION_SYMBOL() {
		return this.getToken(SQLSelectParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	}

	LINESTRING_SYMBOL() {
		return this.getToken(SQLSelectParser.LINESTRING_SYMBOL, 0);
	}

	MULTILINESTRING_SYMBOL() {
		return this.getToken(SQLSelectParser.MULTILINESTRING_SYMBOL, 0);
	}

	MULTIPOINT_SYMBOL() {
		return this.getToken(SQLSelectParser.MULTIPOINT_SYMBOL, 0);
	}

	MULTIPOLYGON_SYMBOL() {
		return this.getToken(SQLSelectParser.MULTIPOLYGON_SYMBOL, 0);
	}

	POINT_SYMBOL() {
		return this.getToken(SQLSelectParser.POINT_SYMBOL, 0);
	}

	POLYGON_SYMBOL() {
		return this.getToken(SQLSelectParser.POLYGON_SYMBOL, 0);
	}

	LEVEL_SYMBOL() {
		return this.getToken(SQLSelectParser.LEVEL_SYMBOL, 0);
	}

	DATETIME_SYMBOL() {
		return this.getToken(SQLSelectParser.DATETIME_SYMBOL, 0);
	}

	TRIM_SYMBOL() {
		return this.getToken(SQLSelectParser.TRIM_SYMBOL, 0);
	}

	LEADING_SYMBOL() {
		return this.getToken(SQLSelectParser.LEADING_SYMBOL, 0);
	}

	TRAILING_SYMBOL() {
		return this.getToken(SQLSelectParser.TRAILING_SYMBOL, 0);
	}

	BOTH_SYMBOL() {
		return this.getToken(SQLSelectParser.BOTH_SYMBOL, 0);
	}

	SUBSTRING_SYMBOL() {
		return this.getToken(SQLSelectParser.SUBSTRING_SYMBOL, 0);
	}

	WHEN_SYMBOL() {
		return this.getToken(SQLSelectParser.WHEN_SYMBOL, 0);
	}

	THEN_SYMBOL() {
		return this.getToken(SQLSelectParser.THEN_SYMBOL, 0);
	}

	ELSE_SYMBOL() {
		return this.getToken(SQLSelectParser.ELSE_SYMBOL, 0);
	}

	SIGNED_SYMBOL() {
		return this.getToken(SQLSelectParser.SIGNED_SYMBOL, 0);
	}

	UNSIGNED_SYMBOL() {
		return this.getToken(SQLSelectParser.UNSIGNED_SYMBOL, 0);
	}

	DECIMAL_SYMBOL() {
		return this.getToken(SQLSelectParser.DECIMAL_SYMBOL, 0);
	}

	JSON_SYMBOL() {
		return this.getToken(SQLSelectParser.JSON_SYMBOL, 0);
	}

	FLOAT_SYMBOL() {
		return this.getToken(SQLSelectParser.FLOAT_SYMBOL, 0);
	}

	SET_SYMBOL() {
		return this.getToken(SQLSelectParser.SET_SYMBOL, 0);
	}

	SECOND_MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.SECOND_MICROSECOND_SYMBOL, 0);
	}

	MINUTE_MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.MINUTE_MICROSECOND_SYMBOL, 0);
	}

	MINUTE_SECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.MINUTE_SECOND_SYMBOL, 0);
	}

	HOUR_MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.HOUR_MICROSECOND_SYMBOL, 0);
	}

	HOUR_SECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.HOUR_SECOND_SYMBOL, 0);
	}

	HOUR_MINUTE_SYMBOL() {
		return this.getToken(SQLSelectParser.HOUR_MINUTE_SYMBOL, 0);
	}

	DAY_MICROSECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_MICROSECOND_SYMBOL, 0);
	}

	DAY_SECOND_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_SECOND_SYMBOL, 0);
	}

	DAY_MINUTE_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_MINUTE_SYMBOL, 0);
	}

	DAY_HOUR_SYMBOL() {
		return this.getToken(SQLSelectParser.DAY_HOUR_SYMBOL, 0);
	}

	YEAR_MONTH_SYMBOL() {
		return this.getToken(SQLSelectParser.YEAR_MONTH_SYMBOL, 0);
	}

	BTREE_SYMBOL() {
		return this.getToken(SQLSelectParser.BTREE_SYMBOL, 0);
	}

	RTREE_SYMBOL() {
		return this.getToken(SQLSelectParser.RTREE_SYMBOL, 0);
	}

	HASH_SYMBOL() {
		return this.getToken(SQLSelectParser.HASH_SYMBOL, 0);
	}

	REAL_SYMBOL() {
		return this.getToken(SQLSelectParser.REAL_SYMBOL, 0);
	}

	DOUBLE_SYMBOL() {
		return this.getToken(SQLSelectParser.DOUBLE_SYMBOL, 0);
	}

	PRECISION_SYMBOL() {
		return this.getToken(SQLSelectParser.PRECISION_SYMBOL, 0);
	}

	NUMERIC_SYMBOL() {
		return this.getToken(SQLSelectParser.NUMERIC_SYMBOL, 0);
	}

	FIXED_SYMBOL() {
		return this.getToken(SQLSelectParser.FIXED_SYMBOL, 0);
	}

	BIT_SYMBOL() {
		return this.getToken(SQLSelectParser.BIT_SYMBOL, 0);
	}

	BOOL_SYMBOL() {
		return this.getToken(SQLSelectParser.BOOL_SYMBOL, 0);
	}

	VARYING_SYMBOL() {
		return this.getToken(SQLSelectParser.VARYING_SYMBOL, 0);
	}

	VARCHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.VARCHAR_SYMBOL, 0);
	}

	VARCHAR2_SYMBOL() {
		return this.getToken(SQLSelectParser.VARCHAR2_SYMBOL, 0);
	}

	NATIONAL_SYMBOL() {
		return this.getToken(SQLSelectParser.NATIONAL_SYMBOL, 0);
	}

	NVARCHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.NVARCHAR_SYMBOL, 0);
	}

	NVARCHAR2_SYMBOL() {
		return this.getToken(SQLSelectParser.NVARCHAR2_SYMBOL, 0);
	}

	NCHAR_SYMBOL() {
		return this.getToken(SQLSelectParser.NCHAR_SYMBOL, 0);
	}

	VARBINARY_SYMBOL() {
		return this.getToken(SQLSelectParser.VARBINARY_SYMBOL, 0);
	}

	TINYBLOB_SYMBOL() {
		return this.getToken(SQLSelectParser.TINYBLOB_SYMBOL, 0);
	}

	BLOB_SYMBOL() {
		return this.getToken(SQLSelectParser.BLOB_SYMBOL, 0);
	}

	CLOB_SYMBOL() {
		return this.getToken(SQLSelectParser.CLOB_SYMBOL, 0);
	}

	BFILE_SYMBOL() {
		return this.getToken(SQLSelectParser.BFILE_SYMBOL, 0);
	}

	RAW_SYMBOL() {
		return this.getToken(SQLSelectParser.RAW_SYMBOL, 0);
	}

	MEDIUMBLOB_SYMBOL() {
		return this.getToken(SQLSelectParser.MEDIUMBLOB_SYMBOL, 0);
	}

	LONGBLOB_SYMBOL() {
		return this.getToken(SQLSelectParser.LONGBLOB_SYMBOL, 0);
	}

	LONG_SYMBOL() {
		return this.getToken(SQLSelectParser.LONG_SYMBOL, 0);
	}

	TINYTEXT_SYMBOL() {
		return this.getToken(SQLSelectParser.TINYTEXT_SYMBOL, 0);
	}

	TEXT_SYMBOL() {
		return this.getToken(SQLSelectParser.TEXT_SYMBOL, 0);
	}

	MEDIUMTEXT_SYMBOL() {
		return this.getToken(SQLSelectParser.MEDIUMTEXT_SYMBOL, 0);
	}

	LONGTEXT_SYMBOL() {
		return this.getToken(SQLSelectParser.LONGTEXT_SYMBOL, 0);
	}

	ENUM_SYMBOL() {
		return this.getToken(SQLSelectParser.ENUM_SYMBOL, 0);
	}

	SERIAL_SYMBOL() {
		return this.getToken(SQLSelectParser.SERIAL_SYMBOL, 0);
	}

	GEOMETRY_SYMBOL() {
		return this.getToken(SQLSelectParser.GEOMETRY_SYMBOL, 0);
	}

	ZEROFILL_SYMBOL() {
		return this.getToken(SQLSelectParser.ZEROFILL_SYMBOL, 0);
	}

	BYTE_SYMBOL() {
		return this.getToken(SQLSelectParser.BYTE_SYMBOL, 0);
	}

	UNICODE_SYMBOL() {
		return this.getToken(SQLSelectParser.UNICODE_SYMBOL, 0);
	}

	TERMINATED_SYMBOL() {
		return this.getToken(SQLSelectParser.TERMINATED_SYMBOL, 0);
	}

	OPTIONALLY_SYMBOL() {
		return this.getToken(SQLSelectParser.OPTIONALLY_SYMBOL, 0);
	}

	ENCLOSED_SYMBOL() {
		return this.getToken(SQLSelectParser.ENCLOSED_SYMBOL, 0);
	}

	ESCAPED_SYMBOL() {
		return this.getToken(SQLSelectParser.ESCAPED_SYMBOL, 0);
	}

	LINES_SYMBOL() {
		return this.getToken(SQLSelectParser.LINES_SYMBOL, 0);
	}

	STARTING_SYMBOL() {
		return this.getToken(SQLSelectParser.STARTING_SYMBOL, 0);
	}

	GLOBAL_SYMBOL() {
		return this.getToken(SQLSelectParser.GLOBAL_SYMBOL, 0);
	}

	LOCAL_SYMBOL() {
		return this.getToken(SQLSelectParser.LOCAL_SYMBOL, 0);
	}

	SESSION_SYMBOL() {
		return this.getToken(SQLSelectParser.SESSION_SYMBOL, 0);
	}

	BYTE_INT_SYMBOL() {
		return this.getToken(SQLSelectParser.BYTE_INT_SYMBOL, 0);
	}

	WITHOUT_SYMBOL() {
		return this.getToken(SQLSelectParser.WITHOUT_SYMBOL, 0);
	}

	TIMESTAMP_LTZ_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_LTZ_SYMBOL, 0);
	}

	TIMESTAMP_NTZ_SYMBOL() {
		return this.getToken(SQLSelectParser.TIMESTAMP_NTZ_SYMBOL, 0);
	}

	ZONE_SYMBOL() {
		return this.getToken(SQLSelectParser.ZONE_SYMBOL, 0);
	}

	STRING_SYMBOL() {
		return this.getToken(SQLSelectParser.STRING_SYMBOL, 0);
	}

	FLOAT_SYMBOL_4() {
		return this.getToken(SQLSelectParser.FLOAT_SYMBOL_4, 0);
	}

	FLOAT_SYMBOL_8() {
		return this.getToken(SQLSelectParser.FLOAT_SYMBOL_8, 0);
	}

	NUMBER_SYMBOL() {
		return this.getToken(SQLSelectParser.NUMBER_SYMBOL, 0);
	}

	VARIANT_SYMBOL() {
		return this.getToken(SQLSelectParser.VARIANT_SYMBOL, 0);
	}

	OBJECT_SYMBOL() {
		return this.getToken(SQLSelectParser.OBJECT_SYMBOL, 0);
	}

	GEOGRAPHY_SYMBOL() {
		return this.getToken(SQLSelectParser.GEOGRAPHY_SYMBOL, 0);
	}

	enterRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.enterIdentifierKeyword(this);
		}
	}

	exitRule(listener) {
		if (listener instanceof SQLSelectParserListener) {
			listener.exitIdentifierKeyword(this);
		}
	}
}

SQLSelectParser.QueryContext = QueryContext;
SQLSelectParser.ValuesContext = ValuesContext;
SQLSelectParser.SelectStatementContext = SelectStatementContext;
SQLSelectParser.SelectStatementWithIntoContext = SelectStatementWithIntoContext;
SQLSelectParser.QueryExpressionContext = QueryExpressionContext;
SQLSelectParser.QueryExpressionBodyContext = QueryExpressionBodyContext;
SQLSelectParser.QueryExpressionParensContext = QueryExpressionParensContext;
SQLSelectParser.QueryPrimaryContext = QueryPrimaryContext;
SQLSelectParser.QuerySpecificationContext = QuerySpecificationContext;
SQLSelectParser.SubqueryContext = SubqueryContext;
SQLSelectParser.QuerySpecOptionContext = QuerySpecOptionContext;
SQLSelectParser.LimitClauseContext = LimitClauseContext;
SQLSelectParser.LimitOptionsContext = LimitOptionsContext;
SQLSelectParser.LimitOptionContext = LimitOptionContext;
SQLSelectParser.IntoClauseContext = IntoClauseContext;
SQLSelectParser.ProcedureAnalyseClauseContext = ProcedureAnalyseClauseContext;
SQLSelectParser.HavingClauseContext = HavingClauseContext;
SQLSelectParser.WindowClauseContext = WindowClauseContext;
SQLSelectParser.WindowDefinitionContext = WindowDefinitionContext;
SQLSelectParser.WindowSpecContext = WindowSpecContext;
SQLSelectParser.WindowSpecDetailsContext = WindowSpecDetailsContext;
SQLSelectParser.WindowFrameClauseContext = WindowFrameClauseContext;
SQLSelectParser.WindowFrameUnitsContext = WindowFrameUnitsContext;
SQLSelectParser.WindowFrameExtentContext = WindowFrameExtentContext;
SQLSelectParser.WindowFrameStartContext = WindowFrameStartContext;
SQLSelectParser.WindowFrameBetweenContext = WindowFrameBetweenContext;
SQLSelectParser.WindowFrameBoundContext = WindowFrameBoundContext;
SQLSelectParser.WindowFrameExclusionContext = WindowFrameExclusionContext;
SQLSelectParser.WithClauseContext = WithClauseContext;
SQLSelectParser.CommonTableExpressionContext = CommonTableExpressionContext;
SQLSelectParser.GroupByClauseContext = GroupByClauseContext;
SQLSelectParser.OlapOptionContext = OlapOptionContext;
SQLSelectParser.OrderClauseContext = OrderClauseContext;
SQLSelectParser.DirectionContext = DirectionContext;
SQLSelectParser.FromClauseContext = FromClauseContext;
SQLSelectParser.TableReferenceListContext = TableReferenceListContext;
SQLSelectParser.TableValueConstructorContext = TableValueConstructorContext;
SQLSelectParser.ExplicitTableContext = ExplicitTableContext;
SQLSelectParser.RowValueExplicitContext = RowValueExplicitContext;
SQLSelectParser.SelectOptionContext = SelectOptionContext;
SQLSelectParser.LockingClauseListContext = LockingClauseListContext;
SQLSelectParser.LockingClauseContext = LockingClauseContext;
SQLSelectParser.LockStrenghContext = LockStrenghContext;
SQLSelectParser.LockedRowActionContext = LockedRowActionContext;
SQLSelectParser.SelectItemListContext = SelectItemListContext;
SQLSelectParser.SelectItemContext = SelectItemContext;
SQLSelectParser.SelectAliasContext = SelectAliasContext;
SQLSelectParser.WhereClauseContext = WhereClauseContext;
SQLSelectParser.QualifyClauseContext = QualifyClauseContext;
SQLSelectParser.TableReferenceContext = TableReferenceContext;
SQLSelectParser.EscapedTableReferenceContext = EscapedTableReferenceContext;
SQLSelectParser.JoinedTableContext = JoinedTableContext;
SQLSelectParser.NaturalJoinTypeContext = NaturalJoinTypeContext;
SQLSelectParser.InnerJoinTypeContext = InnerJoinTypeContext;
SQLSelectParser.OuterJoinTypeContext = OuterJoinTypeContext;
SQLSelectParser.TableFactorContext = TableFactorContext;
SQLSelectParser.SingleTableContext = SingleTableContext;
SQLSelectParser.SingleTableParensContext = SingleTableParensContext;
SQLSelectParser.DerivedTableContext = DerivedTableContext;
SQLSelectParser.TableReferenceListParensContext = TableReferenceListParensContext;
SQLSelectParser.TableFunctionContext = TableFunctionContext;
SQLSelectParser.ColumnsClauseContext = ColumnsClauseContext;
SQLSelectParser.JtColumnContext = JtColumnContext;
SQLSelectParser.OnEmptyOrErrorContext = OnEmptyOrErrorContext;
SQLSelectParser.OnEmptyContext = OnEmptyContext;
SQLSelectParser.OnErrorContext = OnErrorContext;
SQLSelectParser.JtOnResponseContext = JtOnResponseContext;
SQLSelectParser.UnionOptionContext = UnionOptionContext;
SQLSelectParser.TableAliasContext = TableAliasContext;
SQLSelectParser.IndexHintListContext = IndexHintListContext;
SQLSelectParser.IndexHintContext = IndexHintContext;
SQLSelectParser.IndexHintTypeContext = IndexHintTypeContext;
SQLSelectParser.KeyOrIndexContext = KeyOrIndexContext;
SQLSelectParser.IndexHintClauseContext = IndexHintClauseContext;
SQLSelectParser.IndexListContext = IndexListContext;
SQLSelectParser.IndexListElementContext = IndexListElementContext;
SQLSelectParser.ExprContext = ExprContext;
SQLSelectParser.BoolPriContext = BoolPriContext;
SQLSelectParser.CompOpContext = CompOpContext;
SQLSelectParser.PredicateContext = PredicateContext;
SQLSelectParser.PredicateOperationsContext = PredicateOperationsContext;
SQLSelectParser.BitExprContext = BitExprContext;
SQLSelectParser.SimpleExprContext = SimpleExprContext;
SQLSelectParser.JsonOperatorContext = JsonOperatorContext;
SQLSelectParser.SumExprContext = SumExprContext;
SQLSelectParser.GroupingOperationContext = GroupingOperationContext;
SQLSelectParser.WindowFunctionCallContext = WindowFunctionCallContext;
SQLSelectParser.WindowingClauseContext = WindowingClauseContext;
SQLSelectParser.LeadLagInfoContext = LeadLagInfoContext;
SQLSelectParser.NullTreatmentContext = NullTreatmentContext;
SQLSelectParser.JsonFunctionContext = JsonFunctionContext;
SQLSelectParser.InSumExprContext = InSumExprContext;
SQLSelectParser.IdentListArgContext = IdentListArgContext;
SQLSelectParser.IdentListContext = IdentListContext;
SQLSelectParser.FulltextOptionsContext = FulltextOptionsContext;
SQLSelectParser.RuntimeFunctionCallContext = RuntimeFunctionCallContext;
SQLSelectParser.GeometryFunctionContext = GeometryFunctionContext;
SQLSelectParser.TimeFunctionParametersContext = TimeFunctionParametersContext;
SQLSelectParser.FractionalPrecisionContext = FractionalPrecisionContext;
SQLSelectParser.WeightStringLevelsContext = WeightStringLevelsContext;
SQLSelectParser.WeightStringLevelListItemContext = WeightStringLevelListItemContext;
SQLSelectParser.DateTimeTtypeContext = DateTimeTtypeContext;
SQLSelectParser.TrimFunctionContext = TrimFunctionContext;
SQLSelectParser.SubstringFunctionContext = SubstringFunctionContext;
SQLSelectParser.FunctionCallContext = FunctionCallContext;
SQLSelectParser.UdfExprListContext = UdfExprListContext;
SQLSelectParser.UdfExprContext = UdfExprContext;
SQLSelectParser.UnpivotClauseContext = UnpivotClauseContext;
SQLSelectParser.VariableContext = VariableContext;
SQLSelectParser.UserVariableContext = UserVariableContext;
SQLSelectParser.SystemVariableContext = SystemVariableContext;
SQLSelectParser.WhenExpressionContext = WhenExpressionContext;
SQLSelectParser.ThenExpressionContext = ThenExpressionContext;
SQLSelectParser.ElseExpressionContext = ElseExpressionContext;
SQLSelectParser.ExprListContext = ExprListContext;
SQLSelectParser.CharsetContext = CharsetContext;
SQLSelectParser.NotRuleContext = NotRuleContext;
SQLSelectParser.Not2RuleContext = Not2RuleContext;
SQLSelectParser.IntervalContext = IntervalContext;
SQLSelectParser.IntervalTimeStampContext = IntervalTimeStampContext;
SQLSelectParser.ExprListWithParenthesesContext = ExprListWithParenthesesContext;
SQLSelectParser.ExprWithParenthesesContext = ExprWithParenthesesContext;
SQLSelectParser.SimpleExprWithParenthesesContext = SimpleExprWithParenthesesContext;
SQLSelectParser.OrderListContext = OrderListContext;
SQLSelectParser.NullsOrderContext = NullsOrderContext;
SQLSelectParser.OrderExpressionContext = OrderExpressionContext;
SQLSelectParser.IndexTypeContext = IndexTypeContext;
SQLSelectParser.DataTypeContext = DataTypeContext;
SQLSelectParser.NcharContext = NcharContext;
SQLSelectParser.FieldLengthContext = FieldLengthContext;
SQLSelectParser.FieldOptionsContext = FieldOptionsContext;
SQLSelectParser.CharsetWithOptBinaryContext = CharsetWithOptBinaryContext;
SQLSelectParser.AsciiContext = AsciiContext;
SQLSelectParser.UnicodeContext = UnicodeContext;
SQLSelectParser.WsNumCodepointsContext = WsNumCodepointsContext;
SQLSelectParser.TypeDatetimePrecisionContext = TypeDatetimePrecisionContext;
SQLSelectParser.CharsetNameContext = CharsetNameContext;
SQLSelectParser.CollationNameContext = CollationNameContext;
SQLSelectParser.CollateContext = CollateContext;
SQLSelectParser.CharsetClauseContext = CharsetClauseContext;
SQLSelectParser.FieldsClauseContext = FieldsClauseContext;
SQLSelectParser.FieldTermContext = FieldTermContext;
SQLSelectParser.LinesClauseContext = LinesClauseContext;
SQLSelectParser.LineTermContext = LineTermContext;
SQLSelectParser.UsePartitionContext = UsePartitionContext;
SQLSelectParser.ColumnInternalRefListContext = ColumnInternalRefListContext;
SQLSelectParser.TableAliasRefListContext = TableAliasRefListContext;
SQLSelectParser.PureIdentifierContext = PureIdentifierContext;
SQLSelectParser.IdentifierContext = IdentifierContext;
SQLSelectParser.IdentifierListContext = IdentifierListContext;
SQLSelectParser.IdentifierListWithParenthesesContext = IdentifierListWithParenthesesContext;
SQLSelectParser.QualifiedIdentifierContext = QualifiedIdentifierContext;
SQLSelectParser.JsonPathIdentifierContext = JsonPathIdentifierContext;
SQLSelectParser.DotIdentifierContext = DotIdentifierContext;
SQLSelectParser.Ulong_numberContext = Ulong_numberContext;
SQLSelectParser.Real_ulong_numberContext = Real_ulong_numberContext;
SQLSelectParser.Ulonglong_numberContext = Ulonglong_numberContext;
SQLSelectParser.Real_ulonglong_numberContext = Real_ulonglong_numberContext;
SQLSelectParser.LiteralContext = LiteralContext;
SQLSelectParser.StringListContext = StringListContext;
SQLSelectParser.TextStringLiteralContext = TextStringLiteralContext;
SQLSelectParser.TextStringContext = TextStringContext;
SQLSelectParser.TextLiteralContext = TextLiteralContext;
SQLSelectParser.NumLiteralContext = NumLiteralContext;
SQLSelectParser.BoolLiteralContext = BoolLiteralContext;
SQLSelectParser.NullLiteralContext = NullLiteralContext;
SQLSelectParser.TemporalLiteralContext = TemporalLiteralContext;
SQLSelectParser.FloatOptionsContext = FloatOptionsContext;
SQLSelectParser.PrecisionContext = PrecisionContext;
SQLSelectParser.TextOrIdentifierContext = TextOrIdentifierContext;
SQLSelectParser.ParenthesesContext = ParenthesesContext;
SQLSelectParser.EqualContext = EqualContext;
SQLSelectParser.VarIdentTypeContext = VarIdentTypeContext;
SQLSelectParser.IdentifierKeywordContext = IdentifierKeywordContext;

module.exports = SQLSelectParser;
